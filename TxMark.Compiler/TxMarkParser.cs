/*
 *  TxMark 1.0.0.alpha-5-g61bda79
 *
 *  Copyright (c) 2016 Aaron G. Daisley-Harrison
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.3-SNAPSHOT
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\v-adai\Documents\Visual Studio 2015\Projects\TxMark\TxMark.Antlr\TxMarkParser.g4 by ANTLR 4.5.3-SNAPSHOT

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace TxMark.Compiler {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.3-SNAPSHOT")]
[System.CLSCompliant(false)]
public partial class TxMarkParser : Parser {
	public const int
		HTML_COMMENT=1, MACRO_OPEN=2, OPEN_HOOK=3, CLOSE_HOOK=4, OPEN_SCRIPT=5, 
		OPEN_STYLE=6, LESS_THAN=7, QUESTION_MARK=8, DOLLAR_SIGN=9, VERTICAL_BAR=10, 
		COLON=11, SLASH=12, EQUALS=13, DOUBLE_QUOTE=14, SINGLE_QUOTE=15, GREATER_THAN=16, 
		ASTERISK=17, DOUBLE_SINGLE_QUOTE=18, DOUBLE_SLASH=19, DOUBLE_TILDA=20, 
		DOUBLE_CIRCUMFLEX=21, DOUBLE_ASTERISK=22, PUNCTUATION=23, LITERAL=24, 
		WORD=25, NUMBER=26, WHITESPACE=27, SYMBOL=28, MWHITESPACE=29, MCOMMA=30, 
		MCOLON=31, MNUMBER=32, MDOLLAR_SIGN=33, MQUESTION_MARK=34, KEYWORD_IF=35, 
		KEYWORD_CHOOSE=36, KEYWORD_WHEN=37, KEYWORD_OTHERWISE=38, KEYWORD_SET=39, 
		KEYWORD_HOOK=40, KEYWORD_TO=41, KEYWORD_ELSEIF=42, KEYWORD_EACH=43, KEYWORD_ELSE=44, 
		CONSTANT_TRUE=45, CONSTANT_FALSE=46, CONSTANT_NULL=47, OPERATOR_AS=48, 
		OPERATOR_ST=49, OPERATOR_RD=50, OPERATOR_ND=51, OPERATOR_TH=52, OPERATOR_LESS_THAN=53, 
		OPERATOR_GREATER_THAN=54, OPERATOR_LESS_OR_EQUAL=55, OPERATOR_GREATER_OR_EQUAL=56, 
		OPERATOR_EQUAL=57, OPERATOR_AND=58, OPERATOR_CONTAINS=59, OPERATOR_OR=60, 
		OPERATOR_IN=61, OPERATOR_LAST=62, OPERATOR_IS=63, OPERATOR_NOT=64, OPERATOR_TO=65, 
		OPERATOR_POSSESSIVE=66, OPERATOR_OF=67, OPERATOR_PLUS=68, OPERATOR_MINUS=69, 
		OPERATOR_DIVIDE=70, OPERATOR_MULTIPLY=71, OPERATOR_MODULO=72, OPERATOR_POWER=73, 
		OPEN_PARENTHESIS=74, CLOSE_PARENTHESIS=75, DOUBLE_QUOTE_STRING=76, MWORD=77, 
		SCRIPT_BODY=78, SCRIPT_SHORT_BODY=79, STYLE_BODY=80, STYLE_SHORT_BODY=81;
	public const int
		RULE_document = 0, RULE_whitespace = 1, RULE_left_nametag = 2, RULE_right_nametag = 3, 
		RULE_variable = 4, RULE_hookName = 5, RULE_word = 6, RULE_number = 7, 
		RULE_quote = 8, RULE_operand = 9, RULE_indexSuffix = 10, RULE_indexOperand = 11, 
		RULE_indexOf_subexpression = 12, RULE_index_subexpression = 13, RULE_index_expression = 14, 
		RULE_signed_index_expression = 15, RULE_booleanOperator = 16, RULE_subexpression = 17, 
		RULE_expression = 18, RULE_constantTrue = 19, RULE_constantFalse = 20, 
		RULE_constantNull = 21, RULE_constant = 22, RULE_macroArgument = 23, RULE_literal = 24, 
		RULE_punctuation = 25, RULE_htmlOpenTag = 26, RULE_htmlCloseTag = 27, 
		RULE_htmlElement = 28, RULE_emphasis = 29, RULE_muinuta = 30, RULE_htmlAttributeName = 31, 
		RULE_htmlAttribute = 32, RULE_htmlAttributeValueContent = 33, RULE_htmlAttributeValue = 34, 
		RULE_script = 35, RULE_style = 36, RULE_element = 37, RULE_content = 38, 
		RULE_phrase = 39, RULE_hook_clause = 40, RULE_macro_clause = 41, RULE_each_clause = 42, 
		RULE_elseIf_clause = 43, RULE_else_clause = 44, RULE_if_clause = 45, RULE_when_clause = 46, 
		RULE_otherwise_clause = 47, RULE_choose_clause = 48, RULE_set_clause = 49, 
		RULE_hook_definition_clause = 50, RULE_macro = 51, RULE_submacro = 52, 
		RULE_hook = 53, RULE_macroName = 54;
	public static readonly string[] ruleNames = {
		"document", "whitespace", "left_nametag", "right_nametag", "variable", 
		"hookName", "word", "number", "quote", "operand", "indexSuffix", "indexOperand", 
		"indexOf_subexpression", "index_subexpression", "index_expression", "signed_index_expression", 
		"booleanOperator", "subexpression", "expression", "constantTrue", "constantFalse", 
		"constantNull", "constant", "macroArgument", "literal", "punctuation", 
		"htmlOpenTag", "htmlCloseTag", "htmlElement", "emphasis", "muinuta", "htmlAttributeName", 
		"htmlAttribute", "htmlAttributeValueContent", "htmlAttributeValue", "script", 
		"style", "element", "content", "phrase", "hook_clause", "macro_clause", 
		"each_clause", "elseIf_clause", "else_clause", "if_clause", "when_clause", 
		"otherwise_clause", "choose_clause", "set_clause", "hook_definition_clause", 
		"macro", "submacro", "hook", "macroName"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, "'['", "']'", null, null, null, null, null, "'|'", null, 
		null, null, "'\"'", "'''", null, null, "''''", "'//'", "'~~'", "'^^'", 
		"'**'", null, null, null, null, null, null, null, "','", null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, "'<='", "'>='", 
		null, null, null, null, null, null, null, null, null, null, null, "'+'", 
		"'-'", null, null, "'%'", "'^'", null, "')'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "HTML_COMMENT", "MACRO_OPEN", "OPEN_HOOK", "CLOSE_HOOK", "OPEN_SCRIPT", 
		"OPEN_STYLE", "LESS_THAN", "QUESTION_MARK", "DOLLAR_SIGN", "VERTICAL_BAR", 
		"COLON", "SLASH", "EQUALS", "DOUBLE_QUOTE", "SINGLE_QUOTE", "GREATER_THAN", 
		"ASTERISK", "DOUBLE_SINGLE_QUOTE", "DOUBLE_SLASH", "DOUBLE_TILDA", "DOUBLE_CIRCUMFLEX", 
		"DOUBLE_ASTERISK", "PUNCTUATION", "LITERAL", "WORD", "NUMBER", "WHITESPACE", 
		"SYMBOL", "MWHITESPACE", "MCOMMA", "MCOLON", "MNUMBER", "MDOLLAR_SIGN", 
		"MQUESTION_MARK", "KEYWORD_IF", "KEYWORD_CHOOSE", "KEYWORD_WHEN", "KEYWORD_OTHERWISE", 
		"KEYWORD_SET", "KEYWORD_HOOK", "KEYWORD_TO", "KEYWORD_ELSEIF", "KEYWORD_EACH", 
		"KEYWORD_ELSE", "CONSTANT_TRUE", "CONSTANT_FALSE", "CONSTANT_NULL", "OPERATOR_AS", 
		"OPERATOR_ST", "OPERATOR_RD", "OPERATOR_ND", "OPERATOR_TH", "OPERATOR_LESS_THAN", 
		"OPERATOR_GREATER_THAN", "OPERATOR_LESS_OR_EQUAL", "OPERATOR_GREATER_OR_EQUAL", 
		"OPERATOR_EQUAL", "OPERATOR_AND", "OPERATOR_CONTAINS", "OPERATOR_OR", 
		"OPERATOR_IN", "OPERATOR_LAST", "OPERATOR_IS", "OPERATOR_NOT", "OPERATOR_TO", 
		"OPERATOR_POSSESSIVE", "OPERATOR_OF", "OPERATOR_PLUS", "OPERATOR_MINUS", 
		"OPERATOR_DIVIDE", "OPERATOR_MULTIPLY", "OPERATOR_MODULO", "OPERATOR_POWER", 
		"OPEN_PARENTHESIS", "CLOSE_PARENTHESIS", "DOUBLE_QUOTE_STRING", "MWORD", 
		"SCRIPT_BODY", "SCRIPT_SHORT_BODY", "STYLE_BODY", "STYLE_SHORT_BODY"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "TxMarkParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public TxMarkParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class DocumentContext : ParserRuleContext {
		public ContentContext content() {
			return GetRuleContext<ContentContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(TxMarkParser.Eof, 0); }
		public DocumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_document; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITxMarkParserListener typedListener = listener as ITxMarkParserListener;
			if (typedListener != null) typedListener.EnterDocument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITxMarkParserListener typedListener = listener as ITxMarkParserListener;
			if (typedListener != null) typedListener.ExitDocument(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITxMarkParserVisitor<TResult> typedVisitor = visitor as ITxMarkParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDocument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DocumentContext document() {
		DocumentContext _localctx = new DocumentContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_document);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 110; content();
			State = 111; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhitespaceContext : ParserRuleContext {
		public ITerminalNode WHITESPACE() { return GetToken(TxMarkParser.WHITESPACE, 0); }
		public WhitespaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whitespace; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITxMarkParserListener typedListener = listener as ITxMarkParserListener;
			if (typedListener != null) typedListener.EnterWhitespace(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITxMarkParserListener typedListener = listener as ITxMarkParserListener;
			if (typedListener != null) typedListener.ExitWhitespace(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITxMarkParserVisitor<TResult> typedVisitor = visitor as ITxMarkParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhitespace(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhitespaceContext whitespace() {
		WhitespaceContext _localctx = new WhitespaceContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_whitespace);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 113; Match(WHITESPACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Left_nametagContext : ParserRuleContext {
		public ITerminalNode VERTICAL_BAR() { return GetToken(TxMarkParser.VERTICAL_BAR, 0); }
		public WordContext word() {
			return GetRuleContext<WordContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(TxMarkParser.COLON, 0); }
		public Left_nametagContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_left_nametag; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITxMarkParserListener typedListener = listener as ITxMarkParserListener;
			if (typedListener != null) typedListener.EnterLeft_nametag(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITxMarkParserListener typedListener = listener as ITxMarkParserListener;
			if (typedListener != null) typedListener.ExitLeft_nametag(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITxMarkParserVisitor<TResult> typedVisitor = visitor as ITxMarkParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLeft_nametag(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Left_nametagContext left_nametag() {
		Left_nametagContext _localctx = new Left_nametagContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_left_nametag);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 115; Match(VERTICAL_BAR);
			State = 116; word();
			State = 117; Match(COLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Right_nametagContext : ParserRuleContext {
		public ITerminalNode COLON() { return GetToken(TxMarkParser.COLON, 0); }
		public WordContext word() {
			return GetRuleContext<WordContext>(0);
		}
		public ITerminalNode VERTICAL_BAR() { return GetToken(TxMarkParser.VERTICAL_BAR, 0); }
		public Right_nametagContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_right_nametag; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITxMarkParserListener typedListener = listener as ITxMarkParserListener;
			if (typedListener != null) typedListener.EnterRight_nametag(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITxMarkParserListener typedListener = listener as ITxMarkParserListener;
			if (typedListener != null) typedListener.ExitRight_nametag(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITxMarkParserVisitor<TResult> typedVisitor = visitor as ITxMarkParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRight_nametag(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Right_nametagContext right_nametag() {
		Right_nametagContext _localctx = new Right_nametagContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_right_nametag);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 119; Match(COLON);
			State = 120; word();
			State = 121; Match(VERTICAL_BAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableContext : ParserRuleContext {
		public ITerminalNode DOLLAR_SIGN() { return GetToken(TxMarkParser.DOLLAR_SIGN, 0); }
		public WordContext word() {
			return GetRuleContext<WordContext>(0);
		}
		public ITerminalNode MDOLLAR_SIGN() { return GetToken(TxMarkParser.MDOLLAR_SIGN, 0); }
		public VariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITxMarkParserListener typedListener = listener as ITxMarkParserListener;
			if (typedListener != null) typedListener.EnterVariable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITxMarkParserListener typedListener = listener as ITxMarkParserListener;
			if (typedListener != null) typedListener.ExitVariable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITxMarkParserVisitor<TResult> typedVisitor = visitor as ITxMarkParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableContext variable() {
		VariableContext _localctx = new VariableContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_variable);
		try {
			State = 127;
			switch (_input.La(1)) {
			case DOLLAR_SIGN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 123; Match(DOLLAR_SIGN);
				State = 124; word();
				}
				break;
			case MDOLLAR_SIGN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 125; Match(MDOLLAR_SIGN);
				State = 126; word();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HookNameContext : ParserRuleContext {
		public ITerminalNode QUESTION_MARK() { return GetToken(TxMarkParser.QUESTION_MARK, 0); }
		public WordContext word() {
			return GetRuleContext<WordContext>(0);
		}
		public ITerminalNode MQUESTION_MARK() { return GetToken(TxMarkParser.MQUESTION_MARK, 0); }
		public HookNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hookName; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITxMarkParserListener typedListener = listener as ITxMarkParserListener;
			if (typedListener != null) typedListener.EnterHookName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITxMarkParserListener typedListener = listener as ITxMarkParserListener;
			if (typedListener != null) typedListener.ExitHookName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITxMarkParserVisitor<TResult> typedVisitor = visitor as ITxMarkParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHookName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HookNameContext hookName() {
		HookNameContext _localctx = new HookNameContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_hookName);
		try {
			State = 133;
			switch (_input.La(1)) {
			case QUESTION_MARK:
				EnterOuterAlt(_localctx, 1);
				{
				State = 129; Match(QUESTION_MARK);
				State = 130; word();
				}
				break;
			case MQUESTION_MARK:
				EnterOuterAlt(_localctx, 2);
				{
				State = 131; Match(MQUESTION_MARK);
				State = 132; word();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WordContext : ParserRuleContext {
		public ITerminalNode WORD() { return GetToken(TxMarkParser.WORD, 0); }
		public ITerminalNode MWORD() { return GetToken(TxMarkParser.MWORD, 0); }
		public WordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_word; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITxMarkParserListener typedListener = listener as ITxMarkParserListener;
			if (typedListener != null) typedListener.EnterWord(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITxMarkParserListener typedListener = listener as ITxMarkParserListener;
			if (typedListener != null) typedListener.ExitWord(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITxMarkParserVisitor<TResult> typedVisitor = visitor as ITxMarkParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWord(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WordContext word() {
		WordContext _localctx = new WordContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_word);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 135;
			_la = _input.La(1);
			if ( !(_la==WORD || _la==MWORD) ) {
			_errHandler.RecoverInline(this);
			} else {
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberContext : ParserRuleContext {
		public ITerminalNode NUMBER() { return GetToken(TxMarkParser.NUMBER, 0); }
		public ITerminalNode MNUMBER() { return GetToken(TxMarkParser.MNUMBER, 0); }
		public NumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITxMarkParserListener typedListener = listener as ITxMarkParserListener;
			if (typedListener != null) typedListener.EnterNumber(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITxMarkParserListener typedListener = listener as ITxMarkParserListener;
			if (typedListener != null) typedListener.ExitNumber(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITxMarkParserVisitor<TResult> typedVisitor = visitor as ITxMarkParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberContext number() {
		NumberContext _localctx = new NumberContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_number);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 137;
			_la = _input.La(1);
			if ( !(_la==NUMBER || _la==MNUMBER) ) {
			_errHandler.RecoverInline(this);
			} else {
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QuoteContext : ParserRuleContext {
		public ITerminalNode DOUBLE_QUOTE_STRING() { return GetToken(TxMarkParser.DOUBLE_QUOTE_STRING, 0); }
		public QuoteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_quote; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITxMarkParserListener typedListener = listener as ITxMarkParserListener;
			if (typedListener != null) typedListener.EnterQuote(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITxMarkParserListener typedListener = listener as ITxMarkParserListener;
			if (typedListener != null) typedListener.ExitQuote(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITxMarkParserVisitor<TResult> typedVisitor = visitor as ITxMarkParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuote(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QuoteContext quote() {
		QuoteContext _localctx = new QuoteContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_quote);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 139; Match(DOUBLE_QUOTE_STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperandContext : ParserRuleContext {
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public HookNameContext hookName() {
			return GetRuleContext<HookNameContext>(0);
		}
		public SubmacroContext submacro() {
			return GetRuleContext<SubmacroContext>(0);
		}
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public WordContext word() {
			return GetRuleContext<WordContext>(0);
		}
		public ITerminalNode OPEN_PARENTHESIS() { return GetToken(TxMarkParser.OPEN_PARENTHESIS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode CLOSE_PARENTHESIS() { return GetToken(TxMarkParser.CLOSE_PARENTHESIS, 0); }
		public OperandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operand; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITxMarkParserListener typedListener = listener as ITxMarkParserListener;
			if (typedListener != null) typedListener.EnterOperand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITxMarkParserListener typedListener = listener as ITxMarkParserListener;
			if (typedListener != null) typedListener.ExitOperand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITxMarkParserVisitor<TResult> typedVisitor = visitor as ITxMarkParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperandContext operand() {
		OperandContext _localctx = new OperandContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_operand);
		try {
			State = 150;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,2,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 141; variable();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 142; hookName();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 143; submacro();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 144; constant();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 145; word();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				{
				State = 146; Match(OPEN_PARENTHESIS);
				State = 147; expression();
				State = 148; Match(CLOSE_PARENTHESIS);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexSuffixContext : ParserRuleContext {
		public ITerminalNode OPERATOR_ST() { return GetToken(TxMarkParser.OPERATOR_ST, 0); }
		public ITerminalNode OPERATOR_ND() { return GetToken(TxMarkParser.OPERATOR_ND, 0); }
		public ITerminalNode OPERATOR_RD() { return GetToken(TxMarkParser.OPERATOR_RD, 0); }
		public ITerminalNode OPERATOR_TH() { return GetToken(TxMarkParser.OPERATOR_TH, 0); }
		public IndexSuffixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexSuffix; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITxMarkParserListener typedListener = listener as ITxMarkParserListener;
			if (typedListener != null) typedListener.EnterIndexSuffix(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITxMarkParserListener typedListener = listener as ITxMarkParserListener;
			if (typedListener != null) typedListener.ExitIndexSuffix(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITxMarkParserVisitor<TResult> typedVisitor = visitor as ITxMarkParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexSuffix(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndexSuffixContext indexSuffix() {
		IndexSuffixContext _localctx = new IndexSuffixContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_indexSuffix);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 152;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OPERATOR_ST) | (1L << OPERATOR_RD) | (1L << OPERATOR_ND) | (1L << OPERATOR_TH))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexOperandContext : ParserRuleContext {
		public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		public IndexSuffixContext indexSuffix() {
			return GetRuleContext<IndexSuffixContext>(0);
		}
		public ITerminalNode OPERATOR_LAST() { return GetToken(TxMarkParser.OPERATOR_LAST, 0); }
		public ITerminalNode OPEN_PARENTHESIS() { return GetToken(TxMarkParser.OPEN_PARENTHESIS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode CLOSE_PARENTHESIS() { return GetToken(TxMarkParser.CLOSE_PARENTHESIS, 0); }
		public QuoteContext quote() {
			return GetRuleContext<QuoteContext>(0);
		}
		public WordContext word() {
			return GetRuleContext<WordContext>(0);
		}
		public IndexOperandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexOperand; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITxMarkParserListener typedListener = listener as ITxMarkParserListener;
			if (typedListener != null) typedListener.EnterIndexOperand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITxMarkParserListener typedListener = listener as ITxMarkParserListener;
			if (typedListener != null) typedListener.ExitIndexOperand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITxMarkParserVisitor<TResult> typedVisitor = visitor as ITxMarkParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexOperand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndexOperandContext indexOperand() {
		IndexOperandContext _localctx = new IndexOperandContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_indexOperand);
		int _la;
		try {
			State = 166;
			switch (_input.La(1)) {
			case NUMBER:
			case MNUMBER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 154; number();
				State = 155; indexSuffix();
				State = 157;
				_la = _input.La(1);
				if (_la==OPERATOR_LAST) {
					{
					State = 156; Match(OPERATOR_LAST);
					}
				}

				}
				break;
			case OPERATOR_LAST:
				EnterOuterAlt(_localctx, 2);
				{
				State = 159; Match(OPERATOR_LAST);
				}
				break;
			case OPEN_PARENTHESIS:
				EnterOuterAlt(_localctx, 3);
				{
				State = 160; Match(OPEN_PARENTHESIS);
				State = 161; expression();
				State = 162; Match(CLOSE_PARENTHESIS);
				}
				break;
			case DOUBLE_QUOTE_STRING:
				EnterOuterAlt(_localctx, 4);
				{
				State = 164; quote();
				}
				break;
			case WORD:
			case MWORD:
				EnterOuterAlt(_localctx, 5);
				{
				State = 165; word();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexOf_subexpressionContext : ParserRuleContext {
		public ITerminalNode OPERATOR_OF() { return GetToken(TxMarkParser.OPERATOR_OF, 0); }
		public OperandContext operand() {
			return GetRuleContext<OperandContext>(0);
		}
		public IndexOf_subexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexOf_subexpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITxMarkParserListener typedListener = listener as ITxMarkParserListener;
			if (typedListener != null) typedListener.EnterIndexOf_subexpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITxMarkParserListener typedListener = listener as ITxMarkParserListener;
			if (typedListener != null) typedListener.ExitIndexOf_subexpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITxMarkParserVisitor<TResult> typedVisitor = visitor as ITxMarkParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexOf_subexpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndexOf_subexpressionContext indexOf_subexpression() {
		IndexOf_subexpressionContext _localctx = new IndexOf_subexpressionContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_indexOf_subexpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 168; Match(OPERATOR_OF);
			State = 169; operand();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Index_subexpressionContext : ParserRuleContext {
		public ITerminalNode OPERATOR_POSSESSIVE() { return GetToken(TxMarkParser.OPERATOR_POSSESSIVE, 0); }
		public IndexOperandContext indexOperand() {
			return GetRuleContext<IndexOperandContext>(0);
		}
		public Index_subexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_index_subexpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITxMarkParserListener typedListener = listener as ITxMarkParserListener;
			if (typedListener != null) typedListener.EnterIndex_subexpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITxMarkParserListener typedListener = listener as ITxMarkParserListener;
			if (typedListener != null) typedListener.ExitIndex_subexpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITxMarkParserVisitor<TResult> typedVisitor = visitor as ITxMarkParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndex_subexpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Index_subexpressionContext index_subexpression() {
		Index_subexpressionContext _localctx = new Index_subexpressionContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_index_subexpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 171; Match(OPERATOR_POSSESSIVE);
			State = 172; indexOperand();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Index_expressionContext : ParserRuleContext {
		public OperandContext operand() {
			return GetRuleContext<OperandContext>(0);
		}
		public Index_subexpressionContext[] index_subexpression() {
			return GetRuleContexts<Index_subexpressionContext>();
		}
		public Index_subexpressionContext index_subexpression(int i) {
			return GetRuleContext<Index_subexpressionContext>(i);
		}
		public IndexOperandContext indexOperand() {
			return GetRuleContext<IndexOperandContext>(0);
		}
		public ITerminalNode OPERATOR_OF() { return GetToken(TxMarkParser.OPERATOR_OF, 0); }
		public Index_expressionContext index_expression() {
			return GetRuleContext<Index_expressionContext>(0);
		}
		public Index_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_index_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITxMarkParserListener typedListener = listener as ITxMarkParserListener;
			if (typedListener != null) typedListener.EnterIndex_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITxMarkParserListener typedListener = listener as ITxMarkParserListener;
			if (typedListener != null) typedListener.ExitIndex_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITxMarkParserVisitor<TResult> typedVisitor = visitor as ITxMarkParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndex_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Index_expressionContext index_expression() {
		Index_expressionContext _localctx = new Index_expressionContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_index_expression);
		int _la;
		try {
			State = 185;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,6,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 174; operand();
				State = 178;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==OPERATOR_POSSESSIVE) {
					{
					{
					State = 175; index_subexpression();
					}
					}
					State = 180;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 181; indexOperand();
				State = 182; Match(OPERATOR_OF);
				State = 183; index_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Signed_index_expressionContext : ParserRuleContext {
		public Index_expressionContext index_expression() {
			return GetRuleContext<Index_expressionContext>(0);
		}
		public ITerminalNode OPERATOR_MINUS() { return GetToken(TxMarkParser.OPERATOR_MINUS, 0); }
		public Signed_index_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signed_index_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITxMarkParserListener typedListener = listener as ITxMarkParserListener;
			if (typedListener != null) typedListener.EnterSigned_index_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITxMarkParserListener typedListener = listener as ITxMarkParserListener;
			if (typedListener != null) typedListener.ExitSigned_index_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITxMarkParserVisitor<TResult> typedVisitor = visitor as ITxMarkParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSigned_index_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Signed_index_expressionContext signed_index_expression() {
		Signed_index_expressionContext _localctx = new Signed_index_expressionContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_signed_index_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 188;
			_la = _input.La(1);
			if (_la==OPERATOR_MINUS) {
				{
				State = 187; Match(OPERATOR_MINUS);
				}
			}

			State = 190; index_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanOperatorContext : ParserRuleContext {
		public ITerminalNode OPERATOR_AND() { return GetToken(TxMarkParser.OPERATOR_AND, 0); }
		public ITerminalNode OPERATOR_OR() { return GetToken(TxMarkParser.OPERATOR_OR, 0); }
		public ITerminalNode OPERATOR_LESS_THAN() { return GetToken(TxMarkParser.OPERATOR_LESS_THAN, 0); }
		public ITerminalNode OPERATOR_GREATER_THAN() { return GetToken(TxMarkParser.OPERATOR_GREATER_THAN, 0); }
		public ITerminalNode OPERATOR_LESS_OR_EQUAL() { return GetToken(TxMarkParser.OPERATOR_LESS_OR_EQUAL, 0); }
		public ITerminalNode OPERATOR_GREATER_OR_EQUAL() { return GetToken(TxMarkParser.OPERATOR_GREATER_OR_EQUAL, 0); }
		public ITerminalNode OPERATOR_IS() { return GetToken(TxMarkParser.OPERATOR_IS, 0); }
		public ITerminalNode OPERATOR_NOT() { return GetToken(TxMarkParser.OPERATOR_NOT, 0); }
		public ITerminalNode OPERATOR_IN() { return GetToken(TxMarkParser.OPERATOR_IN, 0); }
		public ITerminalNode OPERATOR_CONTAINS() { return GetToken(TxMarkParser.OPERATOR_CONTAINS, 0); }
		public ITerminalNode OPERATOR_POWER() { return GetToken(TxMarkParser.OPERATOR_POWER, 0); }
		public ITerminalNode OPERATOR_MULTIPLY() { return GetToken(TxMarkParser.OPERATOR_MULTIPLY, 0); }
		public ITerminalNode OPERATOR_DIVIDE() { return GetToken(TxMarkParser.OPERATOR_DIVIDE, 0); }
		public ITerminalNode OPERATOR_MODULO() { return GetToken(TxMarkParser.OPERATOR_MODULO, 0); }
		public ITerminalNode OPERATOR_PLUS() { return GetToken(TxMarkParser.OPERATOR_PLUS, 0); }
		public ITerminalNode OPERATOR_MINUS() { return GetToken(TxMarkParser.OPERATOR_MINUS, 0); }
		public BooleanOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_booleanOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITxMarkParserListener typedListener = listener as ITxMarkParserListener;
			if (typedListener != null) typedListener.EnterBooleanOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITxMarkParserListener typedListener = listener as ITxMarkParserListener;
			if (typedListener != null) typedListener.ExitBooleanOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITxMarkParserVisitor<TResult> typedVisitor = visitor as ITxMarkParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanOperatorContext booleanOperator() {
		BooleanOperatorContext _localctx = new BooleanOperatorContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_booleanOperator);
		try {
			State = 210;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,8,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 192; Match(OPERATOR_AND);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 193; Match(OPERATOR_OR);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 194; Match(OPERATOR_LESS_THAN);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 195; Match(OPERATOR_GREATER_THAN);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 196; Match(OPERATOR_LESS_OR_EQUAL);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 197; Match(OPERATOR_GREATER_OR_EQUAL);
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 198; Match(OPERATOR_IS);
				State = 199; Match(OPERATOR_NOT);
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 200; Match(OPERATOR_IS);
				State = 201; Match(OPERATOR_IN);
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 202; Match(OPERATOR_IS);
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 203; Match(OPERATOR_CONTAINS);
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 204; Match(OPERATOR_POWER);
				}
				break;

			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 205; Match(OPERATOR_MULTIPLY);
				}
				break;

			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 206; Match(OPERATOR_DIVIDE);
				}
				break;

			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 207; Match(OPERATOR_MODULO);
				}
				break;

			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 208; Match(OPERATOR_PLUS);
				}
				break;

			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 209; Match(OPERATOR_MINUS);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubexpressionContext : ParserRuleContext {
		public BooleanOperatorContext booleanOperator() {
			return GetRuleContext<BooleanOperatorContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SubexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subexpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITxMarkParserListener typedListener = listener as ITxMarkParserListener;
			if (typedListener != null) typedListener.EnterSubexpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITxMarkParserListener typedListener = listener as ITxMarkParserListener;
			if (typedListener != null) typedListener.ExitSubexpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITxMarkParserVisitor<TResult> typedVisitor = visitor as ITxMarkParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubexpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubexpressionContext subexpression() {
		SubexpressionContext _localctx = new SubexpressionContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_subexpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 212; booleanOperator();
			State = 213; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public Signed_index_expressionContext signed_index_expression() {
			return GetRuleContext<Signed_index_expressionContext>(0);
		}
		public SubexpressionContext[] subexpression() {
			return GetRuleContexts<SubexpressionContext>();
		}
		public SubexpressionContext subexpression(int i) {
			return GetRuleContext<SubexpressionContext>(i);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITxMarkParserListener typedListener = listener as ITxMarkParserListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITxMarkParserListener typedListener = listener as ITxMarkParserListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITxMarkParserVisitor<TResult> typedVisitor = visitor as ITxMarkParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_expression);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 215; signed_index_expression();
			State = 219;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,9,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 216; subexpression();
					}
					} 
				}
				State = 221;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,9,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantTrueContext : ParserRuleContext {
		public ITerminalNode CONSTANT_TRUE() { return GetToken(TxMarkParser.CONSTANT_TRUE, 0); }
		public ConstantTrueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constantTrue; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITxMarkParserListener typedListener = listener as ITxMarkParserListener;
			if (typedListener != null) typedListener.EnterConstantTrue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITxMarkParserListener typedListener = listener as ITxMarkParserListener;
			if (typedListener != null) typedListener.ExitConstantTrue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITxMarkParserVisitor<TResult> typedVisitor = visitor as ITxMarkParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantTrue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantTrueContext constantTrue() {
		ConstantTrueContext _localctx = new ConstantTrueContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_constantTrue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 222; Match(CONSTANT_TRUE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantFalseContext : ParserRuleContext {
		public ITerminalNode CONSTANT_FALSE() { return GetToken(TxMarkParser.CONSTANT_FALSE, 0); }
		public ConstantFalseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constantFalse; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITxMarkParserListener typedListener = listener as ITxMarkParserListener;
			if (typedListener != null) typedListener.EnterConstantFalse(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITxMarkParserListener typedListener = listener as ITxMarkParserListener;
			if (typedListener != null) typedListener.ExitConstantFalse(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITxMarkParserVisitor<TResult> typedVisitor = visitor as ITxMarkParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantFalse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantFalseContext constantFalse() {
		ConstantFalseContext _localctx = new ConstantFalseContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_constantFalse);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 224; Match(CONSTANT_FALSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantNullContext : ParserRuleContext {
		public ITerminalNode CONSTANT_NULL() { return GetToken(TxMarkParser.CONSTANT_NULL, 0); }
		public ConstantNullContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constantNull; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITxMarkParserListener typedListener = listener as ITxMarkParserListener;
			if (typedListener != null) typedListener.EnterConstantNull(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITxMarkParserListener typedListener = listener as ITxMarkParserListener;
			if (typedListener != null) typedListener.ExitConstantNull(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITxMarkParserVisitor<TResult> typedVisitor = visitor as ITxMarkParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantNull(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantNullContext constantNull() {
		ConstantNullContext _localctx = new ConstantNullContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_constantNull);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 226; Match(CONSTANT_NULL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantContext : ParserRuleContext {
		public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		public ConstantTrueContext constantTrue() {
			return GetRuleContext<ConstantTrueContext>(0);
		}
		public ConstantFalseContext constantFalse() {
			return GetRuleContext<ConstantFalseContext>(0);
		}
		public ConstantNullContext constantNull() {
			return GetRuleContext<ConstantNullContext>(0);
		}
		public QuoteContext quote() {
			return GetRuleContext<QuoteContext>(0);
		}
		public WordContext word() {
			return GetRuleContext<WordContext>(0);
		}
		public ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITxMarkParserListener typedListener = listener as ITxMarkParserListener;
			if (typedListener != null) typedListener.EnterConstant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITxMarkParserListener typedListener = listener as ITxMarkParserListener;
			if (typedListener != null) typedListener.ExitConstant(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITxMarkParserVisitor<TResult> typedVisitor = visitor as ITxMarkParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantContext constant() {
		ConstantContext _localctx = new ConstantContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_constant);
		try {
			State = 234;
			switch (_input.La(1)) {
			case NUMBER:
			case MNUMBER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 228; number();
				}
				break;
			case CONSTANT_TRUE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 229; constantTrue();
				}
				break;
			case CONSTANT_FALSE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 230; constantFalse();
				}
				break;
			case CONSTANT_NULL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 231; constantNull();
				}
				break;
			case DOUBLE_QUOTE_STRING:
				EnterOuterAlt(_localctx, 5);
				{
				State = 232; quote();
				}
				break;
			case WORD:
			case MWORD:
				EnterOuterAlt(_localctx, 6);
				{
				State = 233; word();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MacroArgumentContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public MacroArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_macroArgument; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITxMarkParserListener typedListener = listener as ITxMarkParserListener;
			if (typedListener != null) typedListener.EnterMacroArgument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITxMarkParserListener typedListener = listener as ITxMarkParserListener;
			if (typedListener != null) typedListener.ExitMacroArgument(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITxMarkParserVisitor<TResult> typedVisitor = visitor as ITxMarkParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMacroArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MacroArgumentContext macroArgument() {
		MacroArgumentContext _localctx = new MacroArgumentContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_macroArgument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 236; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public ITerminalNode LITERAL() { return GetToken(TxMarkParser.LITERAL, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITxMarkParserListener typedListener = listener as ITxMarkParserListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITxMarkParserListener typedListener = listener as ITxMarkParserListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITxMarkParserVisitor<TResult> typedVisitor = visitor as ITxMarkParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_literal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 238; Match(LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PunctuationContext : ParserRuleContext {
		public ITerminalNode PUNCTUATION() { return GetToken(TxMarkParser.PUNCTUATION, 0); }
		public PunctuationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_punctuation; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITxMarkParserListener typedListener = listener as ITxMarkParserListener;
			if (typedListener != null) typedListener.EnterPunctuation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITxMarkParserListener typedListener = listener as ITxMarkParserListener;
			if (typedListener != null) typedListener.ExitPunctuation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITxMarkParserVisitor<TResult> typedVisitor = visitor as ITxMarkParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPunctuation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PunctuationContext punctuation() {
		PunctuationContext _localctx = new PunctuationContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_punctuation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 240; Match(PUNCTUATION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HtmlOpenTagContext : ParserRuleContext {
		public ITerminalNode LESS_THAN() { return GetToken(TxMarkParser.LESS_THAN, 0); }
		public WordContext word() {
			return GetRuleContext<WordContext>(0);
		}
		public ITerminalNode GREATER_THAN() { return GetToken(TxMarkParser.GREATER_THAN, 0); }
		public HtmlAttributeContext[] htmlAttribute() {
			return GetRuleContexts<HtmlAttributeContext>();
		}
		public HtmlAttributeContext htmlAttribute(int i) {
			return GetRuleContext<HtmlAttributeContext>(i);
		}
		public ITerminalNode SLASH() { return GetToken(TxMarkParser.SLASH, 0); }
		public HtmlOpenTagContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_htmlOpenTag; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITxMarkParserListener typedListener = listener as ITxMarkParserListener;
			if (typedListener != null) typedListener.EnterHtmlOpenTag(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITxMarkParserListener typedListener = listener as ITxMarkParserListener;
			if (typedListener != null) typedListener.ExitHtmlOpenTag(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITxMarkParserVisitor<TResult> typedVisitor = visitor as ITxMarkParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHtmlOpenTag(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HtmlOpenTagContext htmlOpenTag() {
		HtmlOpenTagContext _localctx = new HtmlOpenTagContext(_ctx, State);
		EnterRule(_localctx, 52, RULE_htmlOpenTag);
		int _la;
		try {
			State = 263;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,13,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 242; Match(LESS_THAN);
				State = 243; word();
				State = 247;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (((((_la - 25)) & ~0x3f) == 0 && ((1L << (_la - 25)) & ((1L << (WORD - 25)) | (1L << (WHITESPACE - 25)) | (1L << (MWORD - 25)))) != 0)) {
					{
					{
					State = 244; htmlAttribute();
					}
					}
					State = 249;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 250; Match(GREATER_THAN);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 252; Match(LESS_THAN);
				State = 253; word();
				State = 257;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (((((_la - 25)) & ~0x3f) == 0 && ((1L << (_la - 25)) & ((1L << (WORD - 25)) | (1L << (WHITESPACE - 25)) | (1L << (MWORD - 25)))) != 0)) {
					{
					{
					State = 254; htmlAttribute();
					}
					}
					State = 259;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 260; Match(SLASH);
				State = 261; Match(GREATER_THAN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HtmlCloseTagContext : ParserRuleContext {
		public ITerminalNode LESS_THAN() { return GetToken(TxMarkParser.LESS_THAN, 0); }
		public ITerminalNode SLASH() { return GetToken(TxMarkParser.SLASH, 0); }
		public WordContext word() {
			return GetRuleContext<WordContext>(0);
		}
		public ITerminalNode GREATER_THAN() { return GetToken(TxMarkParser.GREATER_THAN, 0); }
		public HtmlCloseTagContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_htmlCloseTag; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITxMarkParserListener typedListener = listener as ITxMarkParserListener;
			if (typedListener != null) typedListener.EnterHtmlCloseTag(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITxMarkParserListener typedListener = listener as ITxMarkParserListener;
			if (typedListener != null) typedListener.ExitHtmlCloseTag(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITxMarkParserVisitor<TResult> typedVisitor = visitor as ITxMarkParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHtmlCloseTag(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HtmlCloseTagContext htmlCloseTag() {
		HtmlCloseTagContext _localctx = new HtmlCloseTagContext(_ctx, State);
		EnterRule(_localctx, 54, RULE_htmlCloseTag);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 265; Match(LESS_THAN);
			State = 266; Match(SLASH);
			State = 267; word();
			State = 268; Match(GREATER_THAN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HtmlElementContext : ParserRuleContext {
		public HtmlOpenTagContext htmlOpenTag() {
			return GetRuleContext<HtmlOpenTagContext>(0);
		}
		public HtmlCloseTagContext htmlCloseTag() {
			return GetRuleContext<HtmlCloseTagContext>(0);
		}
		public ScriptContext script() {
			return GetRuleContext<ScriptContext>(0);
		}
		public StyleContext style() {
			return GetRuleContext<StyleContext>(0);
		}
		public HtmlElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_htmlElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITxMarkParserListener typedListener = listener as ITxMarkParserListener;
			if (typedListener != null) typedListener.EnterHtmlElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITxMarkParserListener typedListener = listener as ITxMarkParserListener;
			if (typedListener != null) typedListener.ExitHtmlElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITxMarkParserVisitor<TResult> typedVisitor = visitor as ITxMarkParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHtmlElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HtmlElementContext htmlElement() {
		HtmlElementContext _localctx = new HtmlElementContext(_ctx, State);
		EnterRule(_localctx, 56, RULE_htmlElement);
		try {
			State = 274;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,14,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 270; htmlOpenTag();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 271; htmlCloseTag();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 272; script();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 273; style();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EmphasisContext : ParserRuleContext {
		public EmphasisContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_emphasis; } }
	 
		public EmphasisContext() { }
		public virtual void CopyFrom(EmphasisContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BoldfaceContext : EmphasisContext {
		public ITerminalNode[] DOUBLE_SINGLE_QUOTE() { return GetTokens(TxMarkParser.DOUBLE_SINGLE_QUOTE); }
		public ITerminalNode DOUBLE_SINGLE_QUOTE(int i) {
			return GetToken(TxMarkParser.DOUBLE_SINGLE_QUOTE, i);
		}
		public ContentContext content() {
			return GetRuleContext<ContentContext>(0);
		}
		public BoldfaceContext(EmphasisContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITxMarkParserListener typedListener = listener as ITxMarkParserListener;
			if (typedListener != null) typedListener.EnterBoldface(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITxMarkParserListener typedListener = listener as ITxMarkParserListener;
			if (typedListener != null) typedListener.ExitBoldface(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITxMarkParserVisitor<TResult> typedVisitor = visitor as ITxMarkParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoldface(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DeletedContext : EmphasisContext {
		public ITerminalNode[] DOUBLE_TILDA() { return GetTokens(TxMarkParser.DOUBLE_TILDA); }
		public ITerminalNode DOUBLE_TILDA(int i) {
			return GetToken(TxMarkParser.DOUBLE_TILDA, i);
		}
		public ContentContext content() {
			return GetRuleContext<ContentContext>(0);
		}
		public DeletedContext(EmphasisContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITxMarkParserListener typedListener = listener as ITxMarkParserListener;
			if (typedListener != null) typedListener.EnterDeleted(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITxMarkParserListener typedListener = listener as ITxMarkParserListener;
			if (typedListener != null) typedListener.ExitDeleted(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITxMarkParserVisitor<TResult> typedVisitor = visitor as ITxMarkParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleted(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SuperscriptContext : EmphasisContext {
		public ITerminalNode[] DOUBLE_CIRCUMFLEX() { return GetTokens(TxMarkParser.DOUBLE_CIRCUMFLEX); }
		public ITerminalNode DOUBLE_CIRCUMFLEX(int i) {
			return GetToken(TxMarkParser.DOUBLE_CIRCUMFLEX, i);
		}
		public ContentContext content() {
			return GetRuleContext<ContentContext>(0);
		}
		public SuperscriptContext(EmphasisContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITxMarkParserListener typedListener = listener as ITxMarkParserListener;
			if (typedListener != null) typedListener.EnterSuperscript(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITxMarkParserListener typedListener = listener as ITxMarkParserListener;
			if (typedListener != null) typedListener.ExitSuperscript(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITxMarkParserVisitor<TResult> typedVisitor = visitor as ITxMarkParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSuperscript(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ItalicsContext : EmphasisContext {
		public ITerminalNode[] DOUBLE_SLASH() { return GetTokens(TxMarkParser.DOUBLE_SLASH); }
		public ITerminalNode DOUBLE_SLASH(int i) {
			return GetToken(TxMarkParser.DOUBLE_SLASH, i);
		}
		public ContentContext content() {
			return GetRuleContext<ContentContext>(0);
		}
		public ItalicsContext(EmphasisContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITxMarkParserListener typedListener = listener as ITxMarkParserListener;
			if (typedListener != null) typedListener.EnterItalics(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITxMarkParserListener typedListener = listener as ITxMarkParserListener;
			if (typedListener != null) typedListener.ExitItalics(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITxMarkParserVisitor<TResult> typedVisitor = visitor as ITxMarkParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitItalics(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Double_emphasisContext : EmphasisContext {
		public ITerminalNode[] DOUBLE_ASTERISK() { return GetTokens(TxMarkParser.DOUBLE_ASTERISK); }
		public ITerminalNode DOUBLE_ASTERISK(int i) {
			return GetToken(TxMarkParser.DOUBLE_ASTERISK, i);
		}
		public ContentContext content() {
			return GetRuleContext<ContentContext>(0);
		}
		public Double_emphasisContext(EmphasisContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITxMarkParserListener typedListener = listener as ITxMarkParserListener;
			if (typedListener != null) typedListener.EnterDouble_emphasis(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITxMarkParserListener typedListener = listener as ITxMarkParserListener;
			if (typedListener != null) typedListener.ExitDouble_emphasis(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITxMarkParserVisitor<TResult> typedVisitor = visitor as ITxMarkParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDouble_emphasis(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Single_emphasisContext : EmphasisContext {
		public ITerminalNode[] ASTERISK() { return GetTokens(TxMarkParser.ASTERISK); }
		public ITerminalNode ASTERISK(int i) {
			return GetToken(TxMarkParser.ASTERISK, i);
		}
		public ContentContext content() {
			return GetRuleContext<ContentContext>(0);
		}
		public Single_emphasisContext(EmphasisContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITxMarkParserListener typedListener = listener as ITxMarkParserListener;
			if (typedListener != null) typedListener.EnterSingle_emphasis(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITxMarkParserListener typedListener = listener as ITxMarkParserListener;
			if (typedListener != null) typedListener.ExitSingle_emphasis(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITxMarkParserVisitor<TResult> typedVisitor = visitor as ITxMarkParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingle_emphasis(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EmphasisContext emphasis() {
		EmphasisContext _localctx = new EmphasisContext(_ctx, State);
		EnterRule(_localctx, 58, RULE_emphasis);
		try {
			State = 300;
			switch (_input.La(1)) {
			case ASTERISK:
				_localctx = new Single_emphasisContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 276; Match(ASTERISK);
				State = 277; content();
				State = 278; Match(ASTERISK);
				}
				break;
			case DOUBLE_ASTERISK:
				_localctx = new Double_emphasisContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 280; Match(DOUBLE_ASTERISK);
				State = 281; content();
				State = 282; Match(DOUBLE_ASTERISK);
				}
				break;
			case DOUBLE_SINGLE_QUOTE:
				_localctx = new BoldfaceContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 284; Match(DOUBLE_SINGLE_QUOTE);
				State = 285; content();
				State = 286; Match(DOUBLE_SINGLE_QUOTE);
				}
				break;
			case DOUBLE_SLASH:
				_localctx = new ItalicsContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 288; Match(DOUBLE_SLASH);
				State = 289; content();
				State = 290; Match(DOUBLE_SLASH);
				}
				break;
			case DOUBLE_TILDA:
				_localctx = new DeletedContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 292; Match(DOUBLE_TILDA);
				State = 293; content();
				State = 294; Match(DOUBLE_TILDA);
				}
				break;
			case DOUBLE_CIRCUMFLEX:
				_localctx = new SuperscriptContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 296; Match(DOUBLE_CIRCUMFLEX);
				State = 297; content();
				State = 298; Match(DOUBLE_CIRCUMFLEX);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MuinutaContext : ParserRuleContext {
		public ITerminalNode DOLLAR_SIGN() { return GetToken(TxMarkParser.DOLLAR_SIGN, 0); }
		public ITerminalNode QUESTION_MARK() { return GetToken(TxMarkParser.QUESTION_MARK, 0); }
		public ITerminalNode COLON() { return GetToken(TxMarkParser.COLON, 0); }
		public ITerminalNode SLASH() { return GetToken(TxMarkParser.SLASH, 0); }
		public ITerminalNode EQUALS() { return GetToken(TxMarkParser.EQUALS, 0); }
		public ITerminalNode LESS_THAN() { return GetToken(TxMarkParser.LESS_THAN, 0); }
		public ITerminalNode[] GREATER_THAN() { return GetTokens(TxMarkParser.GREATER_THAN); }
		public ITerminalNode GREATER_THAN(int i) {
			return GetToken(TxMarkParser.GREATER_THAN, i);
		}
		public ITerminalNode VERTICAL_BAR() { return GetToken(TxMarkParser.VERTICAL_BAR, 0); }
		public ITerminalNode DOUBLE_QUOTE() { return GetToken(TxMarkParser.DOUBLE_QUOTE, 0); }
		public ITerminalNode SINGLE_QUOTE() { return GetToken(TxMarkParser.SINGLE_QUOTE, 0); }
		public MuinutaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_muinuta; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITxMarkParserListener typedListener = listener as ITxMarkParserListener;
			if (typedListener != null) typedListener.EnterMuinuta(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITxMarkParserListener typedListener = listener as ITxMarkParserListener;
			if (typedListener != null) typedListener.ExitMuinuta(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITxMarkParserVisitor<TResult> typedVisitor = visitor as ITxMarkParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMuinuta(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MuinutaContext muinuta() {
		MuinutaContext _localctx = new MuinutaContext(_ctx, State);
		EnterRule(_localctx, 60, RULE_muinuta);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 302;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LESS_THAN) | (1L << QUESTION_MARK) | (1L << DOLLAR_SIGN) | (1L << VERTICAL_BAR) | (1L << COLON) | (1L << SLASH) | (1L << EQUALS) | (1L << DOUBLE_QUOTE) | (1L << SINGLE_QUOTE) | (1L << GREATER_THAN))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HtmlAttributeNameContext : ParserRuleContext {
		public WordContext word() {
			return GetRuleContext<WordContext>(0);
		}
		public HtmlAttributeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_htmlAttributeName; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITxMarkParserListener typedListener = listener as ITxMarkParserListener;
			if (typedListener != null) typedListener.EnterHtmlAttributeName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITxMarkParserListener typedListener = listener as ITxMarkParserListener;
			if (typedListener != null) typedListener.ExitHtmlAttributeName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITxMarkParserVisitor<TResult> typedVisitor = visitor as ITxMarkParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHtmlAttributeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HtmlAttributeNameContext htmlAttributeName() {
		HtmlAttributeNameContext _localctx = new HtmlAttributeNameContext(_ctx, State);
		EnterRule(_localctx, 62, RULE_htmlAttributeName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 304; word();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HtmlAttributeContext : ParserRuleContext {
		public HtmlAttributeNameContext htmlAttributeName() {
			return GetRuleContext<HtmlAttributeNameContext>(0);
		}
		public ITerminalNode EQUALS() { return GetToken(TxMarkParser.EQUALS, 0); }
		public HtmlAttributeValueContext htmlAttributeValue() {
			return GetRuleContext<HtmlAttributeValueContext>(0);
		}
		public WhitespaceContext[] whitespace() {
			return GetRuleContexts<WhitespaceContext>();
		}
		public WhitespaceContext whitespace(int i) {
			return GetRuleContext<WhitespaceContext>(i);
		}
		public HtmlAttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_htmlAttribute; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITxMarkParserListener typedListener = listener as ITxMarkParserListener;
			if (typedListener != null) typedListener.EnterHtmlAttribute(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITxMarkParserListener typedListener = listener as ITxMarkParserListener;
			if (typedListener != null) typedListener.ExitHtmlAttribute(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITxMarkParserVisitor<TResult> typedVisitor = visitor as ITxMarkParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHtmlAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HtmlAttributeContext htmlAttribute() {
		HtmlAttributeContext _localctx = new HtmlAttributeContext(_ctx, State);
		EnterRule(_localctx, 64, RULE_htmlAttribute);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 307;
			_la = _input.La(1);
			if (_la==WHITESPACE) {
				{
				State = 306; whitespace();
				}
			}

			State = 309; htmlAttributeName();
			State = 311;
			_la = _input.La(1);
			if (_la==WHITESPACE) {
				{
				State = 310; whitespace();
				}
			}

			State = 313; Match(EQUALS);
			State = 315;
			_la = _input.La(1);
			if (_la==WHITESPACE) {
				{
				State = 314; whitespace();
				}
			}

			State = 317; htmlAttributeValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HtmlAttributeValueContentContext : ParserRuleContext {
		public PhraseContext phrase() {
			return GetRuleContext<PhraseContext>(0);
		}
		public HookNameContext hookName() {
			return GetRuleContext<HookNameContext>(0);
		}
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public MuinutaContext muinuta() {
			return GetRuleContext<MuinutaContext>(0);
		}
		public WhitespaceContext whitespace() {
			return GetRuleContext<WhitespaceContext>(0);
		}
		public PunctuationContext punctuation() {
			return GetRuleContext<PunctuationContext>(0);
		}
		public HtmlAttributeValueContentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_htmlAttributeValueContent; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITxMarkParserListener typedListener = listener as ITxMarkParserListener;
			if (typedListener != null) typedListener.EnterHtmlAttributeValueContent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITxMarkParserListener typedListener = listener as ITxMarkParserListener;
			if (typedListener != null) typedListener.ExitHtmlAttributeValueContent(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITxMarkParserVisitor<TResult> typedVisitor = visitor as ITxMarkParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHtmlAttributeValueContent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HtmlAttributeValueContentContext htmlAttributeValueContent() {
		HtmlAttributeValueContentContext _localctx = new HtmlAttributeValueContentContext(_ctx, State);
		EnterRule(_localctx, 66, RULE_htmlAttributeValueContent);
		try {
			State = 326;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,19,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 319; phrase();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 320; hookName();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 321; variable();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 322; literal();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 323; muinuta();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 324; whitespace();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 325; punctuation();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HtmlAttributeValueContext : ParserRuleContext {
		public ITerminalNode[] DOUBLE_QUOTE() { return GetTokens(TxMarkParser.DOUBLE_QUOTE); }
		public ITerminalNode DOUBLE_QUOTE(int i) {
			return GetToken(TxMarkParser.DOUBLE_QUOTE, i);
		}
		public HtmlAttributeValueContentContext[] htmlAttributeValueContent() {
			return GetRuleContexts<HtmlAttributeValueContentContext>();
		}
		public HtmlAttributeValueContentContext htmlAttributeValueContent(int i) {
			return GetRuleContext<HtmlAttributeValueContentContext>(i);
		}
		public ITerminalNode[] SINGLE_QUOTE() { return GetTokens(TxMarkParser.SINGLE_QUOTE); }
		public ITerminalNode SINGLE_QUOTE(int i) {
			return GetToken(TxMarkParser.SINGLE_QUOTE, i);
		}
		public HtmlAttributeValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_htmlAttributeValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITxMarkParserListener typedListener = listener as ITxMarkParserListener;
			if (typedListener != null) typedListener.EnterHtmlAttributeValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITxMarkParserListener typedListener = listener as ITxMarkParserListener;
			if (typedListener != null) typedListener.ExitHtmlAttributeValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITxMarkParserVisitor<TResult> typedVisitor = visitor as ITxMarkParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHtmlAttributeValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HtmlAttributeValueContext htmlAttributeValue() {
		HtmlAttributeValueContext _localctx = new HtmlAttributeValueContext(_ctx, State);
		EnterRule(_localctx, 68, RULE_htmlAttributeValue);
		try {
			int _alt;
			State = 344;
			switch (_input.La(1)) {
			case DOUBLE_QUOTE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 328; Match(DOUBLE_QUOTE);
				State = 332;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,20,_ctx);
				while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1+1 ) {
						{
						{
						State = 329; htmlAttributeValueContent();
						}
						} 
					}
					State = 334;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,20,_ctx);
				}
				State = 335; Match(DOUBLE_QUOTE);
				}
				break;
			case SINGLE_QUOTE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 336; Match(SINGLE_QUOTE);
				State = 340;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,21,_ctx);
				while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1+1 ) {
						{
						{
						State = 337; htmlAttributeValueContent();
						}
						} 
					}
					State = 342;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,21,_ctx);
				}
				State = 343; Match(SINGLE_QUOTE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScriptContext : ParserRuleContext {
		public ITerminalNode OPEN_SCRIPT() { return GetToken(TxMarkParser.OPEN_SCRIPT, 0); }
		public ITerminalNode SCRIPT_BODY() { return GetToken(TxMarkParser.SCRIPT_BODY, 0); }
		public ITerminalNode SCRIPT_SHORT_BODY() { return GetToken(TxMarkParser.SCRIPT_SHORT_BODY, 0); }
		public ScriptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_script; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITxMarkParserListener typedListener = listener as ITxMarkParserListener;
			if (typedListener != null) typedListener.EnterScript(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITxMarkParserListener typedListener = listener as ITxMarkParserListener;
			if (typedListener != null) typedListener.ExitScript(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITxMarkParserVisitor<TResult> typedVisitor = visitor as ITxMarkParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScript(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScriptContext script() {
		ScriptContext _localctx = new ScriptContext(_ctx, State);
		EnterRule(_localctx, 70, RULE_script);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 346; Match(OPEN_SCRIPT);
			State = 347;
			_la = _input.La(1);
			if ( !(_la==SCRIPT_BODY || _la==SCRIPT_SHORT_BODY) ) {
			_errHandler.RecoverInline(this);
			} else {
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StyleContext : ParserRuleContext {
		public ITerminalNode OPEN_STYLE() { return GetToken(TxMarkParser.OPEN_STYLE, 0); }
		public ITerminalNode STYLE_BODY() { return GetToken(TxMarkParser.STYLE_BODY, 0); }
		public ITerminalNode STYLE_SHORT_BODY() { return GetToken(TxMarkParser.STYLE_SHORT_BODY, 0); }
		public StyleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_style; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITxMarkParserListener typedListener = listener as ITxMarkParserListener;
			if (typedListener != null) typedListener.EnterStyle(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITxMarkParserListener typedListener = listener as ITxMarkParserListener;
			if (typedListener != null) typedListener.ExitStyle(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITxMarkParserVisitor<TResult> typedVisitor = visitor as ITxMarkParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStyle(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StyleContext style() {
		StyleContext _localctx = new StyleContext(_ctx, State);
		EnterRule(_localctx, 72, RULE_style);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 349; Match(OPEN_STYLE);
			State = 350;
			_la = _input.La(1);
			if ( !(_la==STYLE_BODY || _la==STYLE_SHORT_BODY) ) {
			_errHandler.RecoverInline(this);
			} else {
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementContext : ParserRuleContext {
		public If_clauseContext if_clause() {
			return GetRuleContext<If_clauseContext>(0);
		}
		public Choose_clauseContext choose_clause() {
			return GetRuleContext<Choose_clauseContext>(0);
		}
		public Each_clauseContext each_clause() {
			return GetRuleContext<Each_clauseContext>(0);
		}
		public Set_clauseContext set_clause() {
			return GetRuleContext<Set_clauseContext>(0);
		}
		public Hook_definition_clauseContext hook_definition_clause() {
			return GetRuleContext<Hook_definition_clauseContext>(0);
		}
		public Macro_clauseContext[] macro_clause() {
			return GetRuleContexts<Macro_clauseContext>();
		}
		public Macro_clauseContext macro_clause(int i) {
			return GetRuleContext<Macro_clauseContext>(i);
		}
		public WhitespaceContext[] whitespace() {
			return GetRuleContexts<WhitespaceContext>();
		}
		public WhitespaceContext whitespace(int i) {
			return GetRuleContext<WhitespaceContext>(i);
		}
		public Hook_clauseContext hook_clause() {
			return GetRuleContext<Hook_clauseContext>(0);
		}
		public HtmlElementContext htmlElement() {
			return GetRuleContext<HtmlElementContext>(0);
		}
		public HookNameContext hookName() {
			return GetRuleContext<HookNameContext>(0);
		}
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public EmphasisContext emphasis() {
			return GetRuleContext<EmphasisContext>(0);
		}
		public MuinutaContext muinuta() {
			return GetRuleContext<MuinutaContext>(0);
		}
		public ElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_element; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITxMarkParserListener typedListener = listener as ITxMarkParserListener;
			if (typedListener != null) typedListener.EnterElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITxMarkParserListener typedListener = listener as ITxMarkParserListener;
			if (typedListener != null) typedListener.ExitElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITxMarkParserVisitor<TResult> typedVisitor = visitor as ITxMarkParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElementContext element() {
		ElementContext _localctx = new ElementContext(_ctx, State);
		EnterRule(_localctx, 74, RULE_element);
		int _la;
		try {
			int _alt;
			State = 374;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,25,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 352; if_clause();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 353; choose_clause();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 354; each_clause();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 355; set_clause();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 356; hook_definition_clause();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 357; macro_clause();
				State = 364;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,24,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 359;
						_la = _input.La(1);
						if (_la==WHITESPACE) {
							{
							State = 358; whitespace();
							}
						}

						State = 361; macro_clause();
						}
						} 
					}
					State = 366;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,24,_ctx);
				}
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 367; hook_clause();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 368; htmlElement();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 369; hookName();
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 370; variable();
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 371; literal();
				}
				break;

			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 372; emphasis();
				}
				break;

			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 373; muinuta();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContentContext : ParserRuleContext {
		public PhraseContext[] phrase() {
			return GetRuleContexts<PhraseContext>();
		}
		public PhraseContext phrase(int i) {
			return GetRuleContext<PhraseContext>(i);
		}
		public ElementContext[] element() {
			return GetRuleContexts<ElementContext>();
		}
		public ElementContext element(int i) {
			return GetRuleContext<ElementContext>(i);
		}
		public ContentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_content; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITxMarkParserListener typedListener = listener as ITxMarkParserListener;
			if (typedListener != null) typedListener.EnterContent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITxMarkParserListener typedListener = listener as ITxMarkParserListener;
			if (typedListener != null) typedListener.ExitContent(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITxMarkParserVisitor<TResult> typedVisitor = visitor as ITxMarkParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContentContext content() {
		ContentContext _localctx = new ContentContext(_ctx, State);
		EnterRule(_localctx, 76, RULE_content);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 377;
			_la = _input.La(1);
			if (((((_la - 23)) & ~0x3f) == 0 && ((1L << (_la - 23)) & ((1L << (PUNCTUATION - 23)) | (1L << (WORD - 23)) | (1L << (NUMBER - 23)) | (1L << (WHITESPACE - 23)) | (1L << (MNUMBER - 23)) | (1L << (MWORD - 23)))) != 0)) {
				{
				State = 376; phrase();
				}
			}

			State = 385;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,28,_ctx);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 379; element();
					State = 381;
					_la = _input.La(1);
					if (((((_la - 23)) & ~0x3f) == 0 && ((1L << (_la - 23)) & ((1L << (PUNCTUATION - 23)) | (1L << (WORD - 23)) | (1L << (NUMBER - 23)) | (1L << (WHITESPACE - 23)) | (1L << (MNUMBER - 23)) | (1L << (MWORD - 23)))) != 0)) {
						{
						State = 380; phrase();
						}
					}

					}
					} 
				}
				State = 387;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,28,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PhraseContext : ParserRuleContext {
		public WordContext[] word() {
			return GetRuleContexts<WordContext>();
		}
		public WordContext word(int i) {
			return GetRuleContext<WordContext>(i);
		}
		public NumberContext[] number() {
			return GetRuleContexts<NumberContext>();
		}
		public NumberContext number(int i) {
			return GetRuleContext<NumberContext>(i);
		}
		public WhitespaceContext[] whitespace() {
			return GetRuleContexts<WhitespaceContext>();
		}
		public WhitespaceContext whitespace(int i) {
			return GetRuleContext<WhitespaceContext>(i);
		}
		public PunctuationContext[] punctuation() {
			return GetRuleContexts<PunctuationContext>();
		}
		public PunctuationContext punctuation(int i) {
			return GetRuleContext<PunctuationContext>(i);
		}
		public PhraseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_phrase; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITxMarkParserListener typedListener = listener as ITxMarkParserListener;
			if (typedListener != null) typedListener.EnterPhrase(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITxMarkParserListener typedListener = listener as ITxMarkParserListener;
			if (typedListener != null) typedListener.ExitPhrase(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITxMarkParserVisitor<TResult> typedVisitor = visitor as ITxMarkParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPhrase(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PhraseContext phrase() {
		PhraseContext _localctx = new PhraseContext(_ctx, State);
		EnterRule(_localctx, 78, RULE_phrase);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 392;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					State = 392;
					switch (_input.La(1)) {
					case WORD:
					case MWORD:
						{
						State = 388; word();
						}
						break;
					case NUMBER:
					case MNUMBER:
						{
						State = 389; number();
						}
						break;
					case WHITESPACE:
						{
						State = 390; whitespace();
						}
						break;
					case PUNCTUATION:
						{
						State = 391; punctuation();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 394;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,30,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Hook_clauseContext : ParserRuleContext {
		public HookContext hook() {
			return GetRuleContext<HookContext>(0);
		}
		public Left_nametagContext left_nametag() {
			return GetRuleContext<Left_nametagContext>(0);
		}
		public Right_nametagContext right_nametag() {
			return GetRuleContext<Right_nametagContext>(0);
		}
		public Hook_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hook_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITxMarkParserListener typedListener = listener as ITxMarkParserListener;
			if (typedListener != null) typedListener.EnterHook_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITxMarkParserListener typedListener = listener as ITxMarkParserListener;
			if (typedListener != null) typedListener.ExitHook_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITxMarkParserVisitor<TResult> typedVisitor = visitor as ITxMarkParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHook_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Hook_clauseContext hook_clause() {
		Hook_clauseContext _localctx = new Hook_clauseContext(_ctx, State);
		EnterRule(_localctx, 80, RULE_hook_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 397;
			_la = _input.La(1);
			if (_la==VERTICAL_BAR) {
				{
				State = 396; left_nametag();
				}
			}

			State = 399; hook();
			State = 401;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,32,_ctx) ) {
			case 1:
				{
				State = 400; right_nametag();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Macro_clauseContext : ParserRuleContext {
		public MacroContext macro() {
			return GetRuleContext<MacroContext>(0);
		}
		public Left_nametagContext left_nametag() {
			return GetRuleContext<Left_nametagContext>(0);
		}
		public HookContext hook() {
			return GetRuleContext<HookContext>(0);
		}
		public WhitespaceContext whitespace() {
			return GetRuleContext<WhitespaceContext>(0);
		}
		public Right_nametagContext right_nametag() {
			return GetRuleContext<Right_nametagContext>(0);
		}
		public Macro_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_macro_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITxMarkParserListener typedListener = listener as ITxMarkParserListener;
			if (typedListener != null) typedListener.EnterMacro_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITxMarkParserListener typedListener = listener as ITxMarkParserListener;
			if (typedListener != null) typedListener.ExitMacro_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITxMarkParserVisitor<TResult> typedVisitor = visitor as ITxMarkParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMacro_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Macro_clauseContext macro_clause() {
		Macro_clauseContext _localctx = new Macro_clauseContext(_ctx, State);
		EnterRule(_localctx, 82, RULE_macro_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 404;
			_la = _input.La(1);
			if (_la==VERTICAL_BAR) {
				{
				State = 403; left_nametag();
				}
			}

			State = 406; macro();
			State = 414;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,36,_ctx) ) {
			case 1:
				{
				State = 408;
				_la = _input.La(1);
				if (_la==WHITESPACE) {
					{
					State = 407; whitespace();
					}
				}

				State = 410; hook();
				State = 412;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,35,_ctx) ) {
				case 1:
					{
					State = 411; right_nametag();
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Each_clauseContext : ParserRuleContext {
		public ITerminalNode MACRO_OPEN() { return GetToken(TxMarkParser.MACRO_OPEN, 0); }
		public ITerminalNode KEYWORD_EACH() { return GetToken(TxMarkParser.KEYWORD_EACH, 0); }
		public ITerminalNode MCOLON() { return GetToken(TxMarkParser.MCOLON, 0); }
		public MacroArgumentContext macroArgument() {
			return GetRuleContext<MacroArgumentContext>(0);
		}
		public ITerminalNode CLOSE_PARENTHESIS() { return GetToken(TxMarkParser.CLOSE_PARENTHESIS, 0); }
		public ITerminalNode OPERATOR_AS() { return GetToken(TxMarkParser.OPERATOR_AS, 0); }
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public HookContext hook() {
			return GetRuleContext<HookContext>(0);
		}
		public WhitespaceContext whitespace() {
			return GetRuleContext<WhitespaceContext>(0);
		}
		public Each_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_each_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITxMarkParserListener typedListener = listener as ITxMarkParserListener;
			if (typedListener != null) typedListener.EnterEach_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITxMarkParserListener typedListener = listener as ITxMarkParserListener;
			if (typedListener != null) typedListener.ExitEach_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITxMarkParserVisitor<TResult> typedVisitor = visitor as ITxMarkParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEach_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Each_clauseContext each_clause() {
		Each_clauseContext _localctx = new Each_clauseContext(_ctx, State);
		EnterRule(_localctx, 84, RULE_each_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 416; Match(MACRO_OPEN);
			State = 417; Match(KEYWORD_EACH);
			State = 418; Match(MCOLON);
			State = 419; macroArgument();
			State = 422;
			_la = _input.La(1);
			if (_la==OPERATOR_AS) {
				{
				State = 420; Match(OPERATOR_AS);
				State = 421; variable();
				}
			}

			State = 424; Match(CLOSE_PARENTHESIS);
			State = 429;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,39,_ctx) ) {
			case 1:
				{
				State = 426;
				_la = _input.La(1);
				if (_la==WHITESPACE) {
					{
					State = 425; whitespace();
					}
				}

				State = 428; hook();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseIf_clauseContext : ParserRuleContext {
		public ITerminalNode MACRO_OPEN() { return GetToken(TxMarkParser.MACRO_OPEN, 0); }
		public ITerminalNode KEYWORD_ELSEIF() { return GetToken(TxMarkParser.KEYWORD_ELSEIF, 0); }
		public ITerminalNode MCOLON() { return GetToken(TxMarkParser.MCOLON, 0); }
		public MacroArgumentContext macroArgument() {
			return GetRuleContext<MacroArgumentContext>(0);
		}
		public ITerminalNode CLOSE_PARENTHESIS() { return GetToken(TxMarkParser.CLOSE_PARENTHESIS, 0); }
		public HookContext hook() {
			return GetRuleContext<HookContext>(0);
		}
		public ElseIf_clauseContext elseIf_clause() {
			return GetRuleContext<ElseIf_clauseContext>(0);
		}
		public Else_clauseContext else_clause() {
			return GetRuleContext<Else_clauseContext>(0);
		}
		public WhitespaceContext[] whitespace() {
			return GetRuleContexts<WhitespaceContext>();
		}
		public WhitespaceContext whitespace(int i) {
			return GetRuleContext<WhitespaceContext>(i);
		}
		public ElseIf_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseIf_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITxMarkParserListener typedListener = listener as ITxMarkParserListener;
			if (typedListener != null) typedListener.EnterElseIf_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITxMarkParserListener typedListener = listener as ITxMarkParserListener;
			if (typedListener != null) typedListener.ExitElseIf_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITxMarkParserVisitor<TResult> typedVisitor = visitor as ITxMarkParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseIf_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseIf_clauseContext elseIf_clause() {
		ElseIf_clauseContext _localctx = new ElseIf_clauseContext(_ctx, State);
		EnterRule(_localctx, 86, RULE_elseIf_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 431; Match(MACRO_OPEN);
			State = 432; Match(KEYWORD_ELSEIF);
			State = 433; Match(MCOLON);
			State = 434; macroArgument();
			State = 435; Match(CLOSE_PARENTHESIS);
			State = 440;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,41,_ctx) ) {
			case 1:
				{
				State = 437;
				_la = _input.La(1);
				if (_la==WHITESPACE) {
					{
					State = 436; whitespace();
					}
				}

				State = 439; hook();
				}
				break;
			}
			State = 449;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,44,_ctx) ) {
			case 1:
				{
				State = 443;
				_la = _input.La(1);
				if (_la==WHITESPACE) {
					{
					State = 442; whitespace();
					}
				}

				State = 447;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,43,_ctx) ) {
				case 1:
					{
					State = 445; elseIf_clause();
					}
					break;

				case 2:
					{
					State = 446; else_clause();
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Else_clauseContext : ParserRuleContext {
		public ITerminalNode MACRO_OPEN() { return GetToken(TxMarkParser.MACRO_OPEN, 0); }
		public ITerminalNode KEYWORD_ELSE() { return GetToken(TxMarkParser.KEYWORD_ELSE, 0); }
		public ITerminalNode MCOLON() { return GetToken(TxMarkParser.MCOLON, 0); }
		public ITerminalNode CLOSE_PARENTHESIS() { return GetToken(TxMarkParser.CLOSE_PARENTHESIS, 0); }
		public HookContext hook() {
			return GetRuleContext<HookContext>(0);
		}
		public WhitespaceContext whitespace() {
			return GetRuleContext<WhitespaceContext>(0);
		}
		public Else_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_else_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITxMarkParserListener typedListener = listener as ITxMarkParserListener;
			if (typedListener != null) typedListener.EnterElse_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITxMarkParserListener typedListener = listener as ITxMarkParserListener;
			if (typedListener != null) typedListener.ExitElse_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITxMarkParserVisitor<TResult> typedVisitor = visitor as ITxMarkParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElse_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Else_clauseContext else_clause() {
		Else_clauseContext _localctx = new Else_clauseContext(_ctx, State);
		EnterRule(_localctx, 88, RULE_else_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 451; Match(MACRO_OPEN);
			State = 452; Match(KEYWORD_ELSE);
			State = 453; Match(MCOLON);
			State = 454; Match(CLOSE_PARENTHESIS);
			State = 459;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,46,_ctx) ) {
			case 1:
				{
				State = 456;
				_la = _input.La(1);
				if (_la==WHITESPACE) {
					{
					State = 455; whitespace();
					}
				}

				State = 458; hook();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_clauseContext : ParserRuleContext {
		public ITerminalNode MACRO_OPEN() { return GetToken(TxMarkParser.MACRO_OPEN, 0); }
		public ITerminalNode KEYWORD_IF() { return GetToken(TxMarkParser.KEYWORD_IF, 0); }
		public ITerminalNode MCOLON() { return GetToken(TxMarkParser.MCOLON, 0); }
		public MacroArgumentContext macroArgument() {
			return GetRuleContext<MacroArgumentContext>(0);
		}
		public ITerminalNode CLOSE_PARENTHESIS() { return GetToken(TxMarkParser.CLOSE_PARENTHESIS, 0); }
		public HookContext hook() {
			return GetRuleContext<HookContext>(0);
		}
		public ElseIf_clauseContext elseIf_clause() {
			return GetRuleContext<ElseIf_clauseContext>(0);
		}
		public Else_clauseContext else_clause() {
			return GetRuleContext<Else_clauseContext>(0);
		}
		public WhitespaceContext[] whitespace() {
			return GetRuleContexts<WhitespaceContext>();
		}
		public WhitespaceContext whitespace(int i) {
			return GetRuleContext<WhitespaceContext>(i);
		}
		public If_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITxMarkParserListener typedListener = listener as ITxMarkParserListener;
			if (typedListener != null) typedListener.EnterIf_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITxMarkParserListener typedListener = listener as ITxMarkParserListener;
			if (typedListener != null) typedListener.ExitIf_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITxMarkParserVisitor<TResult> typedVisitor = visitor as ITxMarkParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public If_clauseContext if_clause() {
		If_clauseContext _localctx = new If_clauseContext(_ctx, State);
		EnterRule(_localctx, 90, RULE_if_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 461; Match(MACRO_OPEN);
			State = 462; Match(KEYWORD_IF);
			State = 463; Match(MCOLON);
			State = 464; macroArgument();
			State = 465; Match(CLOSE_PARENTHESIS);
			State = 470;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,48,_ctx) ) {
			case 1:
				{
				State = 467;
				_la = _input.La(1);
				if (_la==WHITESPACE) {
					{
					State = 466; whitespace();
					}
				}

				State = 469; hook();
				}
				break;
			}
			State = 479;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,51,_ctx) ) {
			case 1:
				{
				State = 473;
				_la = _input.La(1);
				if (_la==WHITESPACE) {
					{
					State = 472; whitespace();
					}
				}

				State = 477;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,50,_ctx) ) {
				case 1:
					{
					State = 475; elseIf_clause();
					}
					break;

				case 2:
					{
					State = 476; else_clause();
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class When_clauseContext : ParserRuleContext {
		public ITerminalNode MACRO_OPEN() { return GetToken(TxMarkParser.MACRO_OPEN, 0); }
		public ITerminalNode KEYWORD_WHEN() { return GetToken(TxMarkParser.KEYWORD_WHEN, 0); }
		public ITerminalNode MCOLON() { return GetToken(TxMarkParser.MCOLON, 0); }
		public MacroArgumentContext macroArgument() {
			return GetRuleContext<MacroArgumentContext>(0);
		}
		public ITerminalNode CLOSE_PARENTHESIS() { return GetToken(TxMarkParser.CLOSE_PARENTHESIS, 0); }
		public HookContext hook() {
			return GetRuleContext<HookContext>(0);
		}
		public When_clauseContext when_clause() {
			return GetRuleContext<When_clauseContext>(0);
		}
		public Otherwise_clauseContext otherwise_clause() {
			return GetRuleContext<Otherwise_clauseContext>(0);
		}
		public WhitespaceContext[] whitespace() {
			return GetRuleContexts<WhitespaceContext>();
		}
		public WhitespaceContext whitespace(int i) {
			return GetRuleContext<WhitespaceContext>(i);
		}
		public When_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_when_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITxMarkParserListener typedListener = listener as ITxMarkParserListener;
			if (typedListener != null) typedListener.EnterWhen_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITxMarkParserListener typedListener = listener as ITxMarkParserListener;
			if (typedListener != null) typedListener.ExitWhen_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITxMarkParserVisitor<TResult> typedVisitor = visitor as ITxMarkParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhen_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public When_clauseContext when_clause() {
		When_clauseContext _localctx = new When_clauseContext(_ctx, State);
		EnterRule(_localctx, 92, RULE_when_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 481; Match(MACRO_OPEN);
			State = 482; Match(KEYWORD_WHEN);
			State = 483; Match(MCOLON);
			State = 484; macroArgument();
			State = 485; Match(CLOSE_PARENTHESIS);
			State = 490;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,53,_ctx) ) {
			case 1:
				{
				State = 487;
				_la = _input.La(1);
				if (_la==WHITESPACE) {
					{
					State = 486; whitespace();
					}
				}

				State = 489; hook();
				}
				break;
			}
			State = 499;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,56,_ctx) ) {
			case 1:
				{
				State = 493;
				_la = _input.La(1);
				if (_la==WHITESPACE) {
					{
					State = 492; whitespace();
					}
				}

				State = 497;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,55,_ctx) ) {
				case 1:
					{
					State = 495; when_clause();
					}
					break;

				case 2:
					{
					State = 496; otherwise_clause();
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Otherwise_clauseContext : ParserRuleContext {
		public ITerminalNode MACRO_OPEN() { return GetToken(TxMarkParser.MACRO_OPEN, 0); }
		public ITerminalNode KEYWORD_OTHERWISE() { return GetToken(TxMarkParser.KEYWORD_OTHERWISE, 0); }
		public ITerminalNode MCOLON() { return GetToken(TxMarkParser.MCOLON, 0); }
		public ITerminalNode CLOSE_PARENTHESIS() { return GetToken(TxMarkParser.CLOSE_PARENTHESIS, 0); }
		public HookContext hook() {
			return GetRuleContext<HookContext>(0);
		}
		public WhitespaceContext whitespace() {
			return GetRuleContext<WhitespaceContext>(0);
		}
		public Otherwise_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_otherwise_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITxMarkParserListener typedListener = listener as ITxMarkParserListener;
			if (typedListener != null) typedListener.EnterOtherwise_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITxMarkParserListener typedListener = listener as ITxMarkParserListener;
			if (typedListener != null) typedListener.ExitOtherwise_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITxMarkParserVisitor<TResult> typedVisitor = visitor as ITxMarkParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOtherwise_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Otherwise_clauseContext otherwise_clause() {
		Otherwise_clauseContext _localctx = new Otherwise_clauseContext(_ctx, State);
		EnterRule(_localctx, 94, RULE_otherwise_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 501; Match(MACRO_OPEN);
			State = 502; Match(KEYWORD_OTHERWISE);
			State = 503; Match(MCOLON);
			State = 504; Match(CLOSE_PARENTHESIS);
			State = 509;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,58,_ctx) ) {
			case 1:
				{
				State = 506;
				_la = _input.La(1);
				if (_la==WHITESPACE) {
					{
					State = 505; whitespace();
					}
				}

				State = 508; hook();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Choose_clauseContext : ParserRuleContext {
		public ITerminalNode MACRO_OPEN() { return GetToken(TxMarkParser.MACRO_OPEN, 0); }
		public ITerminalNode KEYWORD_CHOOSE() { return GetToken(TxMarkParser.KEYWORD_CHOOSE, 0); }
		public ITerminalNode MCOLON() { return GetToken(TxMarkParser.MCOLON, 0); }
		public MacroArgumentContext macroArgument() {
			return GetRuleContext<MacroArgumentContext>(0);
		}
		public ITerminalNode CLOSE_PARENTHESIS() { return GetToken(TxMarkParser.CLOSE_PARENTHESIS, 0); }
		public When_clauseContext when_clause() {
			return GetRuleContext<When_clauseContext>(0);
		}
		public Otherwise_clauseContext otherwise_clause() {
			return GetRuleContext<Otherwise_clauseContext>(0);
		}
		public WhitespaceContext whitespace() {
			return GetRuleContext<WhitespaceContext>(0);
		}
		public Choose_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_choose_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITxMarkParserListener typedListener = listener as ITxMarkParserListener;
			if (typedListener != null) typedListener.EnterChoose_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITxMarkParserListener typedListener = listener as ITxMarkParserListener;
			if (typedListener != null) typedListener.ExitChoose_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITxMarkParserVisitor<TResult> typedVisitor = visitor as ITxMarkParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChoose_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Choose_clauseContext choose_clause() {
		Choose_clauseContext _localctx = new Choose_clauseContext(_ctx, State);
		EnterRule(_localctx, 96, RULE_choose_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 511; Match(MACRO_OPEN);
			State = 512; Match(KEYWORD_CHOOSE);
			State = 513; Match(MCOLON);
			State = 514; macroArgument();
			State = 515; Match(CLOSE_PARENTHESIS);
			State = 523;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,61,_ctx) ) {
			case 1:
				{
				State = 517;
				_la = _input.La(1);
				if (_la==WHITESPACE) {
					{
					State = 516; whitespace();
					}
				}

				State = 521;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,60,_ctx) ) {
				case 1:
					{
					State = 519; when_clause();
					}
					break;

				case 2:
					{
					State = 520; otherwise_clause();
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Set_clauseContext : ParserRuleContext {
		public ITerminalNode MACRO_OPEN() { return GetToken(TxMarkParser.MACRO_OPEN, 0); }
		public ITerminalNode KEYWORD_SET() { return GetToken(TxMarkParser.KEYWORD_SET, 0); }
		public ITerminalNode MCOLON() { return GetToken(TxMarkParser.MCOLON, 0); }
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public ITerminalNode KEYWORD_TO() { return GetToken(TxMarkParser.KEYWORD_TO, 0); }
		public MacroArgumentContext macroArgument() {
			return GetRuleContext<MacroArgumentContext>(0);
		}
		public ITerminalNode CLOSE_PARENTHESIS() { return GetToken(TxMarkParser.CLOSE_PARENTHESIS, 0); }
		public Set_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITxMarkParserListener typedListener = listener as ITxMarkParserListener;
			if (typedListener != null) typedListener.EnterSet_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITxMarkParserListener typedListener = listener as ITxMarkParserListener;
			if (typedListener != null) typedListener.ExitSet_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITxMarkParserVisitor<TResult> typedVisitor = visitor as ITxMarkParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSet_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Set_clauseContext set_clause() {
		Set_clauseContext _localctx = new Set_clauseContext(_ctx, State);
		EnterRule(_localctx, 98, RULE_set_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 525; Match(MACRO_OPEN);
			State = 526; Match(KEYWORD_SET);
			State = 527; Match(MCOLON);
			State = 528; variable();
			State = 529; Match(KEYWORD_TO);
			State = 530; macroArgument();
			State = 531; Match(CLOSE_PARENTHESIS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Hook_definition_clauseContext : ParserRuleContext {
		public ITerminalNode MACRO_OPEN() { return GetToken(TxMarkParser.MACRO_OPEN, 0); }
		public ITerminalNode KEYWORD_HOOK() { return GetToken(TxMarkParser.KEYWORD_HOOK, 0); }
		public ITerminalNode MCOLON() { return GetToken(TxMarkParser.MCOLON, 0); }
		public ITerminalNode CLOSE_PARENTHESIS() { return GetToken(TxMarkParser.CLOSE_PARENTHESIS, 0); }
		public HookContext hook() {
			return GetRuleContext<HookContext>(0);
		}
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public HookNameContext hookName() {
			return GetRuleContext<HookNameContext>(0);
		}
		public Hook_definition_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hook_definition_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITxMarkParserListener typedListener = listener as ITxMarkParserListener;
			if (typedListener != null) typedListener.EnterHook_definition_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITxMarkParserListener typedListener = listener as ITxMarkParserListener;
			if (typedListener != null) typedListener.ExitHook_definition_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITxMarkParserVisitor<TResult> typedVisitor = visitor as ITxMarkParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHook_definition_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Hook_definition_clauseContext hook_definition_clause() {
		Hook_definition_clauseContext _localctx = new Hook_definition_clauseContext(_ctx, State);
		EnterRule(_localctx, 100, RULE_hook_definition_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 533; Match(MACRO_OPEN);
			State = 534; Match(KEYWORD_HOOK);
			State = 535; Match(MCOLON);
			State = 538;
			switch (_input.La(1)) {
			case DOLLAR_SIGN:
			case MDOLLAR_SIGN:
				{
				State = 536; variable();
				}
				break;
			case QUESTION_MARK:
			case MQUESTION_MARK:
				{
				State = 537; hookName();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 540; Match(CLOSE_PARENTHESIS);
			State = 541; hook();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MacroContext : ParserRuleContext {
		public ITerminalNode MACRO_OPEN() { return GetToken(TxMarkParser.MACRO_OPEN, 0); }
		public MacroNameContext macroName() {
			return GetRuleContext<MacroNameContext>(0);
		}
		public ITerminalNode MCOLON() { return GetToken(TxMarkParser.MCOLON, 0); }
		public ITerminalNode CLOSE_PARENTHESIS() { return GetToken(TxMarkParser.CLOSE_PARENTHESIS, 0); }
		public MacroArgumentContext[] macroArgument() {
			return GetRuleContexts<MacroArgumentContext>();
		}
		public MacroArgumentContext macroArgument(int i) {
			return GetRuleContext<MacroArgumentContext>(i);
		}
		public ITerminalNode OPERATOR_AS() { return GetToken(TxMarkParser.OPERATOR_AS, 0); }
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public ITerminalNode[] MCOMMA() { return GetTokens(TxMarkParser.MCOMMA); }
		public ITerminalNode MCOMMA(int i) {
			return GetToken(TxMarkParser.MCOMMA, i);
		}
		public MacroContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_macro; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITxMarkParserListener typedListener = listener as ITxMarkParserListener;
			if (typedListener != null) typedListener.EnterMacro(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITxMarkParserListener typedListener = listener as ITxMarkParserListener;
			if (typedListener != null) typedListener.ExitMacro(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITxMarkParserVisitor<TResult> typedVisitor = visitor as ITxMarkParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMacro(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MacroContext macro() {
		MacroContext _localctx = new MacroContext(_ctx, State);
		EnterRule(_localctx, 102, RULE_macro);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 543; Match(MACRO_OPEN);
			State = 544; macroName();
			State = 545; Match(MCOLON);
			State = 554;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << QUESTION_MARK) | (1L << DOLLAR_SIGN) | (1L << WORD) | (1L << NUMBER) | (1L << MNUMBER) | (1L << MDOLLAR_SIGN) | (1L << MQUESTION_MARK) | (1L << CONSTANT_TRUE) | (1L << CONSTANT_FALSE) | (1L << CONSTANT_NULL) | (1L << OPERATOR_LAST))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (OPERATOR_MINUS - 69)) | (1L << (OPEN_PARENTHESIS - 69)) | (1L << (DOUBLE_QUOTE_STRING - 69)) | (1L << (MWORD - 69)))) != 0)) {
				{
				State = 546; macroArgument();
				State = 551;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==MCOMMA) {
					{
					{
					State = 547; Match(MCOMMA);
					State = 548; macroArgument();
					}
					}
					State = 553;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
			}

			State = 558;
			_la = _input.La(1);
			if (_la==OPERATOR_AS) {
				{
				State = 556; Match(OPERATOR_AS);
				State = 557; variable();
				}
			}

			State = 560; Match(CLOSE_PARENTHESIS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubmacroContext : ParserRuleContext {
		public ITerminalNode OPEN_PARENTHESIS() { return GetToken(TxMarkParser.OPEN_PARENTHESIS, 0); }
		public MacroNameContext macroName() {
			return GetRuleContext<MacroNameContext>(0);
		}
		public ITerminalNode MCOLON() { return GetToken(TxMarkParser.MCOLON, 0); }
		public ITerminalNode CLOSE_PARENTHESIS() { return GetToken(TxMarkParser.CLOSE_PARENTHESIS, 0); }
		public MacroArgumentContext[] macroArgument() {
			return GetRuleContexts<MacroArgumentContext>();
		}
		public MacroArgumentContext macroArgument(int i) {
			return GetRuleContext<MacroArgumentContext>(i);
		}
		public ITerminalNode[] MCOMMA() { return GetTokens(TxMarkParser.MCOMMA); }
		public ITerminalNode MCOMMA(int i) {
			return GetToken(TxMarkParser.MCOMMA, i);
		}
		public SubmacroContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_submacro; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITxMarkParserListener typedListener = listener as ITxMarkParserListener;
			if (typedListener != null) typedListener.EnterSubmacro(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITxMarkParserListener typedListener = listener as ITxMarkParserListener;
			if (typedListener != null) typedListener.ExitSubmacro(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITxMarkParserVisitor<TResult> typedVisitor = visitor as ITxMarkParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubmacro(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubmacroContext submacro() {
		SubmacroContext _localctx = new SubmacroContext(_ctx, State);
		EnterRule(_localctx, 104, RULE_submacro);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 562; Match(OPEN_PARENTHESIS);
			State = 563; macroName();
			State = 564; Match(MCOLON);
			State = 573;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << QUESTION_MARK) | (1L << DOLLAR_SIGN) | (1L << WORD) | (1L << NUMBER) | (1L << MNUMBER) | (1L << MDOLLAR_SIGN) | (1L << MQUESTION_MARK) | (1L << CONSTANT_TRUE) | (1L << CONSTANT_FALSE) | (1L << CONSTANT_NULL) | (1L << OPERATOR_LAST))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (OPERATOR_MINUS - 69)) | (1L << (OPEN_PARENTHESIS - 69)) | (1L << (DOUBLE_QUOTE_STRING - 69)) | (1L << (MWORD - 69)))) != 0)) {
				{
				State = 565; macroArgument();
				State = 570;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==MCOMMA) {
					{
					{
					State = 566; Match(MCOMMA);
					State = 567; macroArgument();
					}
					}
					State = 572;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
			}

			State = 575; Match(CLOSE_PARENTHESIS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HookContext : ParserRuleContext {
		public ITerminalNode OPEN_HOOK() { return GetToken(TxMarkParser.OPEN_HOOK, 0); }
		public ContentContext content() {
			return GetRuleContext<ContentContext>(0);
		}
		public ITerminalNode CLOSE_HOOK() { return GetToken(TxMarkParser.CLOSE_HOOK, 0); }
		public HookContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hook; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITxMarkParserListener typedListener = listener as ITxMarkParserListener;
			if (typedListener != null) typedListener.EnterHook(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITxMarkParserListener typedListener = listener as ITxMarkParserListener;
			if (typedListener != null) typedListener.ExitHook(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITxMarkParserVisitor<TResult> typedVisitor = visitor as ITxMarkParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHook(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HookContext hook() {
		HookContext _localctx = new HookContext(_ctx, State);
		EnterRule(_localctx, 106, RULE_hook);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 577; Match(OPEN_HOOK);
			State = 578; content();
			State = 579; Match(CLOSE_HOOK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MacroNameContext : ParserRuleContext {
		public ITerminalNode MWORD() { return GetToken(TxMarkParser.MWORD, 0); }
		public MacroNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_macroName; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITxMarkParserListener typedListener = listener as ITxMarkParserListener;
			if (typedListener != null) typedListener.EnterMacroName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITxMarkParserListener typedListener = listener as ITxMarkParserListener;
			if (typedListener != null) typedListener.ExitMacroName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITxMarkParserVisitor<TResult> typedVisitor = visitor as ITxMarkParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMacroName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MacroNameContext macroName() {
		MacroNameContext _localctx = new MacroNameContext(_ctx, State);
		EnterRule(_localctx, 108, RULE_macroName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 581; Match(MWORD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3S\x24A\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t\x30\x4\x31\t\x31\x4\x32"+
		"\t\x32\x4\x33\t\x33\x4\x34\t\x34\x4\x35\t\x35\x4\x36\t\x36\x4\x37\t\x37"+
		"\x4\x38\t\x38\x3\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3\x4\x3\x4\x3\x4\x3\x4\x3"+
		"\x5\x3\x5\x3\x5\x3\x5\x3\x6\x3\x6\x3\x6\x3\x6\x5\x6\x82\n\x6\x3\a\x3\a"+
		"\x3\a\x3\a\x5\a\x88\n\a\x3\b\x3\b\x3\t\x3\t\x3\n\x3\n\x3\v\x3\v\x3\v\x3"+
		"\v\x3\v\x3\v\x3\v\x3\v\x3\v\x5\v\x99\n\v\x3\f\x3\f\x3\r\x3\r\x3\r\x5\r"+
		"\xA0\n\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x5\r\xA9\n\r\x3\xE\x3\xE\x3"+
		"\xE\x3\xF\x3\xF\x3\xF\x3\x10\x3\x10\a\x10\xB3\n\x10\f\x10\xE\x10\xB6\v"+
		"\x10\x3\x10\x3\x10\x3\x10\x3\x10\x5\x10\xBC\n\x10\x3\x11\x5\x11\xBF\n"+
		"\x11\x3\x11\x3\x11\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3"+
		"\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3"+
		"\x12\x5\x12\xD5\n\x12\x3\x13\x3\x13\x3\x13\x3\x14\x3\x14\a\x14\xDC\n\x14"+
		"\f\x14\xE\x14\xDF\v\x14\x3\x15\x3\x15\x3\x16\x3\x16\x3\x17\x3\x17\x3\x18"+
		"\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x5\x18\xED\n\x18\x3\x19\x3\x19\x3"+
		"\x1A\x3\x1A\x3\x1B\x3\x1B\x3\x1C\x3\x1C\x3\x1C\a\x1C\xF8\n\x1C\f\x1C\xE"+
		"\x1C\xFB\v\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\a\x1C\x102\n\x1C\f\x1C"+
		"\xE\x1C\x105\v\x1C\x3\x1C\x3\x1C\x3\x1C\x5\x1C\x10A\n\x1C\x3\x1D\x3\x1D"+
		"\x3\x1D\x3\x1D\x3\x1D\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x5\x1E\x115\n\x1E\x3"+
		"\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3"+
		"\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3"+
		"\x1F\x3\x1F\x3\x1F\x3\x1F\x5\x1F\x12F\n\x1F\x3 \x3 \x3!\x3!\x3\"\x5\""+
		"\x136\n\"\x3\"\x3\"\x5\"\x13A\n\"\x3\"\x3\"\x5\"\x13E\n\"\x3\"\x3\"\x3"+
		"#\x3#\x3#\x3#\x3#\x3#\x3#\x5#\x149\n#\x3$\x3$\a$\x14D\n$\f$\xE$\x150\v"+
		"$\x3$\x3$\x3$\a$\x155\n$\f$\xE$\x158\v$\x3$\x5$\x15B\n$\x3%\x3%\x3%\x3"+
		"&\x3&\x3&\x3\'\x3\'\x3\'\x3\'\x3\'\x3\'\x3\'\x5\'\x16A\n\'\x3\'\a\'\x16D"+
		"\n\'\f\'\xE\'\x170\v\'\x3\'\x3\'\x3\'\x3\'\x3\'\x3\'\x3\'\x5\'\x179\n"+
		"\'\x3(\x5(\x17C\n(\x3(\x3(\x5(\x180\n(\a(\x182\n(\f(\xE(\x185\v(\x3)\x3"+
		")\x3)\x3)\x6)\x18B\n)\r)\xE)\x18C\x3*\x5*\x190\n*\x3*\x3*\x5*\x194\n*"+
		"\x3+\x5+\x197\n+\x3+\x3+\x5+\x19B\n+\x3+\x3+\x5+\x19F\n+\x5+\x1A1\n+\x3"+
		",\x3,\x3,\x3,\x3,\x3,\x5,\x1A9\n,\x3,\x3,\x5,\x1AD\n,\x3,\x5,\x1B0\n,"+
		"\x3-\x3-\x3-\x3-\x3-\x3-\x5-\x1B8\n-\x3-\x5-\x1BB\n-\x3-\x5-\x1BE\n-\x3"+
		"-\x3-\x5-\x1C2\n-\x5-\x1C4\n-\x3.\x3.\x3.\x3.\x3.\x5.\x1CB\n.\x3.\x5."+
		"\x1CE\n.\x3/\x3/\x3/\x3/\x3/\x3/\x5/\x1D6\n/\x3/\x5/\x1D9\n/\x3/\x5/\x1DC"+
		"\n/\x3/\x3/\x5/\x1E0\n/\x5/\x1E2\n/\x3\x30\x3\x30\x3\x30\x3\x30\x3\x30"+
		"\x3\x30\x5\x30\x1EA\n\x30\x3\x30\x5\x30\x1ED\n\x30\x3\x30\x5\x30\x1F0"+
		"\n\x30\x3\x30\x3\x30\x5\x30\x1F4\n\x30\x5\x30\x1F6\n\x30\x3\x31\x3\x31"+
		"\x3\x31\x3\x31\x3\x31\x5\x31\x1FD\n\x31\x3\x31\x5\x31\x200\n\x31\x3\x32"+
		"\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32\x5\x32\x208\n\x32\x3\x32\x3\x32\x5"+
		"\x32\x20C\n\x32\x5\x32\x20E\n\x32\x3\x33\x3\x33\x3\x33\x3\x33\x3\x33\x3"+
		"\x33\x3\x33\x3\x33\x3\x34\x3\x34\x3\x34\x3\x34\x3\x34\x5\x34\x21D\n\x34"+
		"\x3\x34\x3\x34\x3\x34\x3\x35\x3\x35\x3\x35\x3\x35\x3\x35\x3\x35\a\x35"+
		"\x228\n\x35\f\x35\xE\x35\x22B\v\x35\x5\x35\x22D\n\x35\x3\x35\x3\x35\x5"+
		"\x35\x231\n\x35\x3\x35\x3\x35\x3\x36\x3\x36\x3\x36\x3\x36\x3\x36\x3\x36"+
		"\a\x36\x23B\n\x36\f\x36\xE\x36\x23E\v\x36\x5\x36\x240\n\x36\x3\x36\x3"+
		"\x36\x3\x37\x3\x37\x3\x37\x3\x37\x3\x38\x3\x38\x3\x38\x5\x14E\x156\x183"+
		"\x2\x2\x39\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2"+
		"\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E\x2 \x2\"\x2$\x2&\x2(\x2*\x2,\x2.\x2\x30"+
		"\x2\x32\x2\x34\x2\x36\x2\x38\x2:\x2<\x2>\x2@\x2\x42\x2\x44\x2\x46\x2H"+
		"\x2J\x2L\x2N\x2P\x2R\x2T\x2V\x2X\x2Z\x2\\\x2^\x2`\x2\x62\x2\x64\x2\x66"+
		"\x2h\x2j\x2l\x2n\x2\x2\b\x4\x2\x1B\x1BOO\x4\x2\x1C\x1C\"\"\x3\x2\x33\x36"+
		"\x3\x2\t\x12\x3\x2PQ\x3\x2RS\x287\x2p\x3\x2\x2\x2\x4s\x3\x2\x2\x2\x6u"+
		"\x3\x2\x2\x2\by\x3\x2\x2\x2\n\x81\x3\x2\x2\x2\f\x87\x3\x2\x2\x2\xE\x89"+
		"\x3\x2\x2\x2\x10\x8B\x3\x2\x2\x2\x12\x8D\x3\x2\x2\x2\x14\x98\x3\x2\x2"+
		"\x2\x16\x9A\x3\x2\x2\x2\x18\xA8\x3\x2\x2\x2\x1A\xAA\x3\x2\x2\x2\x1C\xAD"+
		"\x3\x2\x2\x2\x1E\xBB\x3\x2\x2\x2 \xBE\x3\x2\x2\x2\"\xD4\x3\x2\x2\x2$\xD6"+
		"\x3\x2\x2\x2&\xD9\x3\x2\x2\x2(\xE0\x3\x2\x2\x2*\xE2\x3\x2\x2\x2,\xE4\x3"+
		"\x2\x2\x2.\xEC\x3\x2\x2\x2\x30\xEE\x3\x2\x2\x2\x32\xF0\x3\x2\x2\x2\x34"+
		"\xF2\x3\x2\x2\x2\x36\x109\x3\x2\x2\x2\x38\x10B\x3\x2\x2\x2:\x114\x3\x2"+
		"\x2\x2<\x12E\x3\x2\x2\x2>\x130\x3\x2\x2\x2@\x132\x3\x2\x2\x2\x42\x135"+
		"\x3\x2\x2\x2\x44\x148\x3\x2\x2\x2\x46\x15A\x3\x2\x2\x2H\x15C\x3\x2\x2"+
		"\x2J\x15F\x3\x2\x2\x2L\x178\x3\x2\x2\x2N\x17B\x3\x2\x2\x2P\x18A\x3\x2"+
		"\x2\x2R\x18F\x3\x2\x2\x2T\x196\x3\x2\x2\x2V\x1A2\x3\x2\x2\x2X\x1B1\x3"+
		"\x2\x2\x2Z\x1C5\x3\x2\x2\x2\\\x1CF\x3\x2\x2\x2^\x1E3\x3\x2\x2\x2`\x1F7"+
		"\x3\x2\x2\x2\x62\x201\x3\x2\x2\x2\x64\x20F\x3\x2\x2\x2\x66\x217\x3\x2"+
		"\x2\x2h\x221\x3\x2\x2\x2j\x234\x3\x2\x2\x2l\x243\x3\x2\x2\x2n\x247\x3"+
		"\x2\x2\x2pq\x5N(\x2qr\a\x2\x2\x3r\x3\x3\x2\x2\x2st\a\x1D\x2\x2t\x5\x3"+
		"\x2\x2\x2uv\a\f\x2\x2vw\x5\xE\b\x2wx\a\r\x2\x2x\a\x3\x2\x2\x2yz\a\r\x2"+
		"\x2z{\x5\xE\b\x2{|\a\f\x2\x2|\t\x3\x2\x2\x2}~\a\v\x2\x2~\x82\x5\xE\b\x2"+
		"\x7F\x80\a#\x2\x2\x80\x82\x5\xE\b\x2\x81}\x3\x2\x2\x2\x81\x7F\x3\x2\x2"+
		"\x2\x82\v\x3\x2\x2\x2\x83\x84\a\n\x2\x2\x84\x88\x5\xE\b\x2\x85\x86\a$"+
		"\x2\x2\x86\x88\x5\xE\b\x2\x87\x83\x3\x2\x2\x2\x87\x85\x3\x2\x2\x2\x88"+
		"\r\x3\x2\x2\x2\x89\x8A\t\x2\x2\x2\x8A\xF\x3\x2\x2\x2\x8B\x8C\t\x3\x2\x2"+
		"\x8C\x11\x3\x2\x2\x2\x8D\x8E\aN\x2\x2\x8E\x13\x3\x2\x2\x2\x8F\x99\x5\n"+
		"\x6\x2\x90\x99\x5\f\a\x2\x91\x99\x5j\x36\x2\x92\x99\x5.\x18\x2\x93\x99"+
		"\x5\xE\b\x2\x94\x95\aL\x2\x2\x95\x96\x5&\x14\x2\x96\x97\aM\x2\x2\x97\x99"+
		"\x3\x2\x2\x2\x98\x8F\x3\x2\x2\x2\x98\x90\x3\x2\x2\x2\x98\x91\x3\x2\x2"+
		"\x2\x98\x92\x3\x2\x2\x2\x98\x93\x3\x2\x2\x2\x98\x94\x3\x2\x2\x2\x99\x15"+
		"\x3\x2\x2\x2\x9A\x9B\t\x4\x2\x2\x9B\x17\x3\x2\x2\x2\x9C\x9D\x5\x10\t\x2"+
		"\x9D\x9F\x5\x16\f\x2\x9E\xA0\a@\x2\x2\x9F\x9E\x3\x2\x2\x2\x9F\xA0\x3\x2"+
		"\x2\x2\xA0\xA9\x3\x2\x2\x2\xA1\xA9\a@\x2\x2\xA2\xA3\aL\x2\x2\xA3\xA4\x5"+
		"&\x14\x2\xA4\xA5\aM\x2\x2\xA5\xA9\x3\x2\x2\x2\xA6\xA9\x5\x12\n\x2\xA7"+
		"\xA9\x5\xE\b\x2\xA8\x9C\x3\x2\x2\x2\xA8\xA1\x3\x2\x2\x2\xA8\xA2\x3\x2"+
		"\x2\x2\xA8\xA6\x3\x2\x2\x2\xA8\xA7\x3\x2\x2\x2\xA9\x19\x3\x2\x2\x2\xAA"+
		"\xAB\a\x45\x2\x2\xAB\xAC\x5\x14\v\x2\xAC\x1B\x3\x2\x2\x2\xAD\xAE\a\x44"+
		"\x2\x2\xAE\xAF\x5\x18\r\x2\xAF\x1D\x3\x2\x2\x2\xB0\xB4\x5\x14\v\x2\xB1"+
		"\xB3\x5\x1C\xF\x2\xB2\xB1\x3\x2\x2\x2\xB3\xB6\x3\x2\x2\x2\xB4\xB2\x3\x2"+
		"\x2\x2\xB4\xB5\x3\x2\x2\x2\xB5\xBC\x3\x2\x2\x2\xB6\xB4\x3\x2\x2\x2\xB7"+
		"\xB8\x5\x18\r\x2\xB8\xB9\a\x45\x2\x2\xB9\xBA\x5\x1E\x10\x2\xBA\xBC\x3"+
		"\x2\x2\x2\xBB\xB0\x3\x2\x2\x2\xBB\xB7\x3\x2\x2\x2\xBC\x1F\x3\x2\x2\x2"+
		"\xBD\xBF\aG\x2\x2\xBE\xBD\x3\x2\x2\x2\xBE\xBF\x3\x2\x2\x2\xBF\xC0\x3\x2"+
		"\x2\x2\xC0\xC1\x5\x1E\x10\x2\xC1!\x3\x2\x2\x2\xC2\xD5\a<\x2\x2\xC3\xD5"+
		"\a>\x2\x2\xC4\xD5\a\x37\x2\x2\xC5\xD5\a\x38\x2\x2\xC6\xD5\a\x39\x2\x2"+
		"\xC7\xD5\a:\x2\x2\xC8\xC9\a\x41\x2\x2\xC9\xD5\a\x42\x2\x2\xCA\xCB\a\x41"+
		"\x2\x2\xCB\xD5\a?\x2\x2\xCC\xD5\a\x41\x2\x2\xCD\xD5\a=\x2\x2\xCE\xD5\a"+
		"K\x2\x2\xCF\xD5\aI\x2\x2\xD0\xD5\aH\x2\x2\xD1\xD5\aJ\x2\x2\xD2\xD5\a\x46"+
		"\x2\x2\xD3\xD5\aG\x2\x2\xD4\xC2\x3\x2\x2\x2\xD4\xC3\x3\x2\x2\x2\xD4\xC4"+
		"\x3\x2\x2\x2\xD4\xC5\x3\x2\x2\x2\xD4\xC6\x3\x2\x2\x2\xD4\xC7\x3\x2\x2"+
		"\x2\xD4\xC8\x3\x2\x2\x2\xD4\xCA\x3\x2\x2\x2\xD4\xCC\x3\x2\x2\x2\xD4\xCD"+
		"\x3\x2\x2\x2\xD4\xCE\x3\x2\x2\x2\xD4\xCF\x3\x2\x2\x2\xD4\xD0\x3\x2\x2"+
		"\x2\xD4\xD1\x3\x2\x2\x2\xD4\xD2\x3\x2\x2\x2\xD4\xD3\x3\x2\x2\x2\xD5#\x3"+
		"\x2\x2\x2\xD6\xD7\x5\"\x12\x2\xD7\xD8\x5&\x14\x2\xD8%\x3\x2\x2\x2\xD9"+
		"\xDD\x5 \x11\x2\xDA\xDC\x5$\x13\x2\xDB\xDA\x3\x2\x2\x2\xDC\xDF\x3\x2\x2"+
		"\x2\xDD\xDB\x3\x2\x2\x2\xDD\xDE\x3\x2\x2\x2\xDE\'\x3\x2\x2\x2\xDF\xDD"+
		"\x3\x2\x2\x2\xE0\xE1\a/\x2\x2\xE1)\x3\x2\x2\x2\xE2\xE3\a\x30\x2\x2\xE3"+
		"+\x3\x2\x2\x2\xE4\xE5\a\x31\x2\x2\xE5-\x3\x2\x2\x2\xE6\xED\x5\x10\t\x2"+
		"\xE7\xED\x5(\x15\x2\xE8\xED\x5*\x16\x2\xE9\xED\x5,\x17\x2\xEA\xED\x5\x12"+
		"\n\x2\xEB\xED\x5\xE\b\x2\xEC\xE6\x3\x2\x2\x2\xEC\xE7\x3\x2\x2\x2\xEC\xE8"+
		"\x3\x2\x2\x2\xEC\xE9\x3\x2\x2\x2\xEC\xEA\x3\x2\x2\x2\xEC\xEB\x3\x2\x2"+
		"\x2\xED/\x3\x2\x2\x2\xEE\xEF\x5&\x14\x2\xEF\x31\x3\x2\x2\x2\xF0\xF1\a"+
		"\x1A\x2\x2\xF1\x33\x3\x2\x2\x2\xF2\xF3\a\x19\x2\x2\xF3\x35\x3\x2\x2\x2"+
		"\xF4\xF5\a\t\x2\x2\xF5\xF9\x5\xE\b\x2\xF6\xF8\x5\x42\"\x2\xF7\xF6\x3\x2"+
		"\x2\x2\xF8\xFB\x3\x2\x2\x2\xF9\xF7\x3\x2\x2\x2\xF9\xFA\x3\x2\x2\x2\xFA"+
		"\xFC\x3\x2\x2\x2\xFB\xF9\x3\x2\x2\x2\xFC\xFD\a\x12\x2\x2\xFD\x10A\x3\x2"+
		"\x2\x2\xFE\xFF\a\t\x2\x2\xFF\x103\x5\xE\b\x2\x100\x102\x5\x42\"\x2\x101"+
		"\x100\x3\x2\x2\x2\x102\x105\x3\x2\x2\x2\x103\x101\x3\x2\x2\x2\x103\x104"+
		"\x3\x2\x2\x2\x104\x106\x3\x2\x2\x2\x105\x103\x3\x2\x2\x2\x106\x107\a\xE"+
		"\x2\x2\x107\x108\a\x12\x2\x2\x108\x10A\x3\x2\x2\x2\x109\xF4\x3\x2\x2\x2"+
		"\x109\xFE\x3\x2\x2\x2\x10A\x37\x3\x2\x2\x2\x10B\x10C\a\t\x2\x2\x10C\x10D"+
		"\a\xE\x2\x2\x10D\x10E\x5\xE\b\x2\x10E\x10F\a\x12\x2\x2\x10F\x39\x3\x2"+
		"\x2\x2\x110\x115\x5\x36\x1C\x2\x111\x115\x5\x38\x1D\x2\x112\x115\x5H%"+
		"\x2\x113\x115\x5J&\x2\x114\x110\x3\x2\x2\x2\x114\x111\x3\x2\x2\x2\x114"+
		"\x112\x3\x2\x2\x2\x114\x113\x3\x2\x2\x2\x115;\x3\x2\x2\x2\x116\x117\a"+
		"\x13\x2\x2\x117\x118\x5N(\x2\x118\x119\a\x13\x2\x2\x119\x12F\x3\x2\x2"+
		"\x2\x11A\x11B\a\x18\x2\x2\x11B\x11C\x5N(\x2\x11C\x11D\a\x18\x2\x2\x11D"+
		"\x12F\x3\x2\x2\x2\x11E\x11F\a\x14\x2\x2\x11F\x120\x5N(\x2\x120\x121\a"+
		"\x14\x2\x2\x121\x12F\x3\x2\x2\x2\x122\x123\a\x15\x2\x2\x123\x124\x5N("+
		"\x2\x124\x125\a\x15\x2\x2\x125\x12F\x3\x2\x2\x2\x126\x127\a\x16\x2\x2"+
		"\x127\x128\x5N(\x2\x128\x129\a\x16\x2\x2\x129\x12F\x3\x2\x2\x2\x12A\x12B"+
		"\a\x17\x2\x2\x12B\x12C\x5N(\x2\x12C\x12D\a\x17\x2\x2\x12D\x12F\x3\x2\x2"+
		"\x2\x12E\x116\x3\x2\x2\x2\x12E\x11A\x3\x2\x2\x2\x12E\x11E\x3\x2\x2\x2"+
		"\x12E\x122\x3\x2\x2\x2\x12E\x126\x3\x2\x2\x2\x12E\x12A\x3\x2\x2\x2\x12F"+
		"=\x3\x2\x2\x2\x130\x131\t\x5\x2\x2\x131?\x3\x2\x2\x2\x132\x133\x5\xE\b"+
		"\x2\x133\x41\x3\x2\x2\x2\x134\x136\x5\x4\x3\x2\x135\x134\x3\x2\x2\x2\x135"+
		"\x136\x3\x2\x2\x2\x136\x137\x3\x2\x2\x2\x137\x139\x5@!\x2\x138\x13A\x5"+
		"\x4\x3\x2\x139\x138\x3\x2\x2\x2\x139\x13A\x3\x2\x2\x2\x13A\x13B\x3\x2"+
		"\x2\x2\x13B\x13D\a\xF\x2\x2\x13C\x13E\x5\x4\x3\x2\x13D\x13C\x3\x2\x2\x2"+
		"\x13D\x13E\x3\x2\x2\x2\x13E\x13F\x3\x2\x2\x2\x13F\x140\x5\x46$\x2\x140"+
		"\x43\x3\x2\x2\x2\x141\x149\x5P)\x2\x142\x149\x5\f\a\x2\x143\x149\x5\n"+
		"\x6\x2\x144\x149\x5\x32\x1A\x2\x145\x149\x5> \x2\x146\x149\x5\x4\x3\x2"+
		"\x147\x149\x5\x34\x1B\x2\x148\x141\x3\x2\x2\x2\x148\x142\x3\x2\x2\x2\x148"+
		"\x143\x3\x2\x2\x2\x148\x144\x3\x2\x2\x2\x148\x145\x3\x2\x2\x2\x148\x146"+
		"\x3\x2\x2\x2\x148\x147\x3\x2\x2\x2\x149\x45\x3\x2\x2\x2\x14A\x14E\a\x10"+
		"\x2\x2\x14B\x14D\x5\x44#\x2\x14C\x14B\x3\x2\x2\x2\x14D\x150\x3\x2\x2\x2"+
		"\x14E\x14F\x3\x2\x2\x2\x14E\x14C\x3\x2\x2\x2\x14F\x151\x3\x2\x2\x2\x150"+
		"\x14E\x3\x2\x2\x2\x151\x15B\a\x10\x2\x2\x152\x156\a\x11\x2\x2\x153\x155"+
		"\x5\x44#\x2\x154\x153\x3\x2\x2\x2\x155\x158\x3\x2\x2\x2\x156\x157\x3\x2"+
		"\x2\x2\x156\x154\x3\x2\x2\x2\x157\x159\x3\x2\x2\x2\x158\x156\x3\x2\x2"+
		"\x2\x159\x15B\a\x11\x2\x2\x15A\x14A\x3\x2\x2\x2\x15A\x152\x3\x2\x2\x2"+
		"\x15BG\x3\x2\x2\x2\x15C\x15D\a\a\x2\x2\x15D\x15E\t\x6\x2\x2\x15EI\x3\x2"+
		"\x2\x2\x15F\x160\a\b\x2\x2\x160\x161\t\a\x2\x2\x161K\x3\x2\x2\x2\x162"+
		"\x179\x5\\/\x2\x163\x179\x5\x62\x32\x2\x164\x179\x5V,\x2\x165\x179\x5"+
		"\x64\x33\x2\x166\x179\x5\x66\x34\x2\x167\x16E\x5T+\x2\x168\x16A\x5\x4"+
		"\x3\x2\x169\x168\x3\x2\x2\x2\x169\x16A\x3\x2\x2\x2\x16A\x16B\x3\x2\x2"+
		"\x2\x16B\x16D\x5T+\x2\x16C\x169\x3\x2\x2\x2\x16D\x170\x3\x2\x2\x2\x16E"+
		"\x16C\x3\x2\x2\x2\x16E\x16F\x3\x2\x2\x2\x16F\x179\x3\x2\x2\x2\x170\x16E"+
		"\x3\x2\x2\x2\x171\x179\x5R*\x2\x172\x179\x5:\x1E\x2\x173\x179\x5\f\a\x2"+
		"\x174\x179\x5\n\x6\x2\x175\x179\x5\x32\x1A\x2\x176\x179\x5<\x1F\x2\x177"+
		"\x179\x5> \x2\x178\x162\x3\x2\x2\x2\x178\x163\x3\x2\x2\x2\x178\x164\x3"+
		"\x2\x2\x2\x178\x165\x3\x2\x2\x2\x178\x166\x3\x2\x2\x2\x178\x167\x3\x2"+
		"\x2\x2\x178\x171\x3\x2\x2\x2\x178\x172\x3\x2\x2\x2\x178\x173\x3\x2\x2"+
		"\x2\x178\x174\x3\x2\x2\x2\x178\x175\x3\x2\x2\x2\x178\x176\x3\x2\x2\x2"+
		"\x178\x177\x3\x2\x2\x2\x179M\x3\x2\x2\x2\x17A\x17C\x5P)\x2\x17B\x17A\x3"+
		"\x2\x2\x2\x17B\x17C\x3\x2\x2\x2\x17C\x183\x3\x2\x2\x2\x17D\x17F\x5L\'"+
		"\x2\x17E\x180\x5P)\x2\x17F\x17E\x3\x2\x2\x2\x17F\x180\x3\x2\x2\x2\x180"+
		"\x182\x3\x2\x2\x2\x181\x17D\x3\x2\x2\x2\x182\x185\x3\x2\x2\x2\x183\x184"+
		"\x3\x2\x2\x2\x183\x181\x3\x2\x2\x2\x184O\x3\x2\x2\x2\x185\x183\x3\x2\x2"+
		"\x2\x186\x18B\x5\xE\b\x2\x187\x18B\x5\x10\t\x2\x188\x18B\x5\x4\x3\x2\x189"+
		"\x18B\x5\x34\x1B\x2\x18A\x186\x3\x2\x2\x2\x18A\x187\x3\x2\x2\x2\x18A\x188"+
		"\x3\x2\x2\x2\x18A\x189\x3\x2\x2\x2\x18B\x18C\x3\x2\x2\x2\x18C\x18A\x3"+
		"\x2\x2\x2\x18C\x18D\x3\x2\x2\x2\x18DQ\x3\x2\x2\x2\x18E\x190\x5\x6\x4\x2"+
		"\x18F\x18E\x3\x2\x2\x2\x18F\x190\x3\x2\x2\x2\x190\x191\x3\x2\x2\x2\x191"+
		"\x193\x5l\x37\x2\x192\x194\x5\b\x5\x2\x193\x192\x3\x2\x2\x2\x193\x194"+
		"\x3\x2\x2\x2\x194S\x3\x2\x2\x2\x195\x197\x5\x6\x4\x2\x196\x195\x3\x2\x2"+
		"\x2\x196\x197\x3\x2\x2\x2\x197\x198\x3\x2\x2\x2\x198\x1A0\x5h\x35\x2\x199"+
		"\x19B\x5\x4\x3\x2\x19A\x199\x3\x2\x2\x2\x19A\x19B\x3\x2\x2\x2\x19B\x19C"+
		"\x3\x2\x2\x2\x19C\x19E\x5l\x37\x2\x19D\x19F\x5\b\x5\x2\x19E\x19D\x3\x2"+
		"\x2\x2\x19E\x19F\x3\x2\x2\x2\x19F\x1A1\x3\x2\x2\x2\x1A0\x19A\x3\x2\x2"+
		"\x2\x1A0\x1A1\x3\x2\x2\x2\x1A1U\x3\x2\x2\x2\x1A2\x1A3\a\x4\x2\x2\x1A3"+
		"\x1A4\a-\x2\x2\x1A4\x1A5\a!\x2\x2\x1A5\x1A8\x5\x30\x19\x2\x1A6\x1A7\a"+
		"\x32\x2\x2\x1A7\x1A9\x5\n\x6\x2\x1A8\x1A6\x3\x2\x2\x2\x1A8\x1A9\x3\x2"+
		"\x2\x2\x1A9\x1AA\x3\x2\x2\x2\x1AA\x1AF\aM\x2\x2\x1AB\x1AD\x5\x4\x3\x2"+
		"\x1AC\x1AB\x3\x2\x2\x2\x1AC\x1AD\x3\x2\x2\x2\x1AD\x1AE\x3\x2\x2\x2\x1AE"+
		"\x1B0\x5l\x37\x2\x1AF\x1AC\x3\x2\x2\x2\x1AF\x1B0\x3\x2\x2\x2\x1B0W\x3"+
		"\x2\x2\x2\x1B1\x1B2\a\x4\x2\x2\x1B2\x1B3\a,\x2\x2\x1B3\x1B4\a!\x2\x2\x1B4"+
		"\x1B5\x5\x30\x19\x2\x1B5\x1BA\aM\x2\x2\x1B6\x1B8\x5\x4\x3\x2\x1B7\x1B6"+
		"\x3\x2\x2\x2\x1B7\x1B8\x3\x2\x2\x2\x1B8\x1B9\x3\x2\x2\x2\x1B9\x1BB\x5"+
		"l\x37\x2\x1BA\x1B7\x3\x2\x2\x2\x1BA\x1BB\x3\x2\x2\x2\x1BB\x1C3\x3\x2\x2"+
		"\x2\x1BC\x1BE\x5\x4\x3\x2\x1BD\x1BC\x3\x2\x2\x2\x1BD\x1BE\x3\x2\x2\x2"+
		"\x1BE\x1C1\x3\x2\x2\x2\x1BF\x1C2\x5X-\x2\x1C0\x1C2\x5Z.\x2\x1C1\x1BF\x3"+
		"\x2\x2\x2\x1C1\x1C0\x3\x2\x2\x2\x1C2\x1C4\x3\x2\x2\x2\x1C3\x1BD\x3\x2"+
		"\x2\x2\x1C3\x1C4\x3\x2\x2\x2\x1C4Y\x3\x2\x2\x2\x1C5\x1C6\a\x4\x2\x2\x1C6"+
		"\x1C7\a.\x2\x2\x1C7\x1C8\a!\x2\x2\x1C8\x1CD\aM\x2\x2\x1C9\x1CB\x5\x4\x3"+
		"\x2\x1CA\x1C9\x3\x2\x2\x2\x1CA\x1CB\x3\x2\x2\x2\x1CB\x1CC\x3\x2\x2\x2"+
		"\x1CC\x1CE\x5l\x37\x2\x1CD\x1CA\x3\x2\x2\x2\x1CD\x1CE\x3\x2\x2\x2\x1CE"+
		"[\x3\x2\x2\x2\x1CF\x1D0\a\x4\x2\x2\x1D0\x1D1\a%\x2\x2\x1D1\x1D2\a!\x2"+
		"\x2\x1D2\x1D3\x5\x30\x19\x2\x1D3\x1D8\aM\x2\x2\x1D4\x1D6\x5\x4\x3\x2\x1D5"+
		"\x1D4\x3\x2\x2\x2\x1D5\x1D6\x3\x2\x2\x2\x1D6\x1D7\x3\x2\x2\x2\x1D7\x1D9"+
		"\x5l\x37\x2\x1D8\x1D5\x3\x2\x2\x2\x1D8\x1D9\x3\x2\x2\x2\x1D9\x1E1\x3\x2"+
		"\x2\x2\x1DA\x1DC\x5\x4\x3\x2\x1DB\x1DA\x3\x2\x2\x2\x1DB\x1DC\x3\x2\x2"+
		"\x2\x1DC\x1DF\x3\x2\x2\x2\x1DD\x1E0\x5X-\x2\x1DE\x1E0\x5Z.\x2\x1DF\x1DD"+
		"\x3\x2\x2\x2\x1DF\x1DE\x3\x2\x2\x2\x1E0\x1E2\x3\x2\x2\x2\x1E1\x1DB\x3"+
		"\x2\x2\x2\x1E1\x1E2\x3\x2\x2\x2\x1E2]\x3\x2\x2\x2\x1E3\x1E4\a\x4\x2\x2"+
		"\x1E4\x1E5\a\'\x2\x2\x1E5\x1E6\a!\x2\x2\x1E6\x1E7\x5\x30\x19\x2\x1E7\x1EC"+
		"\aM\x2\x2\x1E8\x1EA\x5\x4\x3\x2\x1E9\x1E8\x3\x2\x2\x2\x1E9\x1EA\x3\x2"+
		"\x2\x2\x1EA\x1EB\x3\x2\x2\x2\x1EB\x1ED\x5l\x37\x2\x1EC\x1E9\x3\x2\x2\x2"+
		"\x1EC\x1ED\x3\x2\x2\x2\x1ED\x1F5\x3\x2\x2\x2\x1EE\x1F0\x5\x4\x3\x2\x1EF"+
		"\x1EE\x3\x2\x2\x2\x1EF\x1F0\x3\x2\x2\x2\x1F0\x1F3\x3\x2\x2\x2\x1F1\x1F4"+
		"\x5^\x30\x2\x1F2\x1F4\x5`\x31\x2\x1F3\x1F1\x3\x2\x2\x2\x1F3\x1F2\x3\x2"+
		"\x2\x2\x1F4\x1F6\x3\x2\x2\x2\x1F5\x1EF\x3\x2\x2\x2\x1F5\x1F6\x3\x2\x2"+
		"\x2\x1F6_\x3\x2\x2\x2\x1F7\x1F8\a\x4\x2\x2\x1F8\x1F9\a(\x2\x2\x1F9\x1FA"+
		"\a!\x2\x2\x1FA\x1FF\aM\x2\x2\x1FB\x1FD\x5\x4\x3\x2\x1FC\x1FB\x3\x2\x2"+
		"\x2\x1FC\x1FD\x3\x2\x2\x2\x1FD\x1FE\x3\x2\x2\x2\x1FE\x200\x5l\x37\x2\x1FF"+
		"\x1FC\x3\x2\x2\x2\x1FF\x200\x3\x2\x2\x2\x200\x61\x3\x2\x2\x2\x201\x202"+
		"\a\x4\x2\x2\x202\x203\a&\x2\x2\x203\x204\a!\x2\x2\x204\x205\x5\x30\x19"+
		"\x2\x205\x20D\aM\x2\x2\x206\x208\x5\x4\x3\x2\x207\x206\x3\x2\x2\x2\x207"+
		"\x208\x3\x2\x2\x2\x208\x20B\x3\x2\x2\x2\x209\x20C\x5^\x30\x2\x20A\x20C"+
		"\x5`\x31\x2\x20B\x209\x3\x2\x2\x2\x20B\x20A\x3\x2\x2\x2\x20C\x20E\x3\x2"+
		"\x2\x2\x20D\x207\x3\x2\x2\x2\x20D\x20E\x3\x2\x2\x2\x20E\x63\x3\x2\x2\x2"+
		"\x20F\x210\a\x4\x2\x2\x210\x211\a)\x2\x2\x211\x212\a!\x2\x2\x212\x213"+
		"\x5\n\x6\x2\x213\x214\a+\x2\x2\x214\x215\x5\x30\x19\x2\x215\x216\aM\x2"+
		"\x2\x216\x65\x3\x2\x2\x2\x217\x218\a\x4\x2\x2\x218\x219\a*\x2\x2\x219"+
		"\x21C\a!\x2\x2\x21A\x21D\x5\n\x6\x2\x21B\x21D\x5\f\a\x2\x21C\x21A\x3\x2"+
		"\x2\x2\x21C\x21B\x3\x2\x2\x2\x21D\x21E\x3\x2\x2\x2\x21E\x21F\aM\x2\x2"+
		"\x21F\x220\x5l\x37\x2\x220g\x3\x2\x2\x2\x221\x222\a\x4\x2\x2\x222\x223"+
		"\x5n\x38\x2\x223\x22C\a!\x2\x2\x224\x229\x5\x30\x19\x2\x225\x226\a \x2"+
		"\x2\x226\x228\x5\x30\x19\x2\x227\x225\x3\x2\x2\x2\x228\x22B\x3\x2\x2\x2"+
		"\x229\x227\x3\x2\x2\x2\x229\x22A\x3\x2\x2\x2\x22A\x22D\x3\x2\x2\x2\x22B"+
		"\x229\x3\x2\x2\x2\x22C\x224\x3\x2\x2\x2\x22C\x22D\x3\x2\x2\x2\x22D\x230"+
		"\x3\x2\x2\x2\x22E\x22F\a\x32\x2\x2\x22F\x231\x5\n\x6\x2\x230\x22E\x3\x2"+
		"\x2\x2\x230\x231\x3\x2\x2\x2\x231\x232\x3\x2\x2\x2\x232\x233\aM\x2\x2"+
		"\x233i\x3\x2\x2\x2\x234\x235\aL\x2\x2\x235\x236\x5n\x38\x2\x236\x23F\a"+
		"!\x2\x2\x237\x23C\x5\x30\x19\x2\x238\x239\a \x2\x2\x239\x23B\x5\x30\x19"+
		"\x2\x23A\x238\x3\x2\x2\x2\x23B\x23E\x3\x2\x2\x2\x23C\x23A\x3\x2\x2\x2"+
		"\x23C\x23D\x3\x2\x2\x2\x23D\x240\x3\x2\x2\x2\x23E\x23C\x3\x2\x2\x2\x23F"+
		"\x237\x3\x2\x2\x2\x23F\x240\x3\x2\x2\x2\x240\x241\x3\x2\x2\x2\x241\x242"+
		"\aM\x2\x2\x242k\x3\x2\x2\x2\x243\x244\a\x5\x2\x2\x244\x245\x5N(\x2\x245"+
		"\x246\a\x6\x2\x2\x246m\x3\x2\x2\x2\x247\x248\aO\x2\x2\x248o\x3\x2\x2\x2"+
		"\x46\x81\x87\x98\x9F\xA8\xB4\xBB\xBE\xD4\xDD\xEC\xF9\x103\x109\x114\x12E"+
		"\x135\x139\x13D\x148\x14E\x156\x15A\x169\x16E\x178\x17B\x17F\x183\x18A"+
		"\x18C\x18F\x193\x196\x19A\x19E\x1A0\x1A8\x1AC\x1AF\x1B7\x1BA\x1BD\x1C1"+
		"\x1C3\x1CA\x1CD\x1D5\x1D8\x1DB\x1DF\x1E1\x1E9\x1EC\x1EF\x1F3\x1F5\x1FC"+
		"\x1FF\x207\x20B\x20D\x21C\x229\x22C\x230\x23C\x23F";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace TxMark.Compiler
