//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.3-SNAPSHOT
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\v-adai\Documents\Visual Studio 2015\Projects\TxMark\TxMark.Antlr\MarkdownPreprocessor.g4 by ANTLR 4.5.3-SNAPSHOT

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace TxMark.Compiler {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.3-SNAPSHOT")]
[System.CLSCompliant(false)]
public partial class MarkdownPreprocessorLexer : Lexer {
	public const int
		DOUBLE_QUOTE=1, SINGLE_QUOTE=2, ASTERISK=3, HASH=4, PERIOD=5, COLON=6, 
		UNDERBAR=7, DASH=8, DIGIT=9, LETTER=10, PUNCTUATION=11, TAB=12, EQUAL=13, 
		SPACE=14, LESS_THAN=15, GREATER_THAN=16, SLASH=17, CARRIAGE_RETURN=18, 
		NON_WHITESPACE=19;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"DOUBLE_QUOTE", "SINGLE_QUOTE", "ASTERISK", "HASH", "PERIOD", "COLON", 
		"UNDERBAR", "DASH", "DIGIT", "LETTER", "PUNCTUATION", "TAB", "EQUAL", 
		"SPACE", "LESS_THAN", "GREATER_THAN", "SLASH", "CARRIAGE_RETURN", "NON_WHITESPACE"
	};


	public MarkdownPreprocessorLexer(ICharStream input)
		: base(input)
	{
		_interp = new LexerATNSimulator(this,_ATN);
	}

	private static readonly string[] _LiteralNames = {
		null, "'\"'", "'''", "'*'", "'#'", "'.'", "':'", "'_'", "'-'", null, null, 
		null, "'\t'", "'='", "' '", "'<'", "'>'", "'/'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "DOUBLE_QUOTE", "SINGLE_QUOTE", "ASTERISK", "HASH", "PERIOD", "COLON", 
		"UNDERBAR", "DASH", "DIGIT", "LETTER", "PUNCTUATION", "TAB", "EQUAL", 
		"SPACE", "LESS_THAN", "GREATER_THAN", "SLASH", "CARRIAGE_RETURN", "NON_WHITESPACE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MarkdownPreprocessor.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x2\x15R\b\x1\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x3\x2\x3\x2"+
		"\x3\x3\x3\x3\x3\x4\x3\x4\x3\x5\x3\x5\x3\x6\x3\x6\x3\a\x3\a\x3\b\x3\b\x3"+
		"\t\x3\t\x3\n\x3\n\x3\v\x3\v\x3\f\x3\f\x3\r\x3\r\x3\xE\x3\xE\x3\xF\x3\xF"+
		"\x3\x10\x3\x10\x3\x11\x3\x11\x3\x12\x3\x12\x3\x13\x5\x13M\n\x13\x3\x13"+
		"\x3\x13\x3\x14\x3\x14\x2\x2\x2\x15\x3\x2\x3\x5\x2\x4\a\x2\x5\t\x2\x6\v"+
		"\x2\a\r\x2\b\xF\x2\t\x11\x2\n\x13\x2\v\x15\x2\f\x17\x2\r\x19\x2\xE\x1B"+
		"\x2\xF\x1D\x2\x10\x1F\x2\x11!\x2\x12#\x2\x13%\x2\x14\'\x2\x15\x3\x2\x6"+
		"\x3\x2\x32;\x4\x2\x43\\\x63|\v\x2##&(*+-.==\x41\x42]`\x62\x62}\x80\v\x2"+
		"\v\f\xF\xF\"\"%%)),,\x30\x31>>@@R\x2\x3\x3\x2\x2\x2\x2\x5\x3\x2\x2\x2"+
		"\x2\a\x3\x2\x2\x2\x2\t\x3\x2\x2\x2\x2\v\x3\x2\x2\x2\x2\r\x3\x2\x2\x2\x2"+
		"\xF\x3\x2\x2\x2\x2\x11\x3\x2\x2\x2\x2\x13\x3\x2\x2\x2\x2\x15\x3\x2\x2"+
		"\x2\x2\x17\x3\x2\x2\x2\x2\x19\x3\x2\x2\x2\x2\x1B\x3\x2\x2\x2\x2\x1D\x3"+
		"\x2\x2\x2\x2\x1F\x3\x2\x2\x2\x2!\x3\x2\x2\x2\x2#\x3\x2\x2\x2\x2%\x3\x2"+
		"\x2\x2\x2\'\x3\x2\x2\x2\x3)\x3\x2\x2\x2\x5+\x3\x2\x2\x2\a-\x3\x2\x2\x2"+
		"\t/\x3\x2\x2\x2\v\x31\x3\x2\x2\x2\r\x33\x3\x2\x2\x2\xF\x35\x3\x2\x2\x2"+
		"\x11\x37\x3\x2\x2\x2\x13\x39\x3\x2\x2\x2\x15;\x3\x2\x2\x2\x17=\x3\x2\x2"+
		"\x2\x19?\x3\x2\x2\x2\x1B\x41\x3\x2\x2\x2\x1D\x43\x3\x2\x2\x2\x1F\x45\x3"+
		"\x2\x2\x2!G\x3\x2\x2\x2#I\x3\x2\x2\x2%L\x3\x2\x2\x2\'P\x3\x2\x2\x2)*\a"+
		"$\x2\x2*\x4\x3\x2\x2\x2+,\a)\x2\x2,\x6\x3\x2\x2\x2-.\a,\x2\x2.\b\x3\x2"+
		"\x2\x2/\x30\a%\x2\x2\x30\n\x3\x2\x2\x2\x31\x32\a\x30\x2\x2\x32\f\x3\x2"+
		"\x2\x2\x33\x34\a<\x2\x2\x34\xE\x3\x2\x2\x2\x35\x36\a\x61\x2\x2\x36\x10"+
		"\x3\x2\x2\x2\x37\x38\a/\x2\x2\x38\x12\x3\x2\x2\x2\x39:\t\x2\x2\x2:\x14"+
		"\x3\x2\x2\x2;<\t\x3\x2\x2<\x16\x3\x2\x2\x2=>\t\x4\x2\x2>\x18\x3\x2\x2"+
		"\x2?@\a\v\x2\x2@\x1A\x3\x2\x2\x2\x41\x42\a?\x2\x2\x42\x1C\x3\x2\x2\x2"+
		"\x43\x44\a\"\x2\x2\x44\x1E\x3\x2\x2\x2\x45\x46\a>\x2\x2\x46 \x3\x2\x2"+
		"\x2GH\a@\x2\x2H\"\x3\x2\x2\x2IJ\a\x31\x2\x2J$\x3\x2\x2\x2KM\a\xF\x2\x2"+
		"LK\x3\x2\x2\x2LM\x3\x2\x2\x2MN\x3\x2\x2\x2NO\a\f\x2\x2O&\x3\x2\x2\x2P"+
		"Q\n\x5\x2\x2Q(\x3\x2\x2\x2\x4\x2L\x2";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace TxMark.Compiler
