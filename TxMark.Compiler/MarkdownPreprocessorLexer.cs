/*
 *  TxMark 1.0.0.alpha-0-g0639c8a
 *
 *  Copyright (c) 2016 Aaron G. Daisley-Harrison
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.3-SNAPSHOT
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\v-adai\Documents\Visual Studio 2015\Projects\TxMark\TxMark.Antlr\MarkdownPreprocessor.g4 by ANTLR 4.5.3-SNAPSHOT

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace TxMark.Compiler {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.3-SNAPSHOT")]
[System.CLSCompliant(false)]
public partial class MarkdownPreprocessorLexer : Lexer {
	public const int
		DOUBLE_QUOTE=1, SINGLE_QUOTE=2, OPEN_PARENTHESIS=3, CLOSE_PARENTHESIS=4, 
		ASTERISK=5, HASH=6, PERIOD=7, COLON=8, UNDERBAR=9, DASH=10, DIGIT=11, 
		LETTER=12, PUNCTUATION=13, TAB=14, EQUAL=15, SPACE=16, LESS_THAN=17, GREATER_THAN=18, 
		SLASH=19, CARRIAGE_RETURN=20, NON_WHITESPACE=21;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"DOUBLE_QUOTE", "SINGLE_QUOTE", "OPEN_PARENTHESIS", "CLOSE_PARENTHESIS", 
		"ASTERISK", "HASH", "PERIOD", "COLON", "UNDERBAR", "DASH", "DIGIT", "LETTER", 
		"PUNCTUATION", "TAB", "EQUAL", "SPACE", "LESS_THAN", "GREATER_THAN", "SLASH", 
		"CARRIAGE_RETURN", "NON_WHITESPACE"
	};


	public MarkdownPreprocessorLexer(ICharStream input)
		: base(input)
	{
		_interp = new LexerATNSimulator(this,_ATN);
	}

	private static readonly string[] _LiteralNames = {
		null, "'\"'", "'''", "'('", "')'", "'*'", "'#'", "'.'", "':'", "'_'", 
		"'-'", null, null, null, "'\t'", "'='", "' '", "'<'", "'>'", "'/'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "DOUBLE_QUOTE", "SINGLE_QUOTE", "OPEN_PARENTHESIS", "CLOSE_PARENTHESIS", 
		"ASTERISK", "HASH", "PERIOD", "COLON", "UNDERBAR", "DASH", "DIGIT", "LETTER", 
		"PUNCTUATION", "TAB", "EQUAL", "SPACE", "LESS_THAN", "GREATER_THAN", "SLASH", 
		"CARRIAGE_RETURN", "NON_WHITESPACE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MarkdownPreprocessor.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x2\x17Z\b\x1\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x3\x2\x3\x2\x3\x3\x3\x3\x3\x4\x3\x4\x3\x5\x3\x5\x3\x6\x3"+
		"\x6\x3\a\x3\a\x3\b\x3\b\x3\t\x3\t\x3\n\x3\n\x3\v\x3\v\x3\f\x3\f\x3\r\x3"+
		"\r\x3\xE\x3\xE\x3\xF\x3\xF\x3\x10\x3\x10\x3\x11\x3\x11\x3\x12\x3\x12\x3"+
		"\x13\x3\x13\x3\x14\x3\x14\x3\x15\x5\x15U\n\x15\x3\x15\x3\x15\x3\x16\x3"+
		"\x16\x2\x2\x2\x17\x3\x2\x3\x5\x2\x4\a\x2\x5\t\x2\x6\v\x2\a\r\x2\b\xF\x2"+
		"\t\x11\x2\n\x13\x2\v\x15\x2\f\x17\x2\r\x19\x2\xE\x1B\x2\xF\x1D\x2\x10"+
		"\x1F\x2\x11!\x2\x12#\x2\x13%\x2\x14\'\x2\x15)\x2\x16+\x2\x17\x3\x2\x6"+
		"\x3\x2\x32;\x4\x2\x43\\\x63|\n\x2##&(-.==\x41\x42]`\x62\x62}\x80\v\x2"+
		"\v\f\xF\xF\"\"%%)),,\x30\x31>>@@Z\x2\x3\x3\x2\x2\x2\x2\x5\x3\x2\x2\x2"+
		"\x2\a\x3\x2\x2\x2\x2\t\x3\x2\x2\x2\x2\v\x3\x2\x2\x2\x2\r\x3\x2\x2\x2\x2"+
		"\xF\x3\x2\x2\x2\x2\x11\x3\x2\x2\x2\x2\x13\x3\x2\x2\x2\x2\x15\x3\x2\x2"+
		"\x2\x2\x17\x3\x2\x2\x2\x2\x19\x3\x2\x2\x2\x2\x1B\x3\x2\x2\x2\x2\x1D\x3"+
		"\x2\x2\x2\x2\x1F\x3\x2\x2\x2\x2!\x3\x2\x2\x2\x2#\x3\x2\x2\x2\x2%\x3\x2"+
		"\x2\x2\x2\'\x3\x2\x2\x2\x2)\x3\x2\x2\x2\x2+\x3\x2\x2\x2\x3-\x3\x2\x2\x2"+
		"\x5/\x3\x2\x2\x2\a\x31\x3\x2\x2\x2\t\x33\x3\x2\x2\x2\v\x35\x3\x2\x2\x2"+
		"\r\x37\x3\x2\x2\x2\xF\x39\x3\x2\x2\x2\x11;\x3\x2\x2\x2\x13=\x3\x2\x2\x2"+
		"\x15?\x3\x2\x2\x2\x17\x41\x3\x2\x2\x2\x19\x43\x3\x2\x2\x2\x1B\x45\x3\x2"+
		"\x2\x2\x1DG\x3\x2\x2\x2\x1FI\x3\x2\x2\x2!K\x3\x2\x2\x2#M\x3\x2\x2\x2%"+
		"O\x3\x2\x2\x2\'Q\x3\x2\x2\x2)T\x3\x2\x2\x2+X\x3\x2\x2\x2-.\a$\x2\x2.\x4"+
		"\x3\x2\x2\x2/\x30\a)\x2\x2\x30\x6\x3\x2\x2\x2\x31\x32\a*\x2\x2\x32\b\x3"+
		"\x2\x2\x2\x33\x34\a+\x2\x2\x34\n\x3\x2\x2\x2\x35\x36\a,\x2\x2\x36\f\x3"+
		"\x2\x2\x2\x37\x38\a%\x2\x2\x38\xE\x3\x2\x2\x2\x39:\a\x30\x2\x2:\x10\x3"+
		"\x2\x2\x2;<\a<\x2\x2<\x12\x3\x2\x2\x2=>\a\x61\x2\x2>\x14\x3\x2\x2\x2?"+
		"@\a/\x2\x2@\x16\x3\x2\x2\x2\x41\x42\t\x2\x2\x2\x42\x18\x3\x2\x2\x2\x43"+
		"\x44\t\x3\x2\x2\x44\x1A\x3\x2\x2\x2\x45\x46\t\x4\x2\x2\x46\x1C\x3\x2\x2"+
		"\x2GH\a\v\x2\x2H\x1E\x3\x2\x2\x2IJ\a?\x2\x2J \x3\x2\x2\x2KL\a\"\x2\x2"+
		"L\"\x3\x2\x2\x2MN\a>\x2\x2N$\x3\x2\x2\x2OP\a@\x2\x2P&\x3\x2\x2\x2QR\a"+
		"\x31\x2\x2R(\x3\x2\x2\x2SU\a\xF\x2\x2TS\x3\x2\x2\x2TU\x3\x2\x2\x2UV\x3"+
		"\x2\x2\x2VW\a\f\x2\x2W*\x3\x2\x2\x2XY\n\x5\x2\x2Y,\x3\x2\x2\x2\x4\x2T"+
		"\x2";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace TxMark.Compiler
