//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.3-SNAPSHOT
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\v-adai\Documents\Visual Studio 2015\Projects\TxMark\TxMark.Antlr\MarkdownPreprocessor.g4 by ANTLR 4.5.3-SNAPSHOT

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace TxMark.Compiler {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.3-SNAPSHOT")]
[System.CLSCompliant(false)]
public partial class MarkdownPreprocessorParser : Parser {
	public const int
		DOUBLE_QUOTE=1, SINGLE_QUOTE=2, ASTERISK=3, HASH=4, PERIOD=5, COLON=6, 
		UNDERBAR=7, DASH=8, DIGIT=9, LETTER=10, PUNCTUATION=11, TAB=12, EQUAL=13, 
		SPACE=14, LESS_THAN=15, GREATER_THAN=16, SLASH=17, CARRIAGE_RETURN=18, 
		NON_WHITESPACE=19;
	public const int
		RULE_document = 0, RULE_line = 1, RULE_carriageReturn = 2, RULE_softCarriageReturn = 3, 
		RULE_hardCarriageReturn = 4, RULE_list = 5, RULE_listItem = 6, RULE_indentedText = 7, 
		RULE_listItemIndicator = 8, RULE_blockquote = 9, RULE_blockquoteItem = 10, 
		RULE_blockQuoteElement = 11, RULE_blockQuoteListItem = 12, RULE_blockquoteIndicator = 13, 
		RULE_heading = 14, RULE_headingIndicator = 15, RULE_textLine = 16, RULE_paragraph_end = 17, 
		RULE_text = 18, RULE_attributeContent = 19, RULE_attributeValue = 20, 
		RULE_attributeName = 21, RULE_attribute = 22, RULE_tag = 23, RULE_openTag = 24, 
		RULE_closeTag = 25, RULE_identifier = 26, RULE_whitespace = 27, RULE_space = 28, 
		RULE_tab = 29, RULE_anyNonWhitespace = 30, RULE_nonWhitespace = 31, RULE_anyWhitespace = 32;
	public static readonly string[] ruleNames = {
		"document", "line", "carriageReturn", "softCarriageReturn", "hardCarriageReturn", 
		"list", "listItem", "indentedText", "listItemIndicator", "blockquote", 
		"blockquoteItem", "blockQuoteElement", "blockQuoteListItem", "blockquoteIndicator", 
		"heading", "headingIndicator", "textLine", "paragraph_end", "text", "attributeContent", 
		"attributeValue", "attributeName", "attribute", "tag", "openTag", "closeTag", 
		"identifier", "whitespace", "space", "tab", "anyNonWhitespace", "nonWhitespace", 
		"anyWhitespace"
	};

	private static readonly string[] _LiteralNames = {
		null, "'\"'", "'''", "'*'", "'#'", "'.'", "':'", "'_'", "'-'", null, null, 
		null, "'\t'", "'='", "' '", "'<'", "'>'", "'/'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "DOUBLE_QUOTE", "SINGLE_QUOTE", "ASTERISK", "HASH", "PERIOD", "COLON", 
		"UNDERBAR", "DASH", "DIGIT", "LETTER", "PUNCTUATION", "TAB", "EQUAL", 
		"SPACE", "LESS_THAN", "GREATER_THAN", "SLASH", "CARRIAGE_RETURN", "NON_WHITESPACE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MarkdownPreprocessor.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public MarkdownPreprocessorParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class DocumentContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(MarkdownPreprocessorParser.Eof, 0); }
		public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public TextLineContext textLine() {
			return GetRuleContext<TextLineContext>(0);
		}
		public DocumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_document; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.EnterDocument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.ExitDocument(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownPreprocessorVisitor<TResult> typedVisitor = visitor as IMarkdownPreprocessorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDocument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DocumentContext document() {
		DocumentContext _localctx = new DocumentContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_document);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 69;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,0,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 66; line();
					}
					} 
				}
				State = 71;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,0,_ctx);
			}
			State = 73;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DOUBLE_QUOTE) | (1L << SINGLE_QUOTE) | (1L << PERIOD) | (1L << COLON) | (1L << UNDERBAR) | (1L << DASH) | (1L << DIGIT) | (1L << LETTER) | (1L << PUNCTUATION) | (1L << TAB) | (1L << EQUAL) | (1L << SPACE) | (1L << LESS_THAN) | (1L << NON_WHITESPACE))) != 0)) {
				{
				State = 72; textLine();
				}
			}

			State = 75; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineContext : ParserRuleContext {
		public HeadingContext heading() {
			return GetRuleContext<HeadingContext>(0);
		}
		public CarriageReturnContext carriageReturn() {
			return GetRuleContext<CarriageReturnContext>(0);
		}
		public ListContext list() {
			return GetRuleContext<ListContext>(0);
		}
		public BlockquoteContext blockquote() {
			return GetRuleContext<BlockquoteContext>(0);
		}
		public TextLineContext textLine() {
			return GetRuleContext<TextLineContext>(0);
		}
		public Paragraph_endContext paragraph_end() {
			return GetRuleContext<Paragraph_endContext>(0);
		}
		public LineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_line; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.EnterLine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.ExitLine(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownPreprocessorVisitor<TResult> typedVisitor = visitor as IMarkdownPreprocessorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineContext line() {
		LineContext _localctx = new LineContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_line);
		try {
			State = 86;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,2,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 77; heading();
				State = 78; carriageReturn();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 80; list();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 81; blockquote();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 82; textLine();
				State = 83; carriageReturn();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 85; paragraph_end();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CarriageReturnContext : ParserRuleContext {
		public SoftCarriageReturnContext softCarriageReturn() {
			return GetRuleContext<SoftCarriageReturnContext>(0);
		}
		public HardCarriageReturnContext hardCarriageReturn() {
			return GetRuleContext<HardCarriageReturnContext>(0);
		}
		public CarriageReturnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_carriageReturn; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.EnterCarriageReturn(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.ExitCarriageReturn(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownPreprocessorVisitor<TResult> typedVisitor = visitor as IMarkdownPreprocessorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCarriageReturn(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CarriageReturnContext carriageReturn() {
		CarriageReturnContext _localctx = new CarriageReturnContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_carriageReturn);
		try {
			State = 90;
			switch (_input.La(1)) {
			case CARRIAGE_RETURN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 88; softCarriageReturn();
				}
				break;
			case SPACE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 89; hardCarriageReturn();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SoftCarriageReturnContext : ParserRuleContext {
		public ITerminalNode CARRIAGE_RETURN() { return GetToken(MarkdownPreprocessorParser.CARRIAGE_RETURN, 0); }
		public SoftCarriageReturnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_softCarriageReturn; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.EnterSoftCarriageReturn(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.ExitSoftCarriageReturn(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownPreprocessorVisitor<TResult> typedVisitor = visitor as IMarkdownPreprocessorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSoftCarriageReturn(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SoftCarriageReturnContext softCarriageReturn() {
		SoftCarriageReturnContext _localctx = new SoftCarriageReturnContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_softCarriageReturn);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 92; Match(CARRIAGE_RETURN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HardCarriageReturnContext : ParserRuleContext {
		public SpaceContext[] space() {
			return GetRuleContexts<SpaceContext>();
		}
		public SpaceContext space(int i) {
			return GetRuleContext<SpaceContext>(i);
		}
		public ITerminalNode CARRIAGE_RETURN() { return GetToken(MarkdownPreprocessorParser.CARRIAGE_RETURN, 0); }
		public HardCarriageReturnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hardCarriageReturn; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.EnterHardCarriageReturn(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.ExitHardCarriageReturn(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownPreprocessorVisitor<TResult> typedVisitor = visitor as IMarkdownPreprocessorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHardCarriageReturn(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HardCarriageReturnContext hardCarriageReturn() {
		HardCarriageReturnContext _localctx = new HardCarriageReturnContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_hardCarriageReturn);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 94; space();
			State = 95; space();
			State = 96; Match(CARRIAGE_RETURN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListContext : ParserRuleContext {
		public ListItemContext[] listItem() {
			return GetRuleContexts<ListItemContext>();
		}
		public ListItemContext listItem(int i) {
			return GetRuleContext<ListItemContext>(i);
		}
		public CarriageReturnContext[] carriageReturn() {
			return GetRuleContexts<CarriageReturnContext>();
		}
		public CarriageReturnContext carriageReturn(int i) {
			return GetRuleContext<CarriageReturnContext>(i);
		}
		public IndentedTextContext[] indentedText() {
			return GetRuleContexts<IndentedTextContext>();
		}
		public IndentedTextContext indentedText(int i) {
			return GetRuleContext<IndentedTextContext>(i);
		}
		public ListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.EnterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.ExitList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownPreprocessorVisitor<TResult> typedVisitor = visitor as IMarkdownPreprocessorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListContext list() {
		ListContext _localctx = new ListContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 104;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					State = 104;
					switch (_input.La(1)) {
					case ASTERISK:
					case DIGIT:
						{
						State = 98; listItem();
						State = 99; carriageReturn();
						}
						break;
					case TAB:
					case SPACE:
						{
						State = 101; indentedText();
						State = 102; carriageReturn();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 106;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,5,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListItemContext : ParserRuleContext {
		public TextContext text() {
			return GetRuleContext<TextContext>(0);
		}
		public ListItemIndicatorContext[] listItemIndicator() {
			return GetRuleContexts<ListItemIndicatorContext>();
		}
		public ListItemIndicatorContext listItemIndicator(int i) {
			return GetRuleContext<ListItemIndicatorContext>(i);
		}
		public WhitespaceContext[] whitespace() {
			return GetRuleContexts<WhitespaceContext>();
		}
		public WhitespaceContext whitespace(int i) {
			return GetRuleContext<WhitespaceContext>(i);
		}
		public ListItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_listItem; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.EnterListItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.ExitListItem(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownPreprocessorVisitor<TResult> typedVisitor = visitor as IMarkdownPreprocessorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListItem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListItemContext listItem() {
		ListItemContext _localctx = new ListItemContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_listItem);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 112;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 108; listItemIndicator();
					State = 110;
					_la = _input.La(1);
					if (_la==TAB || _la==SPACE) {
						{
						State = 109; whitespace();
						}
					}

					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 114;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,7,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 116; text();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndentedTextContext : ParserRuleContext {
		public TextContext text() {
			return GetRuleContext<TextContext>(0);
		}
		public SpaceContext[] space() {
			return GetRuleContexts<SpaceContext>();
		}
		public SpaceContext space(int i) {
			return GetRuleContext<SpaceContext>(i);
		}
		public TabContext[] tab() {
			return GetRuleContexts<TabContext>();
		}
		public TabContext tab(int i) {
			return GetRuleContext<TabContext>(i);
		}
		public IndentedTextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indentedText; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.EnterIndentedText(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.ExitIndentedText(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownPreprocessorVisitor<TResult> typedVisitor = visitor as IMarkdownPreprocessorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndentedText(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndentedTextContext indentedText() {
		IndentedTextContext _localctx = new IndentedTextContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_indentedText);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 131;
			switch (_input.La(1)) {
			case TAB:
				{
				State = 119;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 118; tab();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 121;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,8,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;
			case SPACE:
				{
				State = 123; space();
				State = 124; space();
				State = 125; space();
				State = 127;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 126; space();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 129;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,9,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 137;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==TAB || _la==SPACE) {
				{
				State = 135;
				switch (_input.La(1)) {
				case TAB:
					{
					State = 133; tab();
					}
					break;
				case SPACE:
					{
					State = 134; space();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 139;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 140; text();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListItemIndicatorContext : ParserRuleContext {
		public ITerminalNode ASTERISK() { return GetToken(MarkdownPreprocessorParser.ASTERISK, 0); }
		public ITerminalNode PERIOD() { return GetToken(MarkdownPreprocessorParser.PERIOD, 0); }
		public ITerminalNode[] DIGIT() { return GetTokens(MarkdownPreprocessorParser.DIGIT); }
		public ITerminalNode DIGIT(int i) {
			return GetToken(MarkdownPreprocessorParser.DIGIT, i);
		}
		public ListItemIndicatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_listItemIndicator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.EnterListItemIndicator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.ExitListItemIndicator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownPreprocessorVisitor<TResult> typedVisitor = visitor as IMarkdownPreprocessorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListItemIndicator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListItemIndicatorContext listItemIndicator() {
		ListItemIndicatorContext _localctx = new ListItemIndicatorContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_listItemIndicator);
		int _la;
		try {
			State = 149;
			switch (_input.La(1)) {
			case ASTERISK:
				EnterOuterAlt(_localctx, 1);
				{
				State = 142; Match(ASTERISK);
				}
				break;
			case DIGIT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 144;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 143; Match(DIGIT);
					}
					}
					State = 146;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==DIGIT );
				State = 148; Match(PERIOD);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockquoteContext : ParserRuleContext {
		public BlockquoteItemContext[] blockquoteItem() {
			return GetRuleContexts<BlockquoteItemContext>();
		}
		public BlockquoteItemContext blockquoteItem(int i) {
			return GetRuleContext<BlockquoteItemContext>(i);
		}
		public CarriageReturnContext[] carriageReturn() {
			return GetRuleContexts<CarriageReturnContext>();
		}
		public CarriageReturnContext carriageReturn(int i) {
			return GetRuleContext<CarriageReturnContext>(i);
		}
		public IndentedTextContext[] indentedText() {
			return GetRuleContexts<IndentedTextContext>();
		}
		public IndentedTextContext indentedText(int i) {
			return GetRuleContext<IndentedTextContext>(i);
		}
		public BlockquoteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockquote; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.EnterBlockquote(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.ExitBlockquote(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownPreprocessorVisitor<TResult> typedVisitor = visitor as IMarkdownPreprocessorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockquote(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockquoteContext blockquote() {
		BlockquoteContext _localctx = new BlockquoteContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_blockquote);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 157;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					State = 157;
					switch (_input.La(1)) {
					case GREATER_THAN:
						{
						State = 151; blockquoteItem();
						State = 152; carriageReturn();
						}
						break;
					case TAB:
					case SPACE:
						{
						State = 154; indentedText();
						State = 155; carriageReturn();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 159;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,16,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockquoteItemContext : ParserRuleContext {
		public BlockQuoteElementContext blockQuoteElement() {
			return GetRuleContext<BlockQuoteElementContext>(0);
		}
		public BlockquoteIndicatorContext[] blockquoteIndicator() {
			return GetRuleContexts<BlockquoteIndicatorContext>();
		}
		public BlockquoteIndicatorContext blockquoteIndicator(int i) {
			return GetRuleContext<BlockquoteIndicatorContext>(i);
		}
		public WhitespaceContext[] whitespace() {
			return GetRuleContexts<WhitespaceContext>();
		}
		public WhitespaceContext whitespace(int i) {
			return GetRuleContext<WhitespaceContext>(i);
		}
		public BlockquoteItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockquoteItem; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.EnterBlockquoteItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.ExitBlockquoteItem(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownPreprocessorVisitor<TResult> typedVisitor = visitor as IMarkdownPreprocessorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockquoteItem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockquoteItemContext blockquoteItem() {
		BlockquoteItemContext _localctx = new BlockquoteItemContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_blockquoteItem);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 165;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 161; blockquoteIndicator();
				State = 163;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,17,_ctx) ) {
				case 1:
					{
					State = 162; whitespace();
					}
					break;
				}
				}
				}
				State = 167;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==GREATER_THAN );
			State = 169; blockQuoteElement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockQuoteElementContext : ParserRuleContext {
		public HeadingContext heading() {
			return GetRuleContext<HeadingContext>(0);
		}
		public BlockQuoteListItemContext blockQuoteListItem() {
			return GetRuleContext<BlockQuoteListItemContext>(0);
		}
		public TextLineContext textLine() {
			return GetRuleContext<TextLineContext>(0);
		}
		public BlockQuoteElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockQuoteElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.EnterBlockQuoteElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.ExitBlockQuoteElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownPreprocessorVisitor<TResult> typedVisitor = visitor as IMarkdownPreprocessorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockQuoteElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockQuoteElementContext blockQuoteElement() {
		BlockQuoteElementContext _localctx = new BlockQuoteElementContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_blockQuoteElement);
		try {
			State = 174;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,19,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 171; heading();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 172; blockQuoteListItem();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 173; textLine();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockQuoteListItemContext : ParserRuleContext {
		public TextContext text() {
			return GetRuleContext<TextContext>(0);
		}
		public ListItemIndicatorContext[] listItemIndicator() {
			return GetRuleContexts<ListItemIndicatorContext>();
		}
		public ListItemIndicatorContext listItemIndicator(int i) {
			return GetRuleContext<ListItemIndicatorContext>(i);
		}
		public WhitespaceContext[] whitespace() {
			return GetRuleContexts<WhitespaceContext>();
		}
		public WhitespaceContext whitespace(int i) {
			return GetRuleContext<WhitespaceContext>(i);
		}
		public BlockQuoteListItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockQuoteListItem; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.EnterBlockQuoteListItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.ExitBlockQuoteListItem(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownPreprocessorVisitor<TResult> typedVisitor = visitor as IMarkdownPreprocessorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockQuoteListItem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockQuoteListItemContext blockQuoteListItem() {
		BlockQuoteListItemContext _localctx = new BlockQuoteListItemContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_blockQuoteListItem);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 180;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 176; listItemIndicator();
					State = 178;
					_la = _input.La(1);
					if (_la==TAB || _la==SPACE) {
						{
						State = 177; whitespace();
						}
					}

					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 182;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,21,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 184; text();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockquoteIndicatorContext : ParserRuleContext {
		public ITerminalNode GREATER_THAN() { return GetToken(MarkdownPreprocessorParser.GREATER_THAN, 0); }
		public BlockquoteIndicatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockquoteIndicator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.EnterBlockquoteIndicator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.ExitBlockquoteIndicator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownPreprocessorVisitor<TResult> typedVisitor = visitor as IMarkdownPreprocessorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockquoteIndicator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockquoteIndicatorContext blockquoteIndicator() {
		BlockquoteIndicatorContext _localctx = new BlockquoteIndicatorContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_blockquoteIndicator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 186; Match(GREATER_THAN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HeadingContext : ParserRuleContext {
		public WhitespaceContext whitespace() {
			return GetRuleContext<WhitespaceContext>(0);
		}
		public TextContext text() {
			return GetRuleContext<TextContext>(0);
		}
		public HeadingIndicatorContext[] headingIndicator() {
			return GetRuleContexts<HeadingIndicatorContext>();
		}
		public HeadingIndicatorContext headingIndicator(int i) {
			return GetRuleContext<HeadingIndicatorContext>(i);
		}
		public HeadingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_heading; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.EnterHeading(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.ExitHeading(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownPreprocessorVisitor<TResult> typedVisitor = visitor as IMarkdownPreprocessorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHeading(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HeadingContext heading() {
		HeadingContext _localctx = new HeadingContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_heading);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 189;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 188; headingIndicator();
				}
				}
				State = 191;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==HASH );
			State = 193; whitespace();
			State = 194; text();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HeadingIndicatorContext : ParserRuleContext {
		public ITerminalNode HASH() { return GetToken(MarkdownPreprocessorParser.HASH, 0); }
		public HeadingIndicatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_headingIndicator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.EnterHeadingIndicator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.ExitHeadingIndicator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownPreprocessorVisitor<TResult> typedVisitor = visitor as IMarkdownPreprocessorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHeadingIndicator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HeadingIndicatorContext headingIndicator() {
		HeadingIndicatorContext _localctx = new HeadingIndicatorContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_headingIndicator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 196; Match(HASH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TextLineContext : ParserRuleContext {
		public TextContext text() {
			return GetRuleContext<TextContext>(0);
		}
		public WhitespaceContext[] whitespace() {
			return GetRuleContexts<WhitespaceContext>();
		}
		public WhitespaceContext whitespace(int i) {
			return GetRuleContext<WhitespaceContext>(i);
		}
		public TextLineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_textLine; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.EnterTextLine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.ExitTextLine(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownPreprocessorVisitor<TResult> typedVisitor = visitor as IMarkdownPreprocessorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTextLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TextLineContext textLine() {
		TextLineContext _localctx = new TextLineContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_textLine);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 201;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==TAB || _la==SPACE) {
				{
				{
				State = 198; whitespace();
				}
				}
				State = 203;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 204; text();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Paragraph_endContext : ParserRuleContext {
		public SoftCarriageReturnContext[] softCarriageReturn() {
			return GetRuleContexts<SoftCarriageReturnContext>();
		}
		public SoftCarriageReturnContext softCarriageReturn(int i) {
			return GetRuleContext<SoftCarriageReturnContext>(i);
		}
		public WhitespaceContext[] whitespace() {
			return GetRuleContexts<WhitespaceContext>();
		}
		public WhitespaceContext whitespace(int i) {
			return GetRuleContext<WhitespaceContext>(i);
		}
		public Paragraph_endContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_paragraph_end; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.EnterParagraph_end(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.ExitParagraph_end(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownPreprocessorVisitor<TResult> typedVisitor = visitor as IMarkdownPreprocessorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParagraph_end(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Paragraph_endContext paragraph_end() {
		Paragraph_endContext _localctx = new Paragraph_endContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_paragraph_end);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 213;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 209;
					_errHandler.Sync(this);
					_la = _input.La(1);
					while (_la==TAB || _la==SPACE) {
						{
						{
						State = 206; whitespace();
						}
						}
						State = 211;
						_errHandler.Sync(this);
						_la = _input.La(1);
					}
					State = 212; softCarriageReturn();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 215;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,25,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TextContext : ParserRuleContext {
		public NonWhitespaceContext[] nonWhitespace() {
			return GetRuleContexts<NonWhitespaceContext>();
		}
		public NonWhitespaceContext nonWhitespace(int i) {
			return GetRuleContext<NonWhitespaceContext>(i);
		}
		public WhitespaceContext[] whitespace() {
			return GetRuleContexts<WhitespaceContext>();
		}
		public WhitespaceContext whitespace(int i) {
			return GetRuleContext<WhitespaceContext>(i);
		}
		public ITerminalNode[] HASH() { return GetTokens(MarkdownPreprocessorParser.HASH); }
		public ITerminalNode HASH(int i) {
			return GetToken(MarkdownPreprocessorParser.HASH, i);
		}
		public ITerminalNode[] ASTERISK() { return GetTokens(MarkdownPreprocessorParser.ASTERISK); }
		public ITerminalNode ASTERISK(int i) {
			return GetToken(MarkdownPreprocessorParser.ASTERISK, i);
		}
		public ITerminalNode[] LESS_THAN() { return GetTokens(MarkdownPreprocessorParser.LESS_THAN); }
		public ITerminalNode LESS_THAN(int i) {
			return GetToken(MarkdownPreprocessorParser.LESS_THAN, i);
		}
		public ITerminalNode[] SLASH() { return GetTokens(MarkdownPreprocessorParser.SLASH); }
		public ITerminalNode SLASH(int i) {
			return GetToken(MarkdownPreprocessorParser.SLASH, i);
		}
		public ITerminalNode[] PERIOD() { return GetTokens(MarkdownPreprocessorParser.PERIOD); }
		public ITerminalNode PERIOD(int i) {
			return GetToken(MarkdownPreprocessorParser.PERIOD, i);
		}
		public OpenTagContext openTag() {
			return GetRuleContext<OpenTagContext>(0);
		}
		public TextLineContext[] textLine() {
			return GetRuleContexts<TextLineContext>();
		}
		public TextLineContext textLine(int i) {
			return GetRuleContext<TextLineContext>(i);
		}
		public CloseTagContext closeTag() {
			return GetRuleContext<CloseTagContext>(0);
		}
		public TextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_text; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.EnterText(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.ExitText(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownPreprocessorVisitor<TResult> typedVisitor = visitor as IMarkdownPreprocessorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitText(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TextContext text() {
		TextContext _localctx = new TextContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_text);
		try {
			int _alt;
			State = 248;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,31,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 218;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 217; nonWhitespace();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 220;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,26,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				State = 231;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,28,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						State = 229;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,27,_ctx) ) {
						case 1:
							{
							State = 222; whitespace();
							}
							break;

						case 2:
							{
							State = 223; nonWhitespace();
							}
							break;

						case 3:
							{
							State = 224; Match(HASH);
							}
							break;

						case 4:
							{
							State = 225; Match(ASTERISK);
							}
							break;

						case 5:
							{
							State = 226; Match(LESS_THAN);
							}
							break;

						case 6:
							{
							State = 227; Match(SLASH);
							}
							break;

						case 7:
							{
							State = 228; Match(PERIOD);
							}
							break;
						}
						} 
					}
					State = 233;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,28,_ctx);
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 234; openTag();
				State = 238;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,29,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 235; textLine();
						}
						} 
					}
					State = 240;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,29,_ctx);
				}
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 241; closeTag();
				State = 245;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,30,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 242; textLine();
						}
						} 
					}
					State = 247;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,30,_ctx);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeContentContext : ParserRuleContext {
		public WhitespaceContext[] whitespace() {
			return GetRuleContexts<WhitespaceContext>();
		}
		public WhitespaceContext whitespace(int i) {
			return GetRuleContext<WhitespaceContext>(i);
		}
		public AnyNonWhitespaceContext[] anyNonWhitespace() {
			return GetRuleContexts<AnyNonWhitespaceContext>();
		}
		public AnyNonWhitespaceContext anyNonWhitespace(int i) {
			return GetRuleContext<AnyNonWhitespaceContext>(i);
		}
		public ITerminalNode[] CARRIAGE_RETURN() { return GetTokens(MarkdownPreprocessorParser.CARRIAGE_RETURN); }
		public ITerminalNode CARRIAGE_RETURN(int i) {
			return GetToken(MarkdownPreprocessorParser.CARRIAGE_RETURN, i);
		}
		public AttributeContentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributeContent; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.EnterAttributeContent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.ExitAttributeContent(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownPreprocessorVisitor<TResult> typedVisitor = visitor as IMarkdownPreprocessorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttributeContent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeContentContext attributeContent() {
		AttributeContentContext _localctx = new AttributeContentContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_attributeContent);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 255;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DOUBLE_QUOTE) | (1L << SINGLE_QUOTE) | (1L << ASTERISK) | (1L << HASH) | (1L << PERIOD) | (1L << COLON) | (1L << UNDERBAR) | (1L << DASH) | (1L << DIGIT) | (1L << LETTER) | (1L << PUNCTUATION) | (1L << TAB) | (1L << EQUAL) | (1L << SPACE) | (1L << LESS_THAN) | (1L << GREATER_THAN) | (1L << SLASH) | (1L << CARRIAGE_RETURN) | (1L << NON_WHITESPACE))) != 0)) {
				{
				State = 253;
				switch (_input.La(1)) {
				case TAB:
				case SPACE:
					{
					State = 250; whitespace();
					}
					break;
				case DOUBLE_QUOTE:
				case SINGLE_QUOTE:
				case ASTERISK:
				case HASH:
				case PERIOD:
				case COLON:
				case UNDERBAR:
				case DASH:
				case DIGIT:
				case LETTER:
				case PUNCTUATION:
				case EQUAL:
				case LESS_THAN:
				case GREATER_THAN:
				case SLASH:
				case NON_WHITESPACE:
					{
					State = 251; anyNonWhitespace();
					}
					break;
				case CARRIAGE_RETURN:
					{
					State = 252; Match(CARRIAGE_RETURN);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 257;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeValueContext : ParserRuleContext {
		public ITerminalNode[] DOUBLE_QUOTE() { return GetTokens(MarkdownPreprocessorParser.DOUBLE_QUOTE); }
		public ITerminalNode DOUBLE_QUOTE(int i) {
			return GetToken(MarkdownPreprocessorParser.DOUBLE_QUOTE, i);
		}
		public WhitespaceContext[] whitespace() {
			return GetRuleContexts<WhitespaceContext>();
		}
		public WhitespaceContext whitespace(int i) {
			return GetRuleContext<WhitespaceContext>(i);
		}
		public AnyNonWhitespaceContext[] anyNonWhitespace() {
			return GetRuleContexts<AnyNonWhitespaceContext>();
		}
		public AnyNonWhitespaceContext anyNonWhitespace(int i) {
			return GetRuleContext<AnyNonWhitespaceContext>(i);
		}
		public ITerminalNode[] SINGLE_QUOTE() { return GetTokens(MarkdownPreprocessorParser.SINGLE_QUOTE); }
		public ITerminalNode SINGLE_QUOTE(int i) {
			return GetToken(MarkdownPreprocessorParser.SINGLE_QUOTE, i);
		}
		public AttributeValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributeValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.EnterAttributeValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.ExitAttributeValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownPreprocessorVisitor<TResult> typedVisitor = visitor as IMarkdownPreprocessorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttributeValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeValueContext attributeValue() {
		AttributeValueContext _localctx = new AttributeValueContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_attributeValue);
		try {
			int _alt;
			State = 276;
			switch (_input.La(1)) {
			case DOUBLE_QUOTE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 258; Match(DOUBLE_QUOTE);
				State = 263;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,35,_ctx);
				while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1+1 ) {
						{
						State = 261;
						switch (_input.La(1)) {
						case TAB:
						case SPACE:
							{
							State = 259; whitespace();
							}
							break;
						case DOUBLE_QUOTE:
						case SINGLE_QUOTE:
						case ASTERISK:
						case HASH:
						case PERIOD:
						case COLON:
						case UNDERBAR:
						case DASH:
						case DIGIT:
						case LETTER:
						case PUNCTUATION:
						case EQUAL:
						case LESS_THAN:
						case GREATER_THAN:
						case SLASH:
						case NON_WHITESPACE:
							{
							State = 260; anyNonWhitespace();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						} 
					}
					State = 265;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,35,_ctx);
				}
				State = 266; Match(DOUBLE_QUOTE);
				}
				break;
			case SINGLE_QUOTE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 267; Match(SINGLE_QUOTE);
				State = 272;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,37,_ctx);
				while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1+1 ) {
						{
						State = 270;
						switch (_input.La(1)) {
						case TAB:
						case SPACE:
							{
							State = 268; whitespace();
							}
							break;
						case DOUBLE_QUOTE:
						case SINGLE_QUOTE:
						case ASTERISK:
						case HASH:
						case PERIOD:
						case COLON:
						case UNDERBAR:
						case DASH:
						case DIGIT:
						case LETTER:
						case PUNCTUATION:
						case EQUAL:
						case LESS_THAN:
						case GREATER_THAN:
						case SLASH:
						case NON_WHITESPACE:
							{
							State = 269; anyNonWhitespace();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						} 
					}
					State = 274;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,37,_ctx);
				}
				State = 275; Match(SINGLE_QUOTE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeNameContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AttributeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributeName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.EnterAttributeName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.ExitAttributeName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownPreprocessorVisitor<TResult> typedVisitor = visitor as IMarkdownPreprocessorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttributeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeNameContext attributeName() {
		AttributeNameContext _localctx = new AttributeNameContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_attributeName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 278; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeContext : ParserRuleContext {
		public AttributeNameContext attributeName() {
			return GetRuleContext<AttributeNameContext>(0);
		}
		public ITerminalNode EQUAL() { return GetToken(MarkdownPreprocessorParser.EQUAL, 0); }
		public AttributeValueContext attributeValue() {
			return GetRuleContext<AttributeValueContext>(0);
		}
		public AnyWhitespaceContext[] anyWhitespace() {
			return GetRuleContexts<AnyWhitespaceContext>();
		}
		public AnyWhitespaceContext anyWhitespace(int i) {
			return GetRuleContext<AnyWhitespaceContext>(i);
		}
		public AttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.EnterAttribute(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.ExitAttribute(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownPreprocessorVisitor<TResult> typedVisitor = visitor as IMarkdownPreprocessorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeContext attribute() {
		AttributeContext _localctx = new AttributeContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_attribute);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 283;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TAB) | (1L << SPACE) | (1L << CARRIAGE_RETURN))) != 0)) {
				{
				{
				State = 280; anyWhitespace();
				}
				}
				State = 285;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 286; attributeName();
			State = 290;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TAB) | (1L << SPACE) | (1L << CARRIAGE_RETURN))) != 0)) {
				{
				{
				State = 287; anyWhitespace();
				}
				}
				State = 292;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 293; Match(EQUAL);
			State = 297;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TAB) | (1L << SPACE) | (1L << CARRIAGE_RETURN))) != 0)) {
				{
				{
				State = 294; anyWhitespace();
				}
				}
				State = 299;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 300; attributeValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TagContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public TagContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tag; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.EnterTag(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.ExitTag(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownPreprocessorVisitor<TResult> typedVisitor = visitor as IMarkdownPreprocessorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTag(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TagContext tag() {
		TagContext _localctx = new TagContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_tag);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 302; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpenTagContext : ParserRuleContext {
		public ITerminalNode LESS_THAN() { return GetToken(MarkdownPreprocessorParser.LESS_THAN, 0); }
		public TagContext tag() {
			return GetRuleContext<TagContext>(0);
		}
		public ITerminalNode GREATER_THAN() { return GetToken(MarkdownPreprocessorParser.GREATER_THAN, 0); }
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public AnyWhitespaceContext[] anyWhitespace() {
			return GetRuleContexts<AnyWhitespaceContext>();
		}
		public AnyWhitespaceContext anyWhitespace(int i) {
			return GetRuleContext<AnyWhitespaceContext>(i);
		}
		public ITerminalNode SLASH() { return GetToken(MarkdownPreprocessorParser.SLASH, 0); }
		public OpenTagContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_openTag; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.EnterOpenTag(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.ExitOpenTag(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownPreprocessorVisitor<TResult> typedVisitor = visitor as IMarkdownPreprocessorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpenTag(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpenTagContext openTag() {
		OpenTagContext _localctx = new OpenTagContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_openTag);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 304; Match(LESS_THAN);
			State = 305; tag();
			State = 309;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,42,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 306; attribute();
					}
					} 
				}
				State = 311;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,42,_ctx);
			}
			State = 315;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TAB) | (1L << SPACE) | (1L << CARRIAGE_RETURN))) != 0)) {
				{
				{
				State = 312; anyWhitespace();
				}
				}
				State = 317;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 319;
			_la = _input.La(1);
			if (_la==SLASH) {
				{
				State = 318; Match(SLASH);
				}
			}

			State = 321; Match(GREATER_THAN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CloseTagContext : ParserRuleContext {
		public ITerminalNode LESS_THAN() { return GetToken(MarkdownPreprocessorParser.LESS_THAN, 0); }
		public ITerminalNode SLASH() { return GetToken(MarkdownPreprocessorParser.SLASH, 0); }
		public TagContext tag() {
			return GetRuleContext<TagContext>(0);
		}
		public ITerminalNode GREATER_THAN() { return GetToken(MarkdownPreprocessorParser.GREATER_THAN, 0); }
		public AnyWhitespaceContext[] anyWhitespace() {
			return GetRuleContexts<AnyWhitespaceContext>();
		}
		public AnyWhitespaceContext anyWhitespace(int i) {
			return GetRuleContext<AnyWhitespaceContext>(i);
		}
		public CloseTagContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_closeTag; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.EnterCloseTag(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.ExitCloseTag(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownPreprocessorVisitor<TResult> typedVisitor = visitor as IMarkdownPreprocessorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCloseTag(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CloseTagContext closeTag() {
		CloseTagContext _localctx = new CloseTagContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_closeTag);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 323; Match(LESS_THAN);
			State = 324; Match(SLASH);
			State = 325; tag();
			State = 329;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TAB) | (1L << SPACE) | (1L << CARRIAGE_RETURN))) != 0)) {
				{
				{
				State = 326; anyWhitespace();
				}
				}
				State = 331;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 332; Match(GREATER_THAN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public ITerminalNode[] LETTER() { return GetTokens(MarkdownPreprocessorParser.LETTER); }
		public ITerminalNode LETTER(int i) {
			return GetToken(MarkdownPreprocessorParser.LETTER, i);
		}
		public ITerminalNode[] COLON() { return GetTokens(MarkdownPreprocessorParser.COLON); }
		public ITerminalNode COLON(int i) {
			return GetToken(MarkdownPreprocessorParser.COLON, i);
		}
		public ITerminalNode[] DIGIT() { return GetTokens(MarkdownPreprocessorParser.DIGIT); }
		public ITerminalNode DIGIT(int i) {
			return GetToken(MarkdownPreprocessorParser.DIGIT, i);
		}
		public ITerminalNode[] UNDERBAR() { return GetTokens(MarkdownPreprocessorParser.UNDERBAR); }
		public ITerminalNode UNDERBAR(int i) {
			return GetToken(MarkdownPreprocessorParser.UNDERBAR, i);
		}
		public ITerminalNode[] DASH() { return GetTokens(MarkdownPreprocessorParser.DASH); }
		public ITerminalNode DASH(int i) {
			return GetToken(MarkdownPreprocessorParser.DASH, i);
		}
		public ITerminalNode[] PERIOD() { return GetTokens(MarkdownPreprocessorParser.PERIOD); }
		public ITerminalNode PERIOD(int i) {
			return GetToken(MarkdownPreprocessorParser.PERIOD, i);
		}
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownPreprocessorVisitor<TResult> typedVisitor = visitor as IMarkdownPreprocessorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(_ctx, State);
		EnterRule(_localctx, 52, RULE_identifier);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 335;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 334;
					_la = _input.La(1);
					if ( !(_la==COLON || _la==LETTER) ) {
					_errHandler.RecoverInline(this);
					} else {
						Consume();
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 337;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,46,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 342;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,47,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 339;
					_la = _input.La(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PERIOD) | (1L << COLON) | (1L << UNDERBAR) | (1L << DASH) | (1L << DIGIT) | (1L << LETTER))) != 0)) ) {
					_errHandler.RecoverInline(this);
					} else {
						Consume();
					}
					}
					} 
				}
				State = 344;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,47,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhitespaceContext : ParserRuleContext {
		public SpaceContext space() {
			return GetRuleContext<SpaceContext>(0);
		}
		public TabContext tab() {
			return GetRuleContext<TabContext>(0);
		}
		public WhitespaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whitespace; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.EnterWhitespace(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.ExitWhitespace(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownPreprocessorVisitor<TResult> typedVisitor = visitor as IMarkdownPreprocessorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhitespace(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhitespaceContext whitespace() {
		WhitespaceContext _localctx = new WhitespaceContext(_ctx, State);
		EnterRule(_localctx, 54, RULE_whitespace);
		try {
			State = 347;
			switch (_input.La(1)) {
			case SPACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 345; space();
				}
				break;
			case TAB:
				EnterOuterAlt(_localctx, 2);
				{
				State = 346; tab();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpaceContext : ParserRuleContext {
		public ITerminalNode SPACE() { return GetToken(MarkdownPreprocessorParser.SPACE, 0); }
		public SpaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_space; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.EnterSpace(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.ExitSpace(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownPreprocessorVisitor<TResult> typedVisitor = visitor as IMarkdownPreprocessorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpace(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpaceContext space() {
		SpaceContext _localctx = new SpaceContext(_ctx, State);
		EnterRule(_localctx, 56, RULE_space);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 349; Match(SPACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TabContext : ParserRuleContext {
		public ITerminalNode TAB() { return GetToken(MarkdownPreprocessorParser.TAB, 0); }
		public TabContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tab; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.EnterTab(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.ExitTab(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownPreprocessorVisitor<TResult> typedVisitor = visitor as IMarkdownPreprocessorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTab(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TabContext tab() {
		TabContext _localctx = new TabContext(_ctx, State);
		EnterRule(_localctx, 58, RULE_tab);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 351; Match(TAB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnyNonWhitespaceContext : ParserRuleContext {
		public NonWhitespaceContext nonWhitespace() {
			return GetRuleContext<NonWhitespaceContext>(0);
		}
		public ITerminalNode HASH() { return GetToken(MarkdownPreprocessorParser.HASH, 0); }
		public ITerminalNode ASTERISK() { return GetToken(MarkdownPreprocessorParser.ASTERISK, 0); }
		public ITerminalNode LESS_THAN() { return GetToken(MarkdownPreprocessorParser.LESS_THAN, 0); }
		public ITerminalNode GREATER_THAN() { return GetToken(MarkdownPreprocessorParser.GREATER_THAN, 0); }
		public ITerminalNode SLASH() { return GetToken(MarkdownPreprocessorParser.SLASH, 0); }
		public ITerminalNode PERIOD() { return GetToken(MarkdownPreprocessorParser.PERIOD, 0); }
		public AnyNonWhitespaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_anyNonWhitespace; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.EnterAnyNonWhitespace(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.ExitAnyNonWhitespace(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownPreprocessorVisitor<TResult> typedVisitor = visitor as IMarkdownPreprocessorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnyNonWhitespace(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnyNonWhitespaceContext anyNonWhitespace() {
		AnyNonWhitespaceContext _localctx = new AnyNonWhitespaceContext(_ctx, State);
		EnterRule(_localctx, 60, RULE_anyNonWhitespace);
		try {
			State = 360;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,49,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 353; nonWhitespace();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 354; Match(HASH);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 355; Match(ASTERISK);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 356; Match(LESS_THAN);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 357; Match(GREATER_THAN);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 358; Match(SLASH);
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 359; Match(PERIOD);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NonWhitespaceContext : ParserRuleContext {
		public ITerminalNode NON_WHITESPACE() { return GetToken(MarkdownPreprocessorParser.NON_WHITESPACE, 0); }
		public ITerminalNode PUNCTUATION() { return GetToken(MarkdownPreprocessorParser.PUNCTUATION, 0); }
		public ITerminalNode DIGIT() { return GetToken(MarkdownPreprocessorParser.DIGIT, 0); }
		public ITerminalNode LETTER() { return GetToken(MarkdownPreprocessorParser.LETTER, 0); }
		public ITerminalNode EQUAL() { return GetToken(MarkdownPreprocessorParser.EQUAL, 0); }
		public ITerminalNode DOUBLE_QUOTE() { return GetToken(MarkdownPreprocessorParser.DOUBLE_QUOTE, 0); }
		public ITerminalNode SINGLE_QUOTE() { return GetToken(MarkdownPreprocessorParser.SINGLE_QUOTE, 0); }
		public ITerminalNode COLON() { return GetToken(MarkdownPreprocessorParser.COLON, 0); }
		public ITerminalNode DASH() { return GetToken(MarkdownPreprocessorParser.DASH, 0); }
		public ITerminalNode UNDERBAR() { return GetToken(MarkdownPreprocessorParser.UNDERBAR, 0); }
		public ITerminalNode PERIOD() { return GetToken(MarkdownPreprocessorParser.PERIOD, 0); }
		public NonWhitespaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nonWhitespace; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.EnterNonWhitespace(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.ExitNonWhitespace(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownPreprocessorVisitor<TResult> typedVisitor = visitor as IMarkdownPreprocessorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNonWhitespace(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NonWhitespaceContext nonWhitespace() {
		NonWhitespaceContext _localctx = new NonWhitespaceContext(_ctx, State);
		EnterRule(_localctx, 62, RULE_nonWhitespace);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 362;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DOUBLE_QUOTE) | (1L << SINGLE_QUOTE) | (1L << PERIOD) | (1L << COLON) | (1L << UNDERBAR) | (1L << DASH) | (1L << DIGIT) | (1L << LETTER) | (1L << PUNCTUATION) | (1L << EQUAL) | (1L << NON_WHITESPACE))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnyWhitespaceContext : ParserRuleContext {
		public WhitespaceContext whitespace() {
			return GetRuleContext<WhitespaceContext>(0);
		}
		public ITerminalNode CARRIAGE_RETURN() { return GetToken(MarkdownPreprocessorParser.CARRIAGE_RETURN, 0); }
		public AnyWhitespaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_anyWhitespace; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.EnterAnyWhitespace(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.ExitAnyWhitespace(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownPreprocessorVisitor<TResult> typedVisitor = visitor as IMarkdownPreprocessorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnyWhitespace(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnyWhitespaceContext anyWhitespace() {
		AnyWhitespaceContext _localctx = new AnyWhitespaceContext(_ctx, State);
		EnterRule(_localctx, 64, RULE_anyWhitespace);
		try {
			State = 366;
			switch (_input.La(1)) {
			case TAB:
			case SPACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 364; whitespace();
				}
				break;
			case CARRIAGE_RETURN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 365; Match(CARRIAGE_RETURN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x15\x173\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x3\x2\a\x2\x46\n\x2\f\x2\xE\x2I\v\x2\x3\x2\x5\x2L\n\x2\x3"+
		"\x2\x3\x2\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x5\x3"+
		"Y\n\x3\x3\x4\x3\x4\x5\x4]\n\x4\x3\x5\x3\x5\x3\x6\x3\x6\x3\x6\x3\x6\x3"+
		"\a\x3\a\x3\a\x3\a\x3\a\x3\a\x6\ak\n\a\r\a\xE\al\x3\b\x3\b\x5\bq\n\b\x6"+
		"\bs\n\b\r\b\xE\bt\x3\b\x3\b\x3\t\x6\tz\n\t\r\t\xE\t{\x3\t\x3\t\x3\t\x3"+
		"\t\x6\t\x82\n\t\r\t\xE\t\x83\x5\t\x86\n\t\x3\t\x3\t\a\t\x8A\n\t\f\t\xE"+
		"\t\x8D\v\t\x3\t\x3\t\x3\n\x3\n\x6\n\x93\n\n\r\n\xE\n\x94\x3\n\x5\n\x98"+
		"\n\n\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x6\v\xA0\n\v\r\v\xE\v\xA1\x3\f\x3\f"+
		"\x5\f\xA6\n\f\x6\f\xA8\n\f\r\f\xE\f\xA9\x3\f\x3\f\x3\r\x3\r\x3\r\x5\r"+
		"\xB1\n\r\x3\xE\x3\xE\x5\xE\xB5\n\xE\x6\xE\xB7\n\xE\r\xE\xE\xE\xB8\x3\xE"+
		"\x3\xE\x3\xF\x3\xF\x3\x10\x6\x10\xC0\n\x10\r\x10\xE\x10\xC1\x3\x10\x3"+
		"\x10\x3\x10\x3\x11\x3\x11\x3\x12\a\x12\xCA\n\x12\f\x12\xE\x12\xCD\v\x12"+
		"\x3\x12\x3\x12\x3\x13\a\x13\xD2\n\x13\f\x13\xE\x13\xD5\v\x13\x3\x13\x6"+
		"\x13\xD8\n\x13\r\x13\xE\x13\xD9\x3\x14\x6\x14\xDD\n\x14\r\x14\xE\x14\xDE"+
		"\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\a\x14\xE8\n\x14\f\x14"+
		"\xE\x14\xEB\v\x14\x3\x14\x3\x14\a\x14\xEF\n\x14\f\x14\xE\x14\xF2\v\x14"+
		"\x3\x14\x3\x14\a\x14\xF6\n\x14\f\x14\xE\x14\xF9\v\x14\x5\x14\xFB\n\x14"+
		"\x3\x15\x3\x15\x3\x15\a\x15\x100\n\x15\f\x15\xE\x15\x103\v\x15\x3\x16"+
		"\x3\x16\x3\x16\a\x16\x108\n\x16\f\x16\xE\x16\x10B\v\x16\x3\x16\x3\x16"+
		"\x3\x16\x3\x16\a\x16\x111\n\x16\f\x16\xE\x16\x114\v\x16\x3\x16\x5\x16"+
		"\x117\n\x16\x3\x17\x3\x17\x3\x18\a\x18\x11C\n\x18\f\x18\xE\x18\x11F\v"+
		"\x18\x3\x18\x3\x18\a\x18\x123\n\x18\f\x18\xE\x18\x126\v\x18\x3\x18\x3"+
		"\x18\a\x18\x12A\n\x18\f\x18\xE\x18\x12D\v\x18\x3\x18\x3\x18\x3\x19\x3"+
		"\x19\x3\x1A\x3\x1A\x3\x1A\a\x1A\x136\n\x1A\f\x1A\xE\x1A\x139\v\x1A\x3"+
		"\x1A\a\x1A\x13C\n\x1A\f\x1A\xE\x1A\x13F\v\x1A\x3\x1A\x5\x1A\x142\n\x1A"+
		"\x3\x1A\x3\x1A\x3\x1B\x3\x1B\x3\x1B\x3\x1B\a\x1B\x14A\n\x1B\f\x1B\xE\x1B"+
		"\x14D\v\x1B\x3\x1B\x3\x1B\x3\x1C\x6\x1C\x152\n\x1C\r\x1C\xE\x1C\x153\x3"+
		"\x1C\a\x1C\x157\n\x1C\f\x1C\xE\x1C\x15A\v\x1C\x3\x1D\x3\x1D\x5\x1D\x15E"+
		"\n\x1D\x3\x1E\x3\x1E\x3\x1F\x3\x1F\x3 \x3 \x3 \x3 \x3 \x3 \x3 \x5 \x16B"+
		"\n \x3!\x3!\x3\"\x3\"\x5\"\x171\n\"\x3\"\x4\x109\x112\x2\x2#\x2\x2\x4"+
		"\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A"+
		"\x2\x1C\x2\x1E\x2 \x2\"\x2$\x2&\x2(\x2*\x2,\x2.\x2\x30\x2\x32\x2\x34\x2"+
		"\x36\x2\x38\x2:\x2<\x2>\x2@\x2\x42\x2\x2\x5\x4\x2\b\b\f\f\x3\x2\a\f\x6"+
		"\x2\x3\x4\a\r\xF\xF\x15\x15\x194\x2G\x3\x2\x2\x2\x4X\x3\x2\x2\x2\x6\\"+
		"\x3\x2\x2\x2\b^\x3\x2\x2\x2\n`\x3\x2\x2\x2\fj\x3\x2\x2\x2\xEr\x3\x2\x2"+
		"\x2\x10\x85\x3\x2\x2\x2\x12\x97\x3\x2\x2\x2\x14\x9F\x3\x2\x2\x2\x16\xA7"+
		"\x3\x2\x2\x2\x18\xB0\x3\x2\x2\x2\x1A\xB6\x3\x2\x2\x2\x1C\xBC\x3\x2\x2"+
		"\x2\x1E\xBF\x3\x2\x2\x2 \xC6\x3\x2\x2\x2\"\xCB\x3\x2\x2\x2$\xD7\x3\x2"+
		"\x2\x2&\xFA\x3\x2\x2\x2(\x101\x3\x2\x2\x2*\x116\x3\x2\x2\x2,\x118\x3\x2"+
		"\x2\x2.\x11D\x3\x2\x2\x2\x30\x130\x3\x2\x2\x2\x32\x132\x3\x2\x2\x2\x34"+
		"\x145\x3\x2\x2\x2\x36\x151\x3\x2\x2\x2\x38\x15D\x3\x2\x2\x2:\x15F\x3\x2"+
		"\x2\x2<\x161\x3\x2\x2\x2>\x16A\x3\x2\x2\x2@\x16C\x3\x2\x2\x2\x42\x170"+
		"\x3\x2\x2\x2\x44\x46\x5\x4\x3\x2\x45\x44\x3\x2\x2\x2\x46I\x3\x2\x2\x2"+
		"G\x45\x3\x2\x2\x2GH\x3\x2\x2\x2HK\x3\x2\x2\x2IG\x3\x2\x2\x2JL\x5\"\x12"+
		"\x2KJ\x3\x2\x2\x2KL\x3\x2\x2\x2LM\x3\x2\x2\x2MN\a\x2\x2\x3N\x3\x3\x2\x2"+
		"\x2OP\x5\x1E\x10\x2PQ\x5\x6\x4\x2QY\x3\x2\x2\x2RY\x5\f\a\x2SY\x5\x14\v"+
		"\x2TU\x5\"\x12\x2UV\x5\x6\x4\x2VY\x3\x2\x2\x2WY\x5$\x13\x2XO\x3\x2\x2"+
		"\x2XR\x3\x2\x2\x2XS\x3\x2\x2\x2XT\x3\x2\x2\x2XW\x3\x2\x2\x2Y\x5\x3\x2"+
		"\x2\x2Z]\x5\b\x5\x2[]\x5\n\x6\x2\\Z\x3\x2\x2\x2\\[\x3\x2\x2\x2]\a\x3\x2"+
		"\x2\x2^_\a\x14\x2\x2_\t\x3\x2\x2\x2`\x61\x5:\x1E\x2\x61\x62\x5:\x1E\x2"+
		"\x62\x63\a\x14\x2\x2\x63\v\x3\x2\x2\x2\x64\x65\x5\xE\b\x2\x65\x66\x5\x6"+
		"\x4\x2\x66k\x3\x2\x2\x2gh\x5\x10\t\x2hi\x5\x6\x4\x2ik\x3\x2\x2\x2j\x64"+
		"\x3\x2\x2\x2jg\x3\x2\x2\x2kl\x3\x2\x2\x2lj\x3\x2\x2\x2lm\x3\x2\x2\x2m"+
		"\r\x3\x2\x2\x2np\x5\x12\n\x2oq\x5\x38\x1D\x2po\x3\x2\x2\x2pq\x3\x2\x2"+
		"\x2qs\x3\x2\x2\x2rn\x3\x2\x2\x2st\x3\x2\x2\x2tr\x3\x2\x2\x2tu\x3\x2\x2"+
		"\x2uv\x3\x2\x2\x2vw\x5&\x14\x2w\xF\x3\x2\x2\x2xz\x5<\x1F\x2yx\x3\x2\x2"+
		"\x2z{\x3\x2\x2\x2{y\x3\x2\x2\x2{|\x3\x2\x2\x2|\x86\x3\x2\x2\x2}~\x5:\x1E"+
		"\x2~\x7F\x5:\x1E\x2\x7F\x81\x5:\x1E\x2\x80\x82\x5:\x1E\x2\x81\x80\x3\x2"+
		"\x2\x2\x82\x83\x3\x2\x2\x2\x83\x81\x3\x2\x2\x2\x83\x84\x3\x2\x2\x2\x84"+
		"\x86\x3\x2\x2\x2\x85y\x3\x2\x2\x2\x85}\x3\x2\x2\x2\x86\x8B\x3\x2\x2\x2"+
		"\x87\x8A\x5<\x1F\x2\x88\x8A\x5:\x1E\x2\x89\x87\x3\x2\x2\x2\x89\x88\x3"+
		"\x2\x2\x2\x8A\x8D\x3\x2\x2\x2\x8B\x89\x3\x2\x2\x2\x8B\x8C\x3\x2\x2\x2"+
		"\x8C\x8E\x3\x2\x2\x2\x8D\x8B\x3\x2\x2\x2\x8E\x8F\x5&\x14\x2\x8F\x11\x3"+
		"\x2\x2\x2\x90\x98\a\x5\x2\x2\x91\x93\a\v\x2\x2\x92\x91\x3\x2\x2\x2\x93"+
		"\x94\x3\x2\x2\x2\x94\x92\x3\x2\x2\x2\x94\x95\x3\x2\x2\x2\x95\x96\x3\x2"+
		"\x2\x2\x96\x98\a\a\x2\x2\x97\x90\x3\x2\x2\x2\x97\x92\x3\x2\x2\x2\x98\x13"+
		"\x3\x2\x2\x2\x99\x9A\x5\x16\f\x2\x9A\x9B\x5\x6\x4\x2\x9B\xA0\x3\x2\x2"+
		"\x2\x9C\x9D\x5\x10\t\x2\x9D\x9E\x5\x6\x4\x2\x9E\xA0\x3\x2\x2\x2\x9F\x99"+
		"\x3\x2\x2\x2\x9F\x9C\x3\x2\x2\x2\xA0\xA1\x3\x2\x2\x2\xA1\x9F\x3\x2\x2"+
		"\x2\xA1\xA2\x3\x2\x2\x2\xA2\x15\x3\x2\x2\x2\xA3\xA5\x5\x1C\xF\x2\xA4\xA6"+
		"\x5\x38\x1D\x2\xA5\xA4\x3\x2\x2\x2\xA5\xA6\x3\x2\x2\x2\xA6\xA8\x3\x2\x2"+
		"\x2\xA7\xA3\x3\x2\x2\x2\xA8\xA9\x3\x2\x2\x2\xA9\xA7\x3\x2\x2\x2\xA9\xAA"+
		"\x3\x2\x2\x2\xAA\xAB\x3\x2\x2\x2\xAB\xAC\x5\x18\r\x2\xAC\x17\x3\x2\x2"+
		"\x2\xAD\xB1\x5\x1E\x10\x2\xAE\xB1\x5\x1A\xE\x2\xAF\xB1\x5\"\x12\x2\xB0"+
		"\xAD\x3\x2\x2\x2\xB0\xAE\x3\x2\x2\x2\xB0\xAF\x3\x2\x2\x2\xB1\x19\x3\x2"+
		"\x2\x2\xB2\xB4\x5\x12\n\x2\xB3\xB5\x5\x38\x1D\x2\xB4\xB3\x3\x2\x2\x2\xB4"+
		"\xB5\x3\x2\x2\x2\xB5\xB7\x3\x2\x2\x2\xB6\xB2\x3\x2\x2\x2\xB7\xB8\x3\x2"+
		"\x2\x2\xB8\xB6\x3\x2\x2\x2\xB8\xB9\x3\x2\x2\x2\xB9\xBA\x3\x2\x2\x2\xBA"+
		"\xBB\x5&\x14\x2\xBB\x1B\x3\x2\x2\x2\xBC\xBD\a\x12\x2\x2\xBD\x1D\x3\x2"+
		"\x2\x2\xBE\xC0\x5 \x11\x2\xBF\xBE\x3\x2\x2\x2\xC0\xC1\x3\x2\x2\x2\xC1"+
		"\xBF\x3\x2\x2\x2\xC1\xC2\x3\x2\x2\x2\xC2\xC3\x3\x2\x2\x2\xC3\xC4\x5\x38"+
		"\x1D\x2\xC4\xC5\x5&\x14\x2\xC5\x1F\x3\x2\x2\x2\xC6\xC7\a\x6\x2\x2\xC7"+
		"!\x3\x2\x2\x2\xC8\xCA\x5\x38\x1D\x2\xC9\xC8\x3\x2\x2\x2\xCA\xCD\x3\x2"+
		"\x2\x2\xCB\xC9\x3\x2\x2\x2\xCB\xCC\x3\x2\x2\x2\xCC\xCE\x3\x2\x2\x2\xCD"+
		"\xCB\x3\x2\x2\x2\xCE\xCF\x5&\x14\x2\xCF#\x3\x2\x2\x2\xD0\xD2\x5\x38\x1D"+
		"\x2\xD1\xD0\x3\x2\x2\x2\xD2\xD5\x3\x2\x2\x2\xD3\xD1\x3\x2\x2\x2\xD3\xD4"+
		"\x3\x2\x2\x2\xD4\xD6\x3\x2\x2\x2\xD5\xD3\x3\x2\x2\x2\xD6\xD8\x5\b\x5\x2"+
		"\xD7\xD3\x3\x2\x2\x2\xD8\xD9\x3\x2\x2\x2\xD9\xD7\x3\x2\x2\x2\xD9\xDA\x3"+
		"\x2\x2\x2\xDA%\x3\x2\x2\x2\xDB\xDD\x5@!\x2\xDC\xDB\x3\x2\x2\x2\xDD\xDE"+
		"\x3\x2\x2\x2\xDE\xDC\x3\x2\x2\x2\xDE\xDF\x3\x2\x2\x2\xDF\xE9\x3\x2\x2"+
		"\x2\xE0\xE8\x5\x38\x1D\x2\xE1\xE8\x5@!\x2\xE2\xE8\a\x6\x2\x2\xE3\xE8\a"+
		"\x5\x2\x2\xE4\xE8\a\x11\x2\x2\xE5\xE8\a\x13\x2\x2\xE6\xE8\a\a\x2\x2\xE7"+
		"\xE0\x3\x2\x2\x2\xE7\xE1\x3\x2\x2\x2\xE7\xE2\x3\x2\x2\x2\xE7\xE3\x3\x2"+
		"\x2\x2\xE7\xE4\x3\x2\x2\x2\xE7\xE5\x3\x2\x2\x2\xE7\xE6\x3\x2\x2\x2\xE8"+
		"\xEB\x3\x2\x2\x2\xE9\xE7\x3\x2\x2\x2\xE9\xEA\x3\x2\x2\x2\xEA\xFB\x3\x2"+
		"\x2\x2\xEB\xE9\x3\x2\x2\x2\xEC\xF0\x5\x32\x1A\x2\xED\xEF\x5\"\x12\x2\xEE"+
		"\xED\x3\x2\x2\x2\xEF\xF2\x3\x2\x2\x2\xF0\xEE\x3\x2\x2\x2\xF0\xF1\x3\x2"+
		"\x2\x2\xF1\xFB\x3\x2\x2\x2\xF2\xF0\x3\x2\x2\x2\xF3\xF7\x5\x34\x1B\x2\xF4"+
		"\xF6\x5\"\x12\x2\xF5\xF4\x3\x2\x2\x2\xF6\xF9\x3\x2\x2\x2\xF7\xF5\x3\x2"+
		"\x2\x2\xF7\xF8\x3\x2\x2\x2\xF8\xFB\x3\x2\x2\x2\xF9\xF7\x3\x2\x2\x2\xFA"+
		"\xDC\x3\x2\x2\x2\xFA\xEC\x3\x2\x2\x2\xFA\xF3\x3\x2\x2\x2\xFB\'\x3\x2\x2"+
		"\x2\xFC\x100\x5\x38\x1D\x2\xFD\x100\x5> \x2\xFE\x100\a\x14\x2\x2\xFF\xFC"+
		"\x3\x2\x2\x2\xFF\xFD\x3\x2\x2\x2\xFF\xFE\x3\x2\x2\x2\x100\x103\x3\x2\x2"+
		"\x2\x101\xFF\x3\x2\x2\x2\x101\x102\x3\x2\x2\x2\x102)\x3\x2\x2\x2\x103"+
		"\x101\x3\x2\x2\x2\x104\x109\a\x3\x2\x2\x105\x108\x5\x38\x1D\x2\x106\x108"+
		"\x5> \x2\x107\x105\x3\x2\x2\x2\x107\x106\x3\x2\x2\x2\x108\x10B\x3\x2\x2"+
		"\x2\x109\x10A\x3\x2\x2\x2\x109\x107\x3\x2\x2\x2\x10A\x10C\x3\x2\x2\x2"+
		"\x10B\x109\x3\x2\x2\x2\x10C\x117\a\x3\x2\x2\x10D\x112\a\x4\x2\x2\x10E"+
		"\x111\x5\x38\x1D\x2\x10F\x111\x5> \x2\x110\x10E\x3\x2\x2\x2\x110\x10F"+
		"\x3\x2\x2\x2\x111\x114\x3\x2\x2\x2\x112\x113\x3\x2\x2\x2\x112\x110\x3"+
		"\x2\x2\x2\x113\x115\x3\x2\x2\x2\x114\x112\x3\x2\x2\x2\x115\x117\a\x4\x2"+
		"\x2\x116\x104\x3\x2\x2\x2\x116\x10D\x3\x2\x2\x2\x117+\x3\x2\x2\x2\x118"+
		"\x119\x5\x36\x1C\x2\x119-\x3\x2\x2\x2\x11A\x11C\x5\x42\"\x2\x11B\x11A"+
		"\x3\x2\x2\x2\x11C\x11F\x3\x2\x2\x2\x11D\x11B\x3\x2\x2\x2\x11D\x11E\x3"+
		"\x2\x2\x2\x11E\x120\x3\x2\x2\x2\x11F\x11D\x3\x2\x2\x2\x120\x124\x5,\x17"+
		"\x2\x121\x123\x5\x42\"\x2\x122\x121\x3\x2\x2\x2\x123\x126\x3\x2\x2\x2"+
		"\x124\x122\x3\x2\x2\x2\x124\x125\x3\x2\x2\x2\x125\x127\x3\x2\x2\x2\x126"+
		"\x124\x3\x2\x2\x2\x127\x12B\a\xF\x2\x2\x128\x12A\x5\x42\"\x2\x129\x128"+
		"\x3\x2\x2\x2\x12A\x12D\x3\x2\x2\x2\x12B\x129\x3\x2\x2\x2\x12B\x12C\x3"+
		"\x2\x2\x2\x12C\x12E\x3\x2\x2\x2\x12D\x12B\x3\x2\x2\x2\x12E\x12F\x5*\x16"+
		"\x2\x12F/\x3\x2\x2\x2\x130\x131\x5\x36\x1C\x2\x131\x31\x3\x2\x2\x2\x132"+
		"\x133\a\x11\x2\x2\x133\x137\x5\x30\x19\x2\x134\x136\x5.\x18\x2\x135\x134"+
		"\x3\x2\x2\x2\x136\x139\x3\x2\x2\x2\x137\x135\x3\x2\x2\x2\x137\x138\x3"+
		"\x2\x2\x2\x138\x13D\x3\x2\x2\x2\x139\x137\x3\x2\x2\x2\x13A\x13C\x5\x42"+
		"\"\x2\x13B\x13A\x3\x2\x2\x2\x13C\x13F\x3\x2\x2\x2\x13D\x13B\x3\x2\x2\x2"+
		"\x13D\x13E\x3\x2\x2\x2\x13E\x141\x3\x2\x2\x2\x13F\x13D\x3\x2\x2\x2\x140"+
		"\x142\a\x13\x2\x2\x141\x140\x3\x2\x2\x2\x141\x142\x3\x2\x2\x2\x142\x143"+
		"\x3\x2\x2\x2\x143\x144\a\x12\x2\x2\x144\x33\x3\x2\x2\x2\x145\x146\a\x11"+
		"\x2\x2\x146\x147\a\x13\x2\x2\x147\x14B\x5\x30\x19\x2\x148\x14A\x5\x42"+
		"\"\x2\x149\x148\x3\x2\x2\x2\x14A\x14D\x3\x2\x2\x2\x14B\x149\x3\x2\x2\x2"+
		"\x14B\x14C\x3\x2\x2\x2\x14C\x14E\x3\x2\x2\x2\x14D\x14B\x3\x2\x2\x2\x14E"+
		"\x14F\a\x12\x2\x2\x14F\x35\x3\x2\x2\x2\x150\x152\t\x2\x2\x2\x151\x150"+
		"\x3\x2\x2\x2\x152\x153\x3\x2\x2\x2\x153\x151\x3\x2\x2\x2\x153\x154\x3"+
		"\x2\x2\x2\x154\x158\x3\x2\x2\x2\x155\x157\t\x3\x2\x2\x156\x155\x3\x2\x2"+
		"\x2\x157\x15A\x3\x2\x2\x2\x158\x156\x3\x2\x2\x2\x158\x159\x3\x2\x2\x2"+
		"\x159\x37\x3\x2\x2\x2\x15A\x158\x3\x2\x2\x2\x15B\x15E\x5:\x1E\x2\x15C"+
		"\x15E\x5<\x1F\x2\x15D\x15B\x3\x2\x2\x2\x15D\x15C\x3\x2\x2\x2\x15E\x39"+
		"\x3\x2\x2\x2\x15F\x160\a\x10\x2\x2\x160;\x3\x2\x2\x2\x161\x162\a\xE\x2"+
		"\x2\x162=\x3\x2\x2\x2\x163\x16B\x5@!\x2\x164\x16B\a\x6\x2\x2\x165\x16B"+
		"\a\x5\x2\x2\x166\x16B\a\x11\x2\x2\x167\x16B\a\x12\x2\x2\x168\x16B\a\x13"+
		"\x2\x2\x169\x16B\a\a\x2\x2\x16A\x163\x3\x2\x2\x2\x16A\x164\x3\x2\x2\x2"+
		"\x16A\x165\x3\x2\x2\x2\x16A\x166\x3\x2\x2\x2\x16A\x167\x3\x2\x2\x2\x16A"+
		"\x168\x3\x2\x2\x2\x16A\x169\x3\x2\x2\x2\x16B?\x3\x2\x2\x2\x16C\x16D\t"+
		"\x4\x2\x2\x16D\x41\x3\x2\x2\x2\x16E\x171\x5\x38\x1D\x2\x16F\x171\a\x14"+
		"\x2\x2\x170\x16E\x3\x2\x2\x2\x170\x16F\x3\x2\x2\x2\x171\x43\x3\x2\x2\x2"+
		"\x35GKX\\jlpt{\x83\x85\x89\x8B\x94\x97\x9F\xA1\xA5\xA9\xB0\xB4\xB8\xC1"+
		"\xCB\xD3\xD9\xDE\xE7\xE9\xF0\xF7\xFA\xFF\x101\x107\x109\x110\x112\x116"+
		"\x11D\x124\x12B\x137\x13D\x141\x14B\x153\x158\x15D\x16A\x170";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace TxMark.Compiler
