/*
 *  TxMark 1.0.0.alpha-5-g61bda79
 *
 *  Copyright (c) 2016 Aaron G. Daisley-Harrison
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.3-SNAPSHOT
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\v-adai\Documents\Visual Studio 2015\Projects\TxMark\TxMark.Antlr\MarkdownPreprocessor.g4 by ANTLR 4.5.3-SNAPSHOT

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace TxMark.Compiler {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.3-SNAPSHOT")]
[System.CLSCompliant(false)]
public partial class MarkdownPreprocessorParser : Parser {
	public const int
		DOUBLE_QUOTE=1, SINGLE_QUOTE=2, OPEN_PARENTHESIS=3, CLOSE_PARENTHESIS=4, 
		ASTERISK=5, HASH=6, PERIOD=7, COLON=8, UNDERBAR=9, DASH=10, DIGIT=11, 
		LETTER=12, PUNCTUATION=13, TAB=14, EQUAL=15, SPACE=16, LESS_THAN=17, GREATER_THAN=18, 
		SLASH=19, CARRIAGE_RETURN=20, NON_WHITESPACE=21;
	public const int
		RULE_document = 0, RULE_line = 1, RULE_carriageReturn = 2, RULE_softCarriageReturn = 3, 
		RULE_hardCarriageReturn = 4, RULE_list = 5, RULE_listItem = 6, RULE_indentedText = 7, 
		RULE_listItemIndicator = 8, RULE_blockquote = 9, RULE_blockquoteItem = 10, 
		RULE_blockQuoteElement = 11, RULE_blockQuoteListItem = 12, RULE_blockquoteIndicator = 13, 
		RULE_heading = 14, RULE_headingIndicator = 15, RULE_textLine = 16, RULE_paragraph_end = 17, 
		RULE_text = 18, RULE_safeText = 19, RULE_attributeContent = 20, RULE_attributeValue = 21, 
		RULE_attributeName = 22, RULE_attribute = 23, RULE_tag = 24, RULE_parenthesisClause = 25, 
		RULE_openTag = 26, RULE_closeTag = 27, RULE_identifier = 28, RULE_whitespace = 29, 
		RULE_space = 30, RULE_tab = 31, RULE_anyNonWhitespace = 32, RULE_nonWhitespace = 33, 
		RULE_anyWhitespace = 34;
	public static readonly string[] ruleNames = {
		"document", "line", "carriageReturn", "softCarriageReturn", "hardCarriageReturn", 
		"list", "listItem", "indentedText", "listItemIndicator", "blockquote", 
		"blockquoteItem", "blockQuoteElement", "blockQuoteListItem", "blockquoteIndicator", 
		"heading", "headingIndicator", "textLine", "paragraph_end", "text", "safeText", 
		"attributeContent", "attributeValue", "attributeName", "attribute", "tag", 
		"parenthesisClause", "openTag", "closeTag", "identifier", "whitespace", 
		"space", "tab", "anyNonWhitespace", "nonWhitespace", "anyWhitespace"
	};

	private static readonly string[] _LiteralNames = {
		null, "'\"'", "'''", "'('", "')'", "'*'", "'#'", "'.'", "':'", "'_'", 
		"'-'", null, null, null, "'\t'", "'='", "' '", "'<'", "'>'", "'/'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "DOUBLE_QUOTE", "SINGLE_QUOTE", "OPEN_PARENTHESIS", "CLOSE_PARENTHESIS", 
		"ASTERISK", "HASH", "PERIOD", "COLON", "UNDERBAR", "DASH", "DIGIT", "LETTER", 
		"PUNCTUATION", "TAB", "EQUAL", "SPACE", "LESS_THAN", "GREATER_THAN", "SLASH", 
		"CARRIAGE_RETURN", "NON_WHITESPACE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MarkdownPreprocessor.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public MarkdownPreprocessorParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class DocumentContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(MarkdownPreprocessorParser.Eof, 0); }
		public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public TextLineContext textLine() {
			return GetRuleContext<TextLineContext>(0);
		}
		public DocumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_document; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.EnterDocument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.ExitDocument(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownPreprocessorVisitor<TResult> typedVisitor = visitor as IMarkdownPreprocessorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDocument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DocumentContext document() {
		DocumentContext _localctx = new DocumentContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_document);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 73;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,0,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 70; line();
					}
					} 
				}
				State = 75;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,0,_ctx);
			}
			State = 77;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DOUBLE_QUOTE) | (1L << SINGLE_QUOTE) | (1L << OPEN_PARENTHESIS) | (1L << ASTERISK) | (1L << HASH) | (1L << PERIOD) | (1L << COLON) | (1L << UNDERBAR) | (1L << DASH) | (1L << DIGIT) | (1L << LETTER) | (1L << PUNCTUATION) | (1L << TAB) | (1L << EQUAL) | (1L << SPACE) | (1L << LESS_THAN) | (1L << SLASH) | (1L << NON_WHITESPACE))) != 0)) {
				{
				State = 76; textLine();
				}
			}

			State = 79; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineContext : ParserRuleContext {
		public HeadingContext heading() {
			return GetRuleContext<HeadingContext>(0);
		}
		public CarriageReturnContext carriageReturn() {
			return GetRuleContext<CarriageReturnContext>(0);
		}
		public ListContext list() {
			return GetRuleContext<ListContext>(0);
		}
		public BlockquoteContext blockquote() {
			return GetRuleContext<BlockquoteContext>(0);
		}
		public TextLineContext textLine() {
			return GetRuleContext<TextLineContext>(0);
		}
		public Paragraph_endContext paragraph_end() {
			return GetRuleContext<Paragraph_endContext>(0);
		}
		public LineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_line; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.EnterLine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.ExitLine(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownPreprocessorVisitor<TResult> typedVisitor = visitor as IMarkdownPreprocessorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineContext line() {
		LineContext _localctx = new LineContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_line);
		try {
			State = 90;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,2,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 81; heading();
				State = 82; carriageReturn();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 84; list();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 85; blockquote();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 86; textLine();
				State = 87; carriageReturn();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 89; paragraph_end();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CarriageReturnContext : ParserRuleContext {
		public SoftCarriageReturnContext softCarriageReturn() {
			return GetRuleContext<SoftCarriageReturnContext>(0);
		}
		public HardCarriageReturnContext hardCarriageReturn() {
			return GetRuleContext<HardCarriageReturnContext>(0);
		}
		public CarriageReturnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_carriageReturn; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.EnterCarriageReturn(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.ExitCarriageReturn(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownPreprocessorVisitor<TResult> typedVisitor = visitor as IMarkdownPreprocessorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCarriageReturn(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CarriageReturnContext carriageReturn() {
		CarriageReturnContext _localctx = new CarriageReturnContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_carriageReturn);
		try {
			State = 94;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,3,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 92; softCarriageReturn();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 93; hardCarriageReturn();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SoftCarriageReturnContext : ParserRuleContext {
		public ITerminalNode CARRIAGE_RETURN() { return GetToken(MarkdownPreprocessorParser.CARRIAGE_RETURN, 0); }
		public SpaceContext space() {
			return GetRuleContext<SpaceContext>(0);
		}
		public SoftCarriageReturnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_softCarriageReturn; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.EnterSoftCarriageReturn(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.ExitSoftCarriageReturn(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownPreprocessorVisitor<TResult> typedVisitor = visitor as IMarkdownPreprocessorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSoftCarriageReturn(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SoftCarriageReturnContext softCarriageReturn() {
		SoftCarriageReturnContext _localctx = new SoftCarriageReturnContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_softCarriageReturn);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 97;
			_la = _input.La(1);
			if (_la==SPACE) {
				{
				State = 96; space();
				}
			}

			State = 99; Match(CARRIAGE_RETURN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HardCarriageReturnContext : ParserRuleContext {
		public SpaceContext[] space() {
			return GetRuleContexts<SpaceContext>();
		}
		public SpaceContext space(int i) {
			return GetRuleContext<SpaceContext>(i);
		}
		public ITerminalNode CARRIAGE_RETURN() { return GetToken(MarkdownPreprocessorParser.CARRIAGE_RETURN, 0); }
		public HardCarriageReturnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hardCarriageReturn; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.EnterHardCarriageReturn(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.ExitHardCarriageReturn(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownPreprocessorVisitor<TResult> typedVisitor = visitor as IMarkdownPreprocessorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHardCarriageReturn(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HardCarriageReturnContext hardCarriageReturn() {
		HardCarriageReturnContext _localctx = new HardCarriageReturnContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_hardCarriageReturn);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 101; space();
			State = 102; space();
			State = 103; Match(CARRIAGE_RETURN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListContext : ParserRuleContext {
		public ListItemContext[] listItem() {
			return GetRuleContexts<ListItemContext>();
		}
		public ListItemContext listItem(int i) {
			return GetRuleContext<ListItemContext>(i);
		}
		public CarriageReturnContext[] carriageReturn() {
			return GetRuleContexts<CarriageReturnContext>();
		}
		public CarriageReturnContext carriageReturn(int i) {
			return GetRuleContext<CarriageReturnContext>(i);
		}
		public IndentedTextContext[] indentedText() {
			return GetRuleContexts<IndentedTextContext>();
		}
		public IndentedTextContext indentedText(int i) {
			return GetRuleContext<IndentedTextContext>(i);
		}
		public ListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.EnterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.ExitList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownPreprocessorVisitor<TResult> typedVisitor = visitor as IMarkdownPreprocessorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListContext list() {
		ListContext _localctx = new ListContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 111;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					State = 111;
					switch (_input.La(1)) {
					case ASTERISK:
					case DIGIT:
						{
						State = 105; listItem();
						State = 106; carriageReturn();
						}
						break;
					case TAB:
					case SPACE:
						{
						State = 108; indentedText();
						State = 109; carriageReturn();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 113;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,6,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListItemContext : ParserRuleContext {
		public TextContext text() {
			return GetRuleContext<TextContext>(0);
		}
		public ListItemIndicatorContext[] listItemIndicator() {
			return GetRuleContexts<ListItemIndicatorContext>();
		}
		public ListItemIndicatorContext listItemIndicator(int i) {
			return GetRuleContext<ListItemIndicatorContext>(i);
		}
		public WhitespaceContext[] whitespace() {
			return GetRuleContexts<WhitespaceContext>();
		}
		public WhitespaceContext whitespace(int i) {
			return GetRuleContext<WhitespaceContext>(i);
		}
		public ListItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_listItem; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.EnterListItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.ExitListItem(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownPreprocessorVisitor<TResult> typedVisitor = visitor as IMarkdownPreprocessorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListItem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListItemContext listItem() {
		ListItemContext _localctx = new ListItemContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_listItem);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 119;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 115; listItemIndicator();
					State = 117;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,7,_ctx) ) {
					case 1:
						{
						State = 116; whitespace();
						}
						break;
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 121;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,8,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 123; text();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndentedTextContext : ParserRuleContext {
		public TextContext text() {
			return GetRuleContext<TextContext>(0);
		}
		public SpaceContext[] space() {
			return GetRuleContexts<SpaceContext>();
		}
		public SpaceContext space(int i) {
			return GetRuleContext<SpaceContext>(i);
		}
		public TabContext[] tab() {
			return GetRuleContexts<TabContext>();
		}
		public TabContext tab(int i) {
			return GetRuleContext<TabContext>(i);
		}
		public IndentedTextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indentedText; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.EnterIndentedText(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.ExitIndentedText(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownPreprocessorVisitor<TResult> typedVisitor = visitor as IMarkdownPreprocessorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndentedText(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndentedTextContext indentedText() {
		IndentedTextContext _localctx = new IndentedTextContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_indentedText);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 138;
			switch (_input.La(1)) {
			case TAB:
				{
				State = 126;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 125; tab();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 128;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,9,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;
			case SPACE:
				{
				State = 130; space();
				State = 131; space();
				State = 132; space();
				State = 134;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 133; space();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 136;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,10,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 144;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,13,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					State = 142;
					switch (_input.La(1)) {
					case TAB:
						{
						State = 140; tab();
						}
						break;
					case SPACE:
						{
						State = 141; space();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				State = 146;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,13,_ctx);
			}
			State = 147; text();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListItemIndicatorContext : ParserRuleContext {
		public ITerminalNode ASTERISK() { return GetToken(MarkdownPreprocessorParser.ASTERISK, 0); }
		public ITerminalNode PERIOD() { return GetToken(MarkdownPreprocessorParser.PERIOD, 0); }
		public ITerminalNode[] DIGIT() { return GetTokens(MarkdownPreprocessorParser.DIGIT); }
		public ITerminalNode DIGIT(int i) {
			return GetToken(MarkdownPreprocessorParser.DIGIT, i);
		}
		public ListItemIndicatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_listItemIndicator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.EnterListItemIndicator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.ExitListItemIndicator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownPreprocessorVisitor<TResult> typedVisitor = visitor as IMarkdownPreprocessorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListItemIndicator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListItemIndicatorContext listItemIndicator() {
		ListItemIndicatorContext _localctx = new ListItemIndicatorContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_listItemIndicator);
		int _la;
		try {
			State = 156;
			switch (_input.La(1)) {
			case ASTERISK:
				EnterOuterAlt(_localctx, 1);
				{
				State = 149; Match(ASTERISK);
				}
				break;
			case DIGIT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 151;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 150; Match(DIGIT);
					}
					}
					State = 153;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==DIGIT );
				State = 155; Match(PERIOD);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockquoteContext : ParserRuleContext {
		public BlockquoteItemContext[] blockquoteItem() {
			return GetRuleContexts<BlockquoteItemContext>();
		}
		public BlockquoteItemContext blockquoteItem(int i) {
			return GetRuleContext<BlockquoteItemContext>(i);
		}
		public CarriageReturnContext[] carriageReturn() {
			return GetRuleContexts<CarriageReturnContext>();
		}
		public CarriageReturnContext carriageReturn(int i) {
			return GetRuleContext<CarriageReturnContext>(i);
		}
		public IndentedTextContext[] indentedText() {
			return GetRuleContexts<IndentedTextContext>();
		}
		public IndentedTextContext indentedText(int i) {
			return GetRuleContext<IndentedTextContext>(i);
		}
		public BlockquoteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockquote; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.EnterBlockquote(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.ExitBlockquote(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownPreprocessorVisitor<TResult> typedVisitor = visitor as IMarkdownPreprocessorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockquote(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockquoteContext blockquote() {
		BlockquoteContext _localctx = new BlockquoteContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_blockquote);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 164;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					State = 164;
					switch (_input.La(1)) {
					case GREATER_THAN:
						{
						State = 158; blockquoteItem();
						State = 159; carriageReturn();
						}
						break;
					case TAB:
					case SPACE:
						{
						State = 161; indentedText();
						State = 162; carriageReturn();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 166;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,17,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockquoteItemContext : ParserRuleContext {
		public BlockQuoteElementContext blockQuoteElement() {
			return GetRuleContext<BlockQuoteElementContext>(0);
		}
		public BlockquoteIndicatorContext[] blockquoteIndicator() {
			return GetRuleContexts<BlockquoteIndicatorContext>();
		}
		public BlockquoteIndicatorContext blockquoteIndicator(int i) {
			return GetRuleContext<BlockquoteIndicatorContext>(i);
		}
		public WhitespaceContext[] whitespace() {
			return GetRuleContexts<WhitespaceContext>();
		}
		public WhitespaceContext whitespace(int i) {
			return GetRuleContext<WhitespaceContext>(i);
		}
		public BlockquoteItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockquoteItem; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.EnterBlockquoteItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.ExitBlockquoteItem(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownPreprocessorVisitor<TResult> typedVisitor = visitor as IMarkdownPreprocessorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockquoteItem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockquoteItemContext blockquoteItem() {
		BlockquoteItemContext _localctx = new BlockquoteItemContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_blockquoteItem);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 172;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 168; blockquoteIndicator();
				State = 170;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,18,_ctx) ) {
				case 1:
					{
					State = 169; whitespace();
					}
					break;
				}
				}
				}
				State = 174;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==GREATER_THAN );
			State = 176; blockQuoteElement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockQuoteElementContext : ParserRuleContext {
		public HeadingContext heading() {
			return GetRuleContext<HeadingContext>(0);
		}
		public BlockQuoteListItemContext blockQuoteListItem() {
			return GetRuleContext<BlockQuoteListItemContext>(0);
		}
		public TextLineContext textLine() {
			return GetRuleContext<TextLineContext>(0);
		}
		public BlockQuoteElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockQuoteElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.EnterBlockQuoteElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.ExitBlockQuoteElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownPreprocessorVisitor<TResult> typedVisitor = visitor as IMarkdownPreprocessorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockQuoteElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockQuoteElementContext blockQuoteElement() {
		BlockQuoteElementContext _localctx = new BlockQuoteElementContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_blockQuoteElement);
		try {
			State = 181;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,20,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 178; heading();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 179; blockQuoteListItem();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 180; textLine();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockQuoteListItemContext : ParserRuleContext {
		public TextContext text() {
			return GetRuleContext<TextContext>(0);
		}
		public ListItemIndicatorContext[] listItemIndicator() {
			return GetRuleContexts<ListItemIndicatorContext>();
		}
		public ListItemIndicatorContext listItemIndicator(int i) {
			return GetRuleContext<ListItemIndicatorContext>(i);
		}
		public WhitespaceContext[] whitespace() {
			return GetRuleContexts<WhitespaceContext>();
		}
		public WhitespaceContext whitespace(int i) {
			return GetRuleContext<WhitespaceContext>(i);
		}
		public BlockQuoteListItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockQuoteListItem; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.EnterBlockQuoteListItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.ExitBlockQuoteListItem(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownPreprocessorVisitor<TResult> typedVisitor = visitor as IMarkdownPreprocessorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockQuoteListItem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockQuoteListItemContext blockQuoteListItem() {
		BlockQuoteListItemContext _localctx = new BlockQuoteListItemContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_blockQuoteListItem);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 187;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 183; listItemIndicator();
					State = 185;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,21,_ctx) ) {
					case 1:
						{
						State = 184; whitespace();
						}
						break;
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 189;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,22,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 191; text();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockquoteIndicatorContext : ParserRuleContext {
		public ITerminalNode GREATER_THAN() { return GetToken(MarkdownPreprocessorParser.GREATER_THAN, 0); }
		public BlockquoteIndicatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockquoteIndicator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.EnterBlockquoteIndicator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.ExitBlockquoteIndicator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownPreprocessorVisitor<TResult> typedVisitor = visitor as IMarkdownPreprocessorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockquoteIndicator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockquoteIndicatorContext blockquoteIndicator() {
		BlockquoteIndicatorContext _localctx = new BlockquoteIndicatorContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_blockquoteIndicator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 193; Match(GREATER_THAN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HeadingContext : ParserRuleContext {
		public WhitespaceContext whitespace() {
			return GetRuleContext<WhitespaceContext>(0);
		}
		public TextContext text() {
			return GetRuleContext<TextContext>(0);
		}
		public HeadingIndicatorContext[] headingIndicator() {
			return GetRuleContexts<HeadingIndicatorContext>();
		}
		public HeadingIndicatorContext headingIndicator(int i) {
			return GetRuleContext<HeadingIndicatorContext>(i);
		}
		public HeadingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_heading; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.EnterHeading(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.ExitHeading(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownPreprocessorVisitor<TResult> typedVisitor = visitor as IMarkdownPreprocessorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHeading(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HeadingContext heading() {
		HeadingContext _localctx = new HeadingContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_heading);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 196;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 195; headingIndicator();
				}
				}
				State = 198;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==HASH );
			State = 200; whitespace();
			State = 201; text();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HeadingIndicatorContext : ParserRuleContext {
		public ITerminalNode HASH() { return GetToken(MarkdownPreprocessorParser.HASH, 0); }
		public HeadingIndicatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_headingIndicator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.EnterHeadingIndicator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.ExitHeadingIndicator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownPreprocessorVisitor<TResult> typedVisitor = visitor as IMarkdownPreprocessorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHeadingIndicator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HeadingIndicatorContext headingIndicator() {
		HeadingIndicatorContext _localctx = new HeadingIndicatorContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_headingIndicator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 203; Match(HASH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TextLineContext : ParserRuleContext {
		public TextContext text() {
			return GetRuleContext<TextContext>(0);
		}
		public WhitespaceContext[] whitespace() {
			return GetRuleContexts<WhitespaceContext>();
		}
		public WhitespaceContext whitespace(int i) {
			return GetRuleContext<WhitespaceContext>(i);
		}
		public TextLineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_textLine; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.EnterTextLine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.ExitTextLine(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownPreprocessorVisitor<TResult> typedVisitor = visitor as IMarkdownPreprocessorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTextLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TextLineContext textLine() {
		TextLineContext _localctx = new TextLineContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_textLine);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 208;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,24,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 205; whitespace();
					}
					} 
				}
				State = 210;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,24,_ctx);
			}
			State = 211; text();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Paragraph_endContext : ParserRuleContext {
		public SoftCarriageReturnContext[] softCarriageReturn() {
			return GetRuleContexts<SoftCarriageReturnContext>();
		}
		public SoftCarriageReturnContext softCarriageReturn(int i) {
			return GetRuleContext<SoftCarriageReturnContext>(i);
		}
		public WhitespaceContext[] whitespace() {
			return GetRuleContexts<WhitespaceContext>();
		}
		public WhitespaceContext whitespace(int i) {
			return GetRuleContext<WhitespaceContext>(i);
		}
		public Paragraph_endContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_paragraph_end; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.EnterParagraph_end(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.ExitParagraph_end(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownPreprocessorVisitor<TResult> typedVisitor = visitor as IMarkdownPreprocessorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParagraph_end(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Paragraph_endContext paragraph_end() {
		Paragraph_endContext _localctx = new Paragraph_endContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_paragraph_end);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 220;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 216;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,25,_ctx);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
						if ( _alt==1 ) {
							{
							{
							State = 213; whitespace();
							}
							} 
						}
						State = 218;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,25,_ctx);
					}
					State = 219; softCarriageReturn();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 222;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,26,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TextContext : ParserRuleContext {
		public NonWhitespaceContext[] nonWhitespace() {
			return GetRuleContexts<NonWhitespaceContext>();
		}
		public NonWhitespaceContext nonWhitespace(int i) {
			return GetRuleContext<NonWhitespaceContext>(i);
		}
		public SafeTextContext[] safeText() {
			return GetRuleContexts<SafeTextContext>();
		}
		public SafeTextContext safeText(int i) {
			return GetRuleContext<SafeTextContext>(i);
		}
		public ParenthesisClauseContext parenthesisClause() {
			return GetRuleContext<ParenthesisClauseContext>(0);
		}
		public TextLineContext[] textLine() {
			return GetRuleContexts<TextLineContext>();
		}
		public TextLineContext textLine(int i) {
			return GetRuleContext<TextLineContext>(i);
		}
		public OpenTagContext openTag() {
			return GetRuleContext<OpenTagContext>(0);
		}
		public CloseTagContext closeTag() {
			return GetRuleContext<CloseTagContext>(0);
		}
		public TextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_text; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.EnterText(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.ExitText(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownPreprocessorVisitor<TResult> typedVisitor = visitor as IMarkdownPreprocessorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitText(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TextContext text() {
		TextContext _localctx = new TextContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_text);
		try {
			int _alt;
			State = 256;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,32,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 225;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 224; nonWhitespace();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 227;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,27,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				State = 232;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,28,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 229; safeText();
						}
						} 
					}
					State = 234;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,28,_ctx);
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 235; parenthesisClause();
				State = 239;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,29,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 236; textLine();
						}
						} 
					}
					State = 241;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,29,_ctx);
				}
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 242; openTag();
				State = 246;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,30,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 243; textLine();
						}
						} 
					}
					State = 248;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,30,_ctx);
				}
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 249; closeTag();
				State = 253;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,31,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 250; textLine();
						}
						} 
					}
					State = 255;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,31,_ctx);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SafeTextContext : ParserRuleContext {
		public WhitespaceContext whitespace() {
			return GetRuleContext<WhitespaceContext>(0);
		}
		public NonWhitespaceContext nonWhitespace() {
			return GetRuleContext<NonWhitespaceContext>(0);
		}
		public ITerminalNode HASH() { return GetToken(MarkdownPreprocessorParser.HASH, 0); }
		public ITerminalNode ASTERISK() { return GetToken(MarkdownPreprocessorParser.ASTERISK, 0); }
		public ITerminalNode LESS_THAN() { return GetToken(MarkdownPreprocessorParser.LESS_THAN, 0); }
		public ITerminalNode SLASH() { return GetToken(MarkdownPreprocessorParser.SLASH, 0); }
		public ITerminalNode PERIOD() { return GetToken(MarkdownPreprocessorParser.PERIOD, 0); }
		public SafeTextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_safeText; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.EnterSafeText(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.ExitSafeText(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownPreprocessorVisitor<TResult> typedVisitor = visitor as IMarkdownPreprocessorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSafeText(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SafeTextContext safeText() {
		SafeTextContext _localctx = new SafeTextContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_safeText);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 265;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,33,_ctx) ) {
			case 1:
				{
				State = 258; whitespace();
				}
				break;

			case 2:
				{
				State = 259; nonWhitespace();
				}
				break;

			case 3:
				{
				State = 260; Match(HASH);
				}
				break;

			case 4:
				{
				State = 261; Match(ASTERISK);
				}
				break;

			case 5:
				{
				State = 262; Match(LESS_THAN);
				}
				break;

			case 6:
				{
				State = 263; Match(SLASH);
				}
				break;

			case 7:
				{
				State = 264; Match(PERIOD);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeContentContext : ParserRuleContext {
		public WhitespaceContext[] whitespace() {
			return GetRuleContexts<WhitespaceContext>();
		}
		public WhitespaceContext whitespace(int i) {
			return GetRuleContext<WhitespaceContext>(i);
		}
		public AnyNonWhitespaceContext[] anyNonWhitespace() {
			return GetRuleContexts<AnyNonWhitespaceContext>();
		}
		public AnyNonWhitespaceContext anyNonWhitespace(int i) {
			return GetRuleContext<AnyNonWhitespaceContext>(i);
		}
		public ITerminalNode[] CARRIAGE_RETURN() { return GetTokens(MarkdownPreprocessorParser.CARRIAGE_RETURN); }
		public ITerminalNode CARRIAGE_RETURN(int i) {
			return GetToken(MarkdownPreprocessorParser.CARRIAGE_RETURN, i);
		}
		public AttributeContentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributeContent; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.EnterAttributeContent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.ExitAttributeContent(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownPreprocessorVisitor<TResult> typedVisitor = visitor as IMarkdownPreprocessorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttributeContent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeContentContext attributeContent() {
		AttributeContentContext _localctx = new AttributeContentContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_attributeContent);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 272;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DOUBLE_QUOTE) | (1L << SINGLE_QUOTE) | (1L << ASTERISK) | (1L << HASH) | (1L << PERIOD) | (1L << COLON) | (1L << UNDERBAR) | (1L << DASH) | (1L << DIGIT) | (1L << LETTER) | (1L << PUNCTUATION) | (1L << TAB) | (1L << EQUAL) | (1L << SPACE) | (1L << LESS_THAN) | (1L << GREATER_THAN) | (1L << SLASH) | (1L << CARRIAGE_RETURN) | (1L << NON_WHITESPACE))) != 0)) {
				{
				State = 270;
				switch (_input.La(1)) {
				case TAB:
				case SPACE:
					{
					State = 267; whitespace();
					}
					break;
				case DOUBLE_QUOTE:
				case SINGLE_QUOTE:
				case ASTERISK:
				case HASH:
				case PERIOD:
				case COLON:
				case UNDERBAR:
				case DASH:
				case DIGIT:
				case LETTER:
				case PUNCTUATION:
				case EQUAL:
				case LESS_THAN:
				case GREATER_THAN:
				case SLASH:
				case NON_WHITESPACE:
					{
					State = 268; anyNonWhitespace();
					}
					break;
				case CARRIAGE_RETURN:
					{
					State = 269; Match(CARRIAGE_RETURN);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 274;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeValueContext : ParserRuleContext {
		public ITerminalNode[] DOUBLE_QUOTE() { return GetTokens(MarkdownPreprocessorParser.DOUBLE_QUOTE); }
		public ITerminalNode DOUBLE_QUOTE(int i) {
			return GetToken(MarkdownPreprocessorParser.DOUBLE_QUOTE, i);
		}
		public WhitespaceContext[] whitespace() {
			return GetRuleContexts<WhitespaceContext>();
		}
		public WhitespaceContext whitespace(int i) {
			return GetRuleContext<WhitespaceContext>(i);
		}
		public AnyNonWhitespaceContext[] anyNonWhitespace() {
			return GetRuleContexts<AnyNonWhitespaceContext>();
		}
		public AnyNonWhitespaceContext anyNonWhitespace(int i) {
			return GetRuleContext<AnyNonWhitespaceContext>(i);
		}
		public ITerminalNode[] SINGLE_QUOTE() { return GetTokens(MarkdownPreprocessorParser.SINGLE_QUOTE); }
		public ITerminalNode SINGLE_QUOTE(int i) {
			return GetToken(MarkdownPreprocessorParser.SINGLE_QUOTE, i);
		}
		public AttributeValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributeValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.EnterAttributeValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.ExitAttributeValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownPreprocessorVisitor<TResult> typedVisitor = visitor as IMarkdownPreprocessorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttributeValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeValueContext attributeValue() {
		AttributeValueContext _localctx = new AttributeValueContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_attributeValue);
		try {
			int _alt;
			State = 293;
			switch (_input.La(1)) {
			case DOUBLE_QUOTE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 275; Match(DOUBLE_QUOTE);
				State = 280;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,37,_ctx);
				while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1+1 ) {
						{
						State = 278;
						switch (_input.La(1)) {
						case TAB:
						case SPACE:
							{
							State = 276; whitespace();
							}
							break;
						case DOUBLE_QUOTE:
						case SINGLE_QUOTE:
						case ASTERISK:
						case HASH:
						case PERIOD:
						case COLON:
						case UNDERBAR:
						case DASH:
						case DIGIT:
						case LETTER:
						case PUNCTUATION:
						case EQUAL:
						case LESS_THAN:
						case GREATER_THAN:
						case SLASH:
						case NON_WHITESPACE:
							{
							State = 277; anyNonWhitespace();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						} 
					}
					State = 282;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,37,_ctx);
				}
				State = 283; Match(DOUBLE_QUOTE);
				}
				break;
			case SINGLE_QUOTE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 284; Match(SINGLE_QUOTE);
				State = 289;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,39,_ctx);
				while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1+1 ) {
						{
						State = 287;
						switch (_input.La(1)) {
						case TAB:
						case SPACE:
							{
							State = 285; whitespace();
							}
							break;
						case DOUBLE_QUOTE:
						case SINGLE_QUOTE:
						case ASTERISK:
						case HASH:
						case PERIOD:
						case COLON:
						case UNDERBAR:
						case DASH:
						case DIGIT:
						case LETTER:
						case PUNCTUATION:
						case EQUAL:
						case LESS_THAN:
						case GREATER_THAN:
						case SLASH:
						case NON_WHITESPACE:
							{
							State = 286; anyNonWhitespace();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						} 
					}
					State = 291;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,39,_ctx);
				}
				State = 292; Match(SINGLE_QUOTE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeNameContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AttributeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributeName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.EnterAttributeName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.ExitAttributeName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownPreprocessorVisitor<TResult> typedVisitor = visitor as IMarkdownPreprocessorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttributeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeNameContext attributeName() {
		AttributeNameContext _localctx = new AttributeNameContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_attributeName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 295; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeContext : ParserRuleContext {
		public AttributeNameContext attributeName() {
			return GetRuleContext<AttributeNameContext>(0);
		}
		public ITerminalNode EQUAL() { return GetToken(MarkdownPreprocessorParser.EQUAL, 0); }
		public AttributeValueContext attributeValue() {
			return GetRuleContext<AttributeValueContext>(0);
		}
		public AnyWhitespaceContext[] anyWhitespace() {
			return GetRuleContexts<AnyWhitespaceContext>();
		}
		public AnyWhitespaceContext anyWhitespace(int i) {
			return GetRuleContext<AnyWhitespaceContext>(i);
		}
		public AttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.EnterAttribute(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.ExitAttribute(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownPreprocessorVisitor<TResult> typedVisitor = visitor as IMarkdownPreprocessorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeContext attribute() {
		AttributeContext _localctx = new AttributeContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_attribute);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 300;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TAB) | (1L << SPACE) | (1L << CARRIAGE_RETURN))) != 0)) {
				{
				{
				State = 297; anyWhitespace();
				}
				}
				State = 302;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 303; attributeName();
			State = 307;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TAB) | (1L << SPACE) | (1L << CARRIAGE_RETURN))) != 0)) {
				{
				{
				State = 304; anyWhitespace();
				}
				}
				State = 309;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 310; Match(EQUAL);
			State = 314;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TAB) | (1L << SPACE) | (1L << CARRIAGE_RETURN))) != 0)) {
				{
				{
				State = 311; anyWhitespace();
				}
				}
				State = 316;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 317; attributeValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TagContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public TagContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tag; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.EnterTag(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.ExitTag(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownPreprocessorVisitor<TResult> typedVisitor = visitor as IMarkdownPreprocessorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTag(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TagContext tag() {
		TagContext _localctx = new TagContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_tag);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 319; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParenthesisClauseContext : ParserRuleContext {
		public ITerminalNode OPEN_PARENTHESIS() { return GetToken(MarkdownPreprocessorParser.OPEN_PARENTHESIS, 0); }
		public ITerminalNode CLOSE_PARENTHESIS() { return GetToken(MarkdownPreprocessorParser.CLOSE_PARENTHESIS, 0); }
		public SafeTextContext[] safeText() {
			return GetRuleContexts<SafeTextContext>();
		}
		public SafeTextContext safeText(int i) {
			return GetRuleContext<SafeTextContext>(i);
		}
		public AnyWhitespaceContext[] anyWhitespace() {
			return GetRuleContexts<AnyWhitespaceContext>();
		}
		public AnyWhitespaceContext anyWhitespace(int i) {
			return GetRuleContext<AnyWhitespaceContext>(i);
		}
		public NonWhitespaceContext[] nonWhitespace() {
			return GetRuleContexts<NonWhitespaceContext>();
		}
		public NonWhitespaceContext nonWhitespace(int i) {
			return GetRuleContext<NonWhitespaceContext>(i);
		}
		public ITerminalNode[] HASH() { return GetTokens(MarkdownPreprocessorParser.HASH); }
		public ITerminalNode HASH(int i) {
			return GetToken(MarkdownPreprocessorParser.HASH, i);
		}
		public ITerminalNode[] ASTERISK() { return GetTokens(MarkdownPreprocessorParser.ASTERISK); }
		public ITerminalNode ASTERISK(int i) {
			return GetToken(MarkdownPreprocessorParser.ASTERISK, i);
		}
		public ITerminalNode[] GREATER_THAN() { return GetTokens(MarkdownPreprocessorParser.GREATER_THAN); }
		public ITerminalNode GREATER_THAN(int i) {
			return GetToken(MarkdownPreprocessorParser.GREATER_THAN, i);
		}
		public ITerminalNode[] LESS_THAN() { return GetTokens(MarkdownPreprocessorParser.LESS_THAN); }
		public ITerminalNode LESS_THAN(int i) {
			return GetToken(MarkdownPreprocessorParser.LESS_THAN, i);
		}
		public ITerminalNode[] SLASH() { return GetTokens(MarkdownPreprocessorParser.SLASH); }
		public ITerminalNode SLASH(int i) {
			return GetToken(MarkdownPreprocessorParser.SLASH, i);
		}
		public ITerminalNode[] PERIOD() { return GetTokens(MarkdownPreprocessorParser.PERIOD); }
		public ITerminalNode PERIOD(int i) {
			return GetToken(MarkdownPreprocessorParser.PERIOD, i);
		}
		public ParenthesisClauseContext[] parenthesisClause() {
			return GetRuleContexts<ParenthesisClauseContext>();
		}
		public ParenthesisClauseContext parenthesisClause(int i) {
			return GetRuleContext<ParenthesisClauseContext>(i);
		}
		public ParenthesisClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parenthesisClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.EnterParenthesisClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.ExitParenthesisClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownPreprocessorVisitor<TResult> typedVisitor = visitor as IMarkdownPreprocessorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesisClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParenthesisClauseContext parenthesisClause() {
		ParenthesisClauseContext _localctx = new ParenthesisClauseContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_parenthesisClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 324;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DOUBLE_QUOTE) | (1L << SINGLE_QUOTE) | (1L << ASTERISK) | (1L << HASH) | (1L << PERIOD) | (1L << COLON) | (1L << UNDERBAR) | (1L << DASH) | (1L << DIGIT) | (1L << LETTER) | (1L << PUNCTUATION) | (1L << TAB) | (1L << EQUAL) | (1L << SPACE) | (1L << LESS_THAN) | (1L << SLASH) | (1L << NON_WHITESPACE))) != 0)) {
				{
				{
				State = 321; safeText();
				}
				}
				State = 326;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 327; Match(OPEN_PARENTHESIS);
			State = 339;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DOUBLE_QUOTE) | (1L << SINGLE_QUOTE) | (1L << OPEN_PARENTHESIS) | (1L << ASTERISK) | (1L << HASH) | (1L << PERIOD) | (1L << COLON) | (1L << UNDERBAR) | (1L << DASH) | (1L << DIGIT) | (1L << LETTER) | (1L << PUNCTUATION) | (1L << TAB) | (1L << EQUAL) | (1L << SPACE) | (1L << LESS_THAN) | (1L << GREATER_THAN) | (1L << SLASH) | (1L << CARRIAGE_RETURN) | (1L << NON_WHITESPACE))) != 0)) {
				{
				State = 337;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,45,_ctx) ) {
				case 1:
					{
					State = 328; anyWhitespace();
					}
					break;

				case 2:
					{
					State = 329; nonWhitespace();
					}
					break;

				case 3:
					{
					State = 330; Match(HASH);
					}
					break;

				case 4:
					{
					State = 331; Match(ASTERISK);
					}
					break;

				case 5:
					{
					State = 332; Match(GREATER_THAN);
					}
					break;

				case 6:
					{
					State = 333; Match(LESS_THAN);
					}
					break;

				case 7:
					{
					State = 334; Match(SLASH);
					}
					break;

				case 8:
					{
					State = 335; Match(PERIOD);
					}
					break;

				case 9:
					{
					State = 336; parenthesisClause();
					}
					break;
				}
				}
				State = 341;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 342; Match(CLOSE_PARENTHESIS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpenTagContext : ParserRuleContext {
		public ITerminalNode LESS_THAN() { return GetToken(MarkdownPreprocessorParser.LESS_THAN, 0); }
		public TagContext tag() {
			return GetRuleContext<TagContext>(0);
		}
		public ITerminalNode GREATER_THAN() { return GetToken(MarkdownPreprocessorParser.GREATER_THAN, 0); }
		public SafeTextContext[] safeText() {
			return GetRuleContexts<SafeTextContext>();
		}
		public SafeTextContext safeText(int i) {
			return GetRuleContext<SafeTextContext>(i);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public AnyWhitespaceContext[] anyWhitespace() {
			return GetRuleContexts<AnyWhitespaceContext>();
		}
		public AnyWhitespaceContext anyWhitespace(int i) {
			return GetRuleContext<AnyWhitespaceContext>(i);
		}
		public ITerminalNode SLASH() { return GetToken(MarkdownPreprocessorParser.SLASH, 0); }
		public OpenTagContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_openTag; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.EnterOpenTag(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.ExitOpenTag(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownPreprocessorVisitor<TResult> typedVisitor = visitor as IMarkdownPreprocessorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpenTag(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpenTagContext openTag() {
		OpenTagContext _localctx = new OpenTagContext(_ctx, State);
		EnterRule(_localctx, 52, RULE_openTag);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 347;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,47,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 344; safeText();
					}
					} 
				}
				State = 349;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,47,_ctx);
			}
			State = 350; Match(LESS_THAN);
			State = 351; tag();
			State = 355;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,48,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 352; attribute();
					}
					} 
				}
				State = 357;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,48,_ctx);
			}
			State = 361;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TAB) | (1L << SPACE) | (1L << CARRIAGE_RETURN))) != 0)) {
				{
				{
				State = 358; anyWhitespace();
				}
				}
				State = 363;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 365;
			_la = _input.La(1);
			if (_la==SLASH) {
				{
				State = 364; Match(SLASH);
				}
			}

			State = 367; Match(GREATER_THAN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CloseTagContext : ParserRuleContext {
		public ITerminalNode LESS_THAN() { return GetToken(MarkdownPreprocessorParser.LESS_THAN, 0); }
		public ITerminalNode SLASH() { return GetToken(MarkdownPreprocessorParser.SLASH, 0); }
		public TagContext tag() {
			return GetRuleContext<TagContext>(0);
		}
		public ITerminalNode GREATER_THAN() { return GetToken(MarkdownPreprocessorParser.GREATER_THAN, 0); }
		public SafeTextContext[] safeText() {
			return GetRuleContexts<SafeTextContext>();
		}
		public SafeTextContext safeText(int i) {
			return GetRuleContext<SafeTextContext>(i);
		}
		public AnyWhitespaceContext[] anyWhitespace() {
			return GetRuleContexts<AnyWhitespaceContext>();
		}
		public AnyWhitespaceContext anyWhitespace(int i) {
			return GetRuleContext<AnyWhitespaceContext>(i);
		}
		public CloseTagContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_closeTag; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.EnterCloseTag(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.ExitCloseTag(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownPreprocessorVisitor<TResult> typedVisitor = visitor as IMarkdownPreprocessorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCloseTag(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CloseTagContext closeTag() {
		CloseTagContext _localctx = new CloseTagContext(_ctx, State);
		EnterRule(_localctx, 54, RULE_closeTag);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 372;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,51,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 369; safeText();
					}
					} 
				}
				State = 374;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,51,_ctx);
			}
			State = 375; Match(LESS_THAN);
			State = 376; Match(SLASH);
			State = 377; tag();
			State = 381;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TAB) | (1L << SPACE) | (1L << CARRIAGE_RETURN))) != 0)) {
				{
				{
				State = 378; anyWhitespace();
				}
				}
				State = 383;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 384; Match(GREATER_THAN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public ITerminalNode[] LETTER() { return GetTokens(MarkdownPreprocessorParser.LETTER); }
		public ITerminalNode LETTER(int i) {
			return GetToken(MarkdownPreprocessorParser.LETTER, i);
		}
		public ITerminalNode[] COLON() { return GetTokens(MarkdownPreprocessorParser.COLON); }
		public ITerminalNode COLON(int i) {
			return GetToken(MarkdownPreprocessorParser.COLON, i);
		}
		public ITerminalNode[] DIGIT() { return GetTokens(MarkdownPreprocessorParser.DIGIT); }
		public ITerminalNode DIGIT(int i) {
			return GetToken(MarkdownPreprocessorParser.DIGIT, i);
		}
		public ITerminalNode[] UNDERBAR() { return GetTokens(MarkdownPreprocessorParser.UNDERBAR); }
		public ITerminalNode UNDERBAR(int i) {
			return GetToken(MarkdownPreprocessorParser.UNDERBAR, i);
		}
		public ITerminalNode[] DASH() { return GetTokens(MarkdownPreprocessorParser.DASH); }
		public ITerminalNode DASH(int i) {
			return GetToken(MarkdownPreprocessorParser.DASH, i);
		}
		public ITerminalNode[] PERIOD() { return GetTokens(MarkdownPreprocessorParser.PERIOD); }
		public ITerminalNode PERIOD(int i) {
			return GetToken(MarkdownPreprocessorParser.PERIOD, i);
		}
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownPreprocessorVisitor<TResult> typedVisitor = visitor as IMarkdownPreprocessorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(_ctx, State);
		EnterRule(_localctx, 56, RULE_identifier);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 387;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 386;
					_la = _input.La(1);
					if ( !(_la==COLON || _la==LETTER) ) {
					_errHandler.RecoverInline(this);
					} else {
						Consume();
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 389;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,53,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 394;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,54,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 391;
					_la = _input.La(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PERIOD) | (1L << COLON) | (1L << UNDERBAR) | (1L << DASH) | (1L << DIGIT) | (1L << LETTER))) != 0)) ) {
					_errHandler.RecoverInline(this);
					} else {
						Consume();
					}
					}
					} 
				}
				State = 396;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,54,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhitespaceContext : ParserRuleContext {
		public SpaceContext space() {
			return GetRuleContext<SpaceContext>(0);
		}
		public TabContext tab() {
			return GetRuleContext<TabContext>(0);
		}
		public WhitespaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whitespace; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.EnterWhitespace(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.ExitWhitespace(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownPreprocessorVisitor<TResult> typedVisitor = visitor as IMarkdownPreprocessorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhitespace(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhitespaceContext whitespace() {
		WhitespaceContext _localctx = new WhitespaceContext(_ctx, State);
		EnterRule(_localctx, 58, RULE_whitespace);
		try {
			State = 399;
			switch (_input.La(1)) {
			case SPACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 397; space();
				}
				break;
			case TAB:
				EnterOuterAlt(_localctx, 2);
				{
				State = 398; tab();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpaceContext : ParserRuleContext {
		public ITerminalNode SPACE() { return GetToken(MarkdownPreprocessorParser.SPACE, 0); }
		public SpaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_space; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.EnterSpace(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.ExitSpace(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownPreprocessorVisitor<TResult> typedVisitor = visitor as IMarkdownPreprocessorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpace(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpaceContext space() {
		SpaceContext _localctx = new SpaceContext(_ctx, State);
		EnterRule(_localctx, 60, RULE_space);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 401; Match(SPACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TabContext : ParserRuleContext {
		public ITerminalNode TAB() { return GetToken(MarkdownPreprocessorParser.TAB, 0); }
		public TabContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tab; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.EnterTab(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.ExitTab(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownPreprocessorVisitor<TResult> typedVisitor = visitor as IMarkdownPreprocessorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTab(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TabContext tab() {
		TabContext _localctx = new TabContext(_ctx, State);
		EnterRule(_localctx, 62, RULE_tab);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 403; Match(TAB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnyNonWhitespaceContext : ParserRuleContext {
		public NonWhitespaceContext nonWhitespace() {
			return GetRuleContext<NonWhitespaceContext>(0);
		}
		public ITerminalNode HASH() { return GetToken(MarkdownPreprocessorParser.HASH, 0); }
		public ITerminalNode ASTERISK() { return GetToken(MarkdownPreprocessorParser.ASTERISK, 0); }
		public ITerminalNode LESS_THAN() { return GetToken(MarkdownPreprocessorParser.LESS_THAN, 0); }
		public ITerminalNode GREATER_THAN() { return GetToken(MarkdownPreprocessorParser.GREATER_THAN, 0); }
		public ITerminalNode SLASH() { return GetToken(MarkdownPreprocessorParser.SLASH, 0); }
		public ITerminalNode PERIOD() { return GetToken(MarkdownPreprocessorParser.PERIOD, 0); }
		public AnyNonWhitespaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_anyNonWhitespace; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.EnterAnyNonWhitespace(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.ExitAnyNonWhitespace(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownPreprocessorVisitor<TResult> typedVisitor = visitor as IMarkdownPreprocessorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnyNonWhitespace(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnyNonWhitespaceContext anyNonWhitespace() {
		AnyNonWhitespaceContext _localctx = new AnyNonWhitespaceContext(_ctx, State);
		EnterRule(_localctx, 64, RULE_anyNonWhitespace);
		try {
			State = 412;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,56,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 405; nonWhitespace();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 406; Match(HASH);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 407; Match(ASTERISK);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 408; Match(LESS_THAN);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 409; Match(GREATER_THAN);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 410; Match(SLASH);
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 411; Match(PERIOD);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NonWhitespaceContext : ParserRuleContext {
		public ITerminalNode NON_WHITESPACE() { return GetToken(MarkdownPreprocessorParser.NON_WHITESPACE, 0); }
		public ITerminalNode PUNCTUATION() { return GetToken(MarkdownPreprocessorParser.PUNCTUATION, 0); }
		public ITerminalNode DIGIT() { return GetToken(MarkdownPreprocessorParser.DIGIT, 0); }
		public ITerminalNode LETTER() { return GetToken(MarkdownPreprocessorParser.LETTER, 0); }
		public ITerminalNode EQUAL() { return GetToken(MarkdownPreprocessorParser.EQUAL, 0); }
		public ITerminalNode DOUBLE_QUOTE() { return GetToken(MarkdownPreprocessorParser.DOUBLE_QUOTE, 0); }
		public ITerminalNode SINGLE_QUOTE() { return GetToken(MarkdownPreprocessorParser.SINGLE_QUOTE, 0); }
		public ITerminalNode COLON() { return GetToken(MarkdownPreprocessorParser.COLON, 0); }
		public ITerminalNode DASH() { return GetToken(MarkdownPreprocessorParser.DASH, 0); }
		public ITerminalNode UNDERBAR() { return GetToken(MarkdownPreprocessorParser.UNDERBAR, 0); }
		public ITerminalNode PERIOD() { return GetToken(MarkdownPreprocessorParser.PERIOD, 0); }
		public NonWhitespaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nonWhitespace; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.EnterNonWhitespace(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.ExitNonWhitespace(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownPreprocessorVisitor<TResult> typedVisitor = visitor as IMarkdownPreprocessorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNonWhitespace(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NonWhitespaceContext nonWhitespace() {
		NonWhitespaceContext _localctx = new NonWhitespaceContext(_ctx, State);
		EnterRule(_localctx, 66, RULE_nonWhitespace);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 414;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DOUBLE_QUOTE) | (1L << SINGLE_QUOTE) | (1L << PERIOD) | (1L << COLON) | (1L << UNDERBAR) | (1L << DASH) | (1L << DIGIT) | (1L << LETTER) | (1L << PUNCTUATION) | (1L << EQUAL) | (1L << NON_WHITESPACE))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnyWhitespaceContext : ParserRuleContext {
		public WhitespaceContext whitespace() {
			return GetRuleContext<WhitespaceContext>(0);
		}
		public ITerminalNode CARRIAGE_RETURN() { return GetToken(MarkdownPreprocessorParser.CARRIAGE_RETURN, 0); }
		public AnyWhitespaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_anyWhitespace; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.EnterAnyWhitespace(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.ExitAnyWhitespace(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownPreprocessorVisitor<TResult> typedVisitor = visitor as IMarkdownPreprocessorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnyWhitespace(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnyWhitespaceContext anyWhitespace() {
		AnyWhitespaceContext _localctx = new AnyWhitespaceContext(_ctx, State);
		EnterRule(_localctx, 68, RULE_anyWhitespace);
		try {
			State = 418;
			switch (_input.La(1)) {
			case TAB:
			case SPACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 416; whitespace();
				}
				break;
			case CARRIAGE_RETURN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 417; Match(CARRIAGE_RETURN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x17\x1A7\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x3\x2\a\x2J\n\x2\f\x2\xE\x2M\v\x2\x3\x2\x5"+
		"\x2P\n\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x5\x3]\n\x3\x3\x4\x3\x4\x5\x4\x61\n\x4\x3\x5\x5\x5\x64\n\x5\x3"+
		"\x5\x3\x5\x3\x6\x3\x6\x3\x6\x3\x6\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x6\ar"+
		"\n\a\r\a\xE\as\x3\b\x3\b\x5\bx\n\b\x6\bz\n\b\r\b\xE\b{\x3\b\x3\b\x3\t"+
		"\x6\t\x81\n\t\r\t\xE\t\x82\x3\t\x3\t\x3\t\x3\t\x6\t\x89\n\t\r\t\xE\t\x8A"+
		"\x5\t\x8D\n\t\x3\t\x3\t\a\t\x91\n\t\f\t\xE\t\x94\v\t\x3\t\x3\t\x3\n\x3"+
		"\n\x6\n\x9A\n\n\r\n\xE\n\x9B\x3\n\x5\n\x9F\n\n\x3\v\x3\v\x3\v\x3\v\x3"+
		"\v\x3\v\x6\v\xA7\n\v\r\v\xE\v\xA8\x3\f\x3\f\x5\f\xAD\n\f\x6\f\xAF\n\f"+
		"\r\f\xE\f\xB0\x3\f\x3\f\x3\r\x3\r\x3\r\x5\r\xB8\n\r\x3\xE\x3\xE\x5\xE"+
		"\xBC\n\xE\x6\xE\xBE\n\xE\r\xE\xE\xE\xBF\x3\xE\x3\xE\x3\xF\x3\xF\x3\x10"+
		"\x6\x10\xC7\n\x10\r\x10\xE\x10\xC8\x3\x10\x3\x10\x3\x10\x3\x11\x3\x11"+
		"\x3\x12\a\x12\xD1\n\x12\f\x12\xE\x12\xD4\v\x12\x3\x12\x3\x12\x3\x13\a"+
		"\x13\xD9\n\x13\f\x13\xE\x13\xDC\v\x13\x3\x13\x6\x13\xDF\n\x13\r\x13\xE"+
		"\x13\xE0\x3\x14\x6\x14\xE4\n\x14\r\x14\xE\x14\xE5\x3\x14\a\x14\xE9\n\x14"+
		"\f\x14\xE\x14\xEC\v\x14\x3\x14\x3\x14\a\x14\xF0\n\x14\f\x14\xE\x14\xF3"+
		"\v\x14\x3\x14\x3\x14\a\x14\xF7\n\x14\f\x14\xE\x14\xFA\v\x14\x3\x14\x3"+
		"\x14\a\x14\xFE\n\x14\f\x14\xE\x14\x101\v\x14\x5\x14\x103\n\x14\x3\x15"+
		"\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x5\x15\x10C\n\x15\x3\x16\x3"+
		"\x16\x3\x16\a\x16\x111\n\x16\f\x16\xE\x16\x114\v\x16\x3\x17\x3\x17\x3"+
		"\x17\a\x17\x119\n\x17\f\x17\xE\x17\x11C\v\x17\x3\x17\x3\x17\x3\x17\x3"+
		"\x17\a\x17\x122\n\x17\f\x17\xE\x17\x125\v\x17\x3\x17\x5\x17\x128\n\x17"+
		"\x3\x18\x3\x18\x3\x19\a\x19\x12D\n\x19\f\x19\xE\x19\x130\v\x19\x3\x19"+
		"\x3\x19\a\x19\x134\n\x19\f\x19\xE\x19\x137\v\x19\x3\x19\x3\x19\a\x19\x13B"+
		"\n\x19\f\x19\xE\x19\x13E\v\x19\x3\x19\x3\x19\x3\x1A\x3\x1A\x3\x1B\a\x1B"+
		"\x145\n\x1B\f\x1B\xE\x1B\x148\v\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B"+
		"\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\a\x1B\x154\n\x1B\f\x1B\xE\x1B\x157"+
		"\v\x1B\x3\x1B\x3\x1B\x3\x1C\a\x1C\x15C\n\x1C\f\x1C\xE\x1C\x15F\v\x1C\x3"+
		"\x1C\x3\x1C\x3\x1C\a\x1C\x164\n\x1C\f\x1C\xE\x1C\x167\v\x1C\x3\x1C\a\x1C"+
		"\x16A\n\x1C\f\x1C\xE\x1C\x16D\v\x1C\x3\x1C\x5\x1C\x170\n\x1C\x3\x1C\x3"+
		"\x1C\x3\x1D\a\x1D\x175\n\x1D\f\x1D\xE\x1D\x178\v\x1D\x3\x1D\x3\x1D\x3"+
		"\x1D\x3\x1D\a\x1D\x17E\n\x1D\f\x1D\xE\x1D\x181\v\x1D\x3\x1D\x3\x1D\x3"+
		"\x1E\x6\x1E\x186\n\x1E\r\x1E\xE\x1E\x187\x3\x1E\a\x1E\x18B\n\x1E\f\x1E"+
		"\xE\x1E\x18E\v\x1E\x3\x1F\x3\x1F\x5\x1F\x192\n\x1F\x3 \x3 \x3!\x3!\x3"+
		"\"\x3\"\x3\"\x3\"\x3\"\x3\"\x3\"\x5\"\x19F\n\"\x3#\x3#\x3$\x3$\x5$\x1A5"+
		"\n$\x3$\x4\x11A\x123\x2\x2%\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10"+
		"\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E\x2 \x2\"\x2$\x2&\x2"+
		"(\x2*\x2,\x2.\x2\x30\x2\x32\x2\x34\x2\x36\x2\x38\x2:\x2<\x2>\x2@\x2\x42"+
		"\x2\x44\x2\x46\x2\x2\x5\x4\x2\n\n\xE\xE\x3\x2\t\xE\x6\x2\x3\x4\t\xF\x11"+
		"\x11\x17\x17\x1D5\x2K\x3\x2\x2\x2\x4\\\x3\x2\x2\x2\x6`\x3\x2\x2\x2\b\x63"+
		"\x3\x2\x2\x2\ng\x3\x2\x2\x2\fq\x3\x2\x2\x2\xEy\x3\x2\x2\x2\x10\x8C\x3"+
		"\x2\x2\x2\x12\x9E\x3\x2\x2\x2\x14\xA6\x3\x2\x2\x2\x16\xAE\x3\x2\x2\x2"+
		"\x18\xB7\x3\x2\x2\x2\x1A\xBD\x3\x2\x2\x2\x1C\xC3\x3\x2\x2\x2\x1E\xC6\x3"+
		"\x2\x2\x2 \xCD\x3\x2\x2\x2\"\xD2\x3\x2\x2\x2$\xDE\x3\x2\x2\x2&\x102\x3"+
		"\x2\x2\x2(\x10B\x3\x2\x2\x2*\x112\x3\x2\x2\x2,\x127\x3\x2\x2\x2.\x129"+
		"\x3\x2\x2\x2\x30\x12E\x3\x2\x2\x2\x32\x141\x3\x2\x2\x2\x34\x146\x3\x2"+
		"\x2\x2\x36\x15D\x3\x2\x2\x2\x38\x176\x3\x2\x2\x2:\x185\x3\x2\x2\x2<\x191"+
		"\x3\x2\x2\x2>\x193\x3\x2\x2\x2@\x195\x3\x2\x2\x2\x42\x19E\x3\x2\x2\x2"+
		"\x44\x1A0\x3\x2\x2\x2\x46\x1A4\x3\x2\x2\x2HJ\x5\x4\x3\x2IH\x3\x2\x2\x2"+
		"JM\x3\x2\x2\x2KI\x3\x2\x2\x2KL\x3\x2\x2\x2LO\x3\x2\x2\x2MK\x3\x2\x2\x2"+
		"NP\x5\"\x12\x2ON\x3\x2\x2\x2OP\x3\x2\x2\x2PQ\x3\x2\x2\x2QR\a\x2\x2\x3"+
		"R\x3\x3\x2\x2\x2ST\x5\x1E\x10\x2TU\x5\x6\x4\x2U]\x3\x2\x2\x2V]\x5\f\a"+
		"\x2W]\x5\x14\v\x2XY\x5\"\x12\x2YZ\x5\x6\x4\x2Z]\x3\x2\x2\x2[]\x5$\x13"+
		"\x2\\S\x3\x2\x2\x2\\V\x3\x2\x2\x2\\W\x3\x2\x2\x2\\X\x3\x2\x2\x2\\[\x3"+
		"\x2\x2\x2]\x5\x3\x2\x2\x2^\x61\x5\b\x5\x2_\x61\x5\n\x6\x2`^\x3\x2\x2\x2"+
		"`_\x3\x2\x2\x2\x61\a\x3\x2\x2\x2\x62\x64\x5> \x2\x63\x62\x3\x2\x2\x2\x63"+
		"\x64\x3\x2\x2\x2\x64\x65\x3\x2\x2\x2\x65\x66\a\x16\x2\x2\x66\t\x3\x2\x2"+
		"\x2gh\x5> \x2hi\x5> \x2ij\a\x16\x2\x2j\v\x3\x2\x2\x2kl\x5\xE\b\x2lm\x5"+
		"\x6\x4\x2mr\x3\x2\x2\x2no\x5\x10\t\x2op\x5\x6\x4\x2pr\x3\x2\x2\x2qk\x3"+
		"\x2\x2\x2qn\x3\x2\x2\x2rs\x3\x2\x2\x2sq\x3\x2\x2\x2st\x3\x2\x2\x2t\r\x3"+
		"\x2\x2\x2uw\x5\x12\n\x2vx\x5<\x1F\x2wv\x3\x2\x2\x2wx\x3\x2\x2\x2xz\x3"+
		"\x2\x2\x2yu\x3\x2\x2\x2z{\x3\x2\x2\x2{y\x3\x2\x2\x2{|\x3\x2\x2\x2|}\x3"+
		"\x2\x2\x2}~\x5&\x14\x2~\xF\x3\x2\x2\x2\x7F\x81\x5@!\x2\x80\x7F\x3\x2\x2"+
		"\x2\x81\x82\x3\x2\x2\x2\x82\x80\x3\x2\x2\x2\x82\x83\x3\x2\x2\x2\x83\x8D"+
		"\x3\x2\x2\x2\x84\x85\x5> \x2\x85\x86\x5> \x2\x86\x88\x5> \x2\x87\x89\x5"+
		"> \x2\x88\x87\x3\x2\x2\x2\x89\x8A\x3\x2\x2\x2\x8A\x88\x3\x2\x2\x2\x8A"+
		"\x8B\x3\x2\x2\x2\x8B\x8D\x3\x2\x2\x2\x8C\x80\x3\x2\x2\x2\x8C\x84\x3\x2"+
		"\x2\x2\x8D\x92\x3\x2\x2\x2\x8E\x91\x5@!\x2\x8F\x91\x5> \x2\x90\x8E\x3"+
		"\x2\x2\x2\x90\x8F\x3\x2\x2\x2\x91\x94\x3\x2\x2\x2\x92\x90\x3\x2\x2\x2"+
		"\x92\x93\x3\x2\x2\x2\x93\x95\x3\x2\x2\x2\x94\x92\x3\x2\x2\x2\x95\x96\x5"+
		"&\x14\x2\x96\x11\x3\x2\x2\x2\x97\x9F\a\a\x2\x2\x98\x9A\a\r\x2\x2\x99\x98"+
		"\x3\x2\x2\x2\x9A\x9B\x3\x2\x2\x2\x9B\x99\x3\x2\x2\x2\x9B\x9C\x3\x2\x2"+
		"\x2\x9C\x9D\x3\x2\x2\x2\x9D\x9F\a\t\x2\x2\x9E\x97\x3\x2\x2\x2\x9E\x99"+
		"\x3\x2\x2\x2\x9F\x13\x3\x2\x2\x2\xA0\xA1\x5\x16\f\x2\xA1\xA2\x5\x6\x4"+
		"\x2\xA2\xA7\x3\x2\x2\x2\xA3\xA4\x5\x10\t\x2\xA4\xA5\x5\x6\x4\x2\xA5\xA7"+
		"\x3\x2\x2\x2\xA6\xA0\x3\x2\x2\x2\xA6\xA3\x3\x2\x2\x2\xA7\xA8\x3\x2\x2"+
		"\x2\xA8\xA6\x3\x2\x2\x2\xA8\xA9\x3\x2\x2\x2\xA9\x15\x3\x2\x2\x2\xAA\xAC"+
		"\x5\x1C\xF\x2\xAB\xAD\x5<\x1F\x2\xAC\xAB\x3\x2\x2\x2\xAC\xAD\x3\x2\x2"+
		"\x2\xAD\xAF\x3\x2\x2\x2\xAE\xAA\x3\x2\x2\x2\xAF\xB0\x3\x2\x2\x2\xB0\xAE"+
		"\x3\x2\x2\x2\xB0\xB1\x3\x2\x2\x2\xB1\xB2\x3\x2\x2\x2\xB2\xB3\x5\x18\r"+
		"\x2\xB3\x17\x3\x2\x2\x2\xB4\xB8\x5\x1E\x10\x2\xB5\xB8\x5\x1A\xE\x2\xB6"+
		"\xB8\x5\"\x12\x2\xB7\xB4\x3\x2\x2\x2\xB7\xB5\x3\x2\x2\x2\xB7\xB6\x3\x2"+
		"\x2\x2\xB8\x19\x3\x2\x2\x2\xB9\xBB\x5\x12\n\x2\xBA\xBC\x5<\x1F\x2\xBB"+
		"\xBA\x3\x2\x2\x2\xBB\xBC\x3\x2\x2\x2\xBC\xBE\x3\x2\x2\x2\xBD\xB9\x3\x2"+
		"\x2\x2\xBE\xBF\x3\x2\x2\x2\xBF\xBD\x3\x2\x2\x2\xBF\xC0\x3\x2\x2\x2\xC0"+
		"\xC1\x3\x2\x2\x2\xC1\xC2\x5&\x14\x2\xC2\x1B\x3\x2\x2\x2\xC3\xC4\a\x14"+
		"\x2\x2\xC4\x1D\x3\x2\x2\x2\xC5\xC7\x5 \x11\x2\xC6\xC5\x3\x2\x2\x2\xC7"+
		"\xC8\x3\x2\x2\x2\xC8\xC6\x3\x2\x2\x2\xC8\xC9\x3\x2\x2\x2\xC9\xCA\x3\x2"+
		"\x2\x2\xCA\xCB\x5<\x1F\x2\xCB\xCC\x5&\x14\x2\xCC\x1F\x3\x2\x2\x2\xCD\xCE"+
		"\a\b\x2\x2\xCE!\x3\x2\x2\x2\xCF\xD1\x5<\x1F\x2\xD0\xCF\x3\x2\x2\x2\xD1"+
		"\xD4\x3\x2\x2\x2\xD2\xD0\x3\x2\x2\x2\xD2\xD3\x3\x2\x2\x2\xD3\xD5\x3\x2"+
		"\x2\x2\xD4\xD2\x3\x2\x2\x2\xD5\xD6\x5&\x14\x2\xD6#\x3\x2\x2\x2\xD7\xD9"+
		"\x5<\x1F\x2\xD8\xD7\x3\x2\x2\x2\xD9\xDC\x3\x2\x2\x2\xDA\xD8\x3\x2\x2\x2"+
		"\xDA\xDB\x3\x2\x2\x2\xDB\xDD\x3\x2\x2\x2\xDC\xDA\x3\x2\x2\x2\xDD\xDF\x5"+
		"\b\x5\x2\xDE\xDA\x3\x2\x2\x2\xDF\xE0\x3\x2\x2\x2\xE0\xDE\x3\x2\x2\x2\xE0"+
		"\xE1\x3\x2\x2\x2\xE1%\x3\x2\x2\x2\xE2\xE4\x5\x44#\x2\xE3\xE2\x3\x2\x2"+
		"\x2\xE4\xE5\x3\x2\x2\x2\xE5\xE3\x3\x2\x2\x2\xE5\xE6\x3\x2\x2\x2\xE6\xEA"+
		"\x3\x2\x2\x2\xE7\xE9\x5(\x15\x2\xE8\xE7\x3\x2\x2\x2\xE9\xEC\x3\x2\x2\x2"+
		"\xEA\xE8\x3\x2\x2\x2\xEA\xEB\x3\x2\x2\x2\xEB\x103\x3\x2\x2\x2\xEC\xEA"+
		"\x3\x2\x2\x2\xED\xF1\x5\x34\x1B\x2\xEE\xF0\x5\"\x12\x2\xEF\xEE\x3\x2\x2"+
		"\x2\xF0\xF3\x3\x2\x2\x2\xF1\xEF\x3\x2\x2\x2\xF1\xF2\x3\x2\x2\x2\xF2\x103"+
		"\x3\x2\x2\x2\xF3\xF1\x3\x2\x2\x2\xF4\xF8\x5\x36\x1C\x2\xF5\xF7\x5\"\x12"+
		"\x2\xF6\xF5\x3\x2\x2\x2\xF7\xFA\x3\x2\x2\x2\xF8\xF6\x3\x2\x2\x2\xF8\xF9"+
		"\x3\x2\x2\x2\xF9\x103\x3\x2\x2\x2\xFA\xF8\x3\x2\x2\x2\xFB\xFF\x5\x38\x1D"+
		"\x2\xFC\xFE\x5\"\x12\x2\xFD\xFC\x3\x2\x2\x2\xFE\x101\x3\x2\x2\x2\xFF\xFD"+
		"\x3\x2\x2\x2\xFF\x100\x3\x2\x2\x2\x100\x103\x3\x2\x2\x2\x101\xFF\x3\x2"+
		"\x2\x2\x102\xE3\x3\x2\x2\x2\x102\xED\x3\x2\x2\x2\x102\xF4\x3\x2\x2\x2"+
		"\x102\xFB\x3\x2\x2\x2\x103\'\x3\x2\x2\x2\x104\x10C\x5<\x1F\x2\x105\x10C"+
		"\x5\x44#\x2\x106\x10C\a\b\x2\x2\x107\x10C\a\a\x2\x2\x108\x10C\a\x13\x2"+
		"\x2\x109\x10C\a\x15\x2\x2\x10A\x10C\a\t\x2\x2\x10B\x104\x3\x2\x2\x2\x10B"+
		"\x105\x3\x2\x2\x2\x10B\x106\x3\x2\x2\x2\x10B\x107\x3\x2\x2\x2\x10B\x108"+
		"\x3\x2\x2\x2\x10B\x109\x3\x2\x2\x2\x10B\x10A\x3\x2\x2\x2\x10C)\x3\x2\x2"+
		"\x2\x10D\x111\x5<\x1F\x2\x10E\x111\x5\x42\"\x2\x10F\x111\a\x16\x2\x2\x110"+
		"\x10D\x3\x2\x2\x2\x110\x10E\x3\x2\x2\x2\x110\x10F\x3\x2\x2\x2\x111\x114"+
		"\x3\x2\x2\x2\x112\x110\x3\x2\x2\x2\x112\x113\x3\x2\x2\x2\x113+\x3\x2\x2"+
		"\x2\x114\x112\x3\x2\x2\x2\x115\x11A\a\x3\x2\x2\x116\x119\x5<\x1F\x2\x117"+
		"\x119\x5\x42\"\x2\x118\x116\x3\x2\x2\x2\x118\x117\x3\x2\x2\x2\x119\x11C"+
		"\x3\x2\x2\x2\x11A\x11B\x3\x2\x2\x2\x11A\x118\x3\x2\x2\x2\x11B\x11D\x3"+
		"\x2\x2\x2\x11C\x11A\x3\x2\x2\x2\x11D\x128\a\x3\x2\x2\x11E\x123\a\x4\x2"+
		"\x2\x11F\x122\x5<\x1F\x2\x120\x122\x5\x42\"\x2\x121\x11F\x3\x2\x2\x2\x121"+
		"\x120\x3\x2\x2\x2\x122\x125\x3\x2\x2\x2\x123\x124\x3\x2\x2\x2\x123\x121"+
		"\x3\x2\x2\x2\x124\x126\x3\x2\x2\x2\x125\x123\x3\x2\x2\x2\x126\x128\a\x4"+
		"\x2\x2\x127\x115\x3\x2\x2\x2\x127\x11E\x3\x2\x2\x2\x128-\x3\x2\x2\x2\x129"+
		"\x12A\x5:\x1E\x2\x12A/\x3\x2\x2\x2\x12B\x12D\x5\x46$\x2\x12C\x12B\x3\x2"+
		"\x2\x2\x12D\x130\x3\x2\x2\x2\x12E\x12C\x3\x2\x2\x2\x12E\x12F\x3\x2\x2"+
		"\x2\x12F\x131\x3\x2\x2\x2\x130\x12E\x3\x2\x2\x2\x131\x135\x5.\x18\x2\x132"+
		"\x134\x5\x46$\x2\x133\x132\x3\x2\x2\x2\x134\x137\x3\x2\x2\x2\x135\x133"+
		"\x3\x2\x2\x2\x135\x136\x3\x2\x2\x2\x136\x138\x3\x2\x2\x2\x137\x135\x3"+
		"\x2\x2\x2\x138\x13C\a\x11\x2\x2\x139\x13B\x5\x46$\x2\x13A\x139\x3\x2\x2"+
		"\x2\x13B\x13E\x3\x2\x2\x2\x13C\x13A\x3\x2\x2\x2\x13C\x13D\x3\x2\x2\x2"+
		"\x13D\x13F\x3\x2\x2\x2\x13E\x13C\x3\x2\x2\x2\x13F\x140\x5,\x17\x2\x140"+
		"\x31\x3\x2\x2\x2\x141\x142\x5:\x1E\x2\x142\x33\x3\x2\x2\x2\x143\x145\x5"+
		"(\x15\x2\x144\x143\x3\x2\x2\x2\x145\x148\x3\x2\x2\x2\x146\x144\x3\x2\x2"+
		"\x2\x146\x147\x3\x2\x2\x2\x147\x149\x3\x2\x2\x2\x148\x146\x3\x2\x2\x2"+
		"\x149\x155\a\x5\x2\x2\x14A\x154\x5\x46$\x2\x14B\x154\x5\x44#\x2\x14C\x154"+
		"\a\b\x2\x2\x14D\x154\a\a\x2\x2\x14E\x154\a\x14\x2\x2\x14F\x154\a\x13\x2"+
		"\x2\x150\x154\a\x15\x2\x2\x151\x154\a\t\x2\x2\x152\x154\x5\x34\x1B\x2"+
		"\x153\x14A\x3\x2\x2\x2\x153\x14B\x3\x2\x2\x2\x153\x14C\x3\x2\x2\x2\x153"+
		"\x14D\x3\x2\x2\x2\x153\x14E\x3\x2\x2\x2\x153\x14F\x3\x2\x2\x2\x153\x150"+
		"\x3\x2\x2\x2\x153\x151\x3\x2\x2\x2\x153\x152\x3\x2\x2\x2\x154\x157\x3"+
		"\x2\x2\x2\x155\x153\x3\x2\x2\x2\x155\x156\x3\x2\x2\x2\x156\x158\x3\x2"+
		"\x2\x2\x157\x155\x3\x2\x2\x2\x158\x159\a\x6\x2\x2\x159\x35\x3\x2\x2\x2"+
		"\x15A\x15C\x5(\x15\x2\x15B\x15A\x3\x2\x2\x2\x15C\x15F\x3\x2\x2\x2\x15D"+
		"\x15B\x3\x2\x2\x2\x15D\x15E\x3\x2\x2\x2\x15E\x160\x3\x2\x2\x2\x15F\x15D"+
		"\x3\x2\x2\x2\x160\x161\a\x13\x2\x2\x161\x165\x5\x32\x1A\x2\x162\x164\x5"+
		"\x30\x19\x2\x163\x162\x3\x2\x2\x2\x164\x167\x3\x2\x2\x2\x165\x163\x3\x2"+
		"\x2\x2\x165\x166\x3\x2\x2\x2\x166\x16B\x3\x2\x2\x2\x167\x165\x3\x2\x2"+
		"\x2\x168\x16A\x5\x46$\x2\x169\x168\x3\x2\x2\x2\x16A\x16D\x3\x2\x2\x2\x16B"+
		"\x169\x3\x2\x2\x2\x16B\x16C\x3\x2\x2\x2\x16C\x16F\x3\x2\x2\x2\x16D\x16B"+
		"\x3\x2\x2\x2\x16E\x170\a\x15\x2\x2\x16F\x16E\x3\x2\x2\x2\x16F\x170\x3"+
		"\x2\x2\x2\x170\x171\x3\x2\x2\x2\x171\x172\a\x14\x2\x2\x172\x37\x3\x2\x2"+
		"\x2\x173\x175\x5(\x15\x2\x174\x173\x3\x2\x2\x2\x175\x178\x3\x2\x2\x2\x176"+
		"\x174\x3\x2\x2\x2\x176\x177\x3\x2\x2\x2\x177\x179\x3\x2\x2\x2\x178\x176"+
		"\x3\x2\x2\x2\x179\x17A\a\x13\x2\x2\x17A\x17B\a\x15\x2\x2\x17B\x17F\x5"+
		"\x32\x1A\x2\x17C\x17E\x5\x46$\x2\x17D\x17C\x3\x2\x2\x2\x17E\x181\x3\x2"+
		"\x2\x2\x17F\x17D\x3\x2\x2\x2\x17F\x180\x3\x2\x2\x2\x180\x182\x3\x2\x2"+
		"\x2\x181\x17F\x3\x2\x2\x2\x182\x183\a\x14\x2\x2\x183\x39\x3\x2\x2\x2\x184"+
		"\x186\t\x2\x2\x2\x185\x184\x3\x2\x2\x2\x186\x187\x3\x2\x2\x2\x187\x185"+
		"\x3\x2\x2\x2\x187\x188\x3\x2\x2\x2\x188\x18C\x3\x2\x2\x2\x189\x18B\t\x3"+
		"\x2\x2\x18A\x189\x3\x2\x2\x2\x18B\x18E\x3\x2\x2\x2\x18C\x18A\x3\x2\x2"+
		"\x2\x18C\x18D\x3\x2\x2\x2\x18D;\x3\x2\x2\x2\x18E\x18C\x3\x2\x2\x2\x18F"+
		"\x192\x5> \x2\x190\x192\x5@!\x2\x191\x18F\x3\x2\x2\x2\x191\x190\x3\x2"+
		"\x2\x2\x192=\x3\x2\x2\x2\x193\x194\a\x12\x2\x2\x194?\x3\x2\x2\x2\x195"+
		"\x196\a\x10\x2\x2\x196\x41\x3\x2\x2\x2\x197\x19F\x5\x44#\x2\x198\x19F"+
		"\a\b\x2\x2\x199\x19F\a\a\x2\x2\x19A\x19F\a\x13\x2\x2\x19B\x19F\a\x14\x2"+
		"\x2\x19C\x19F\a\x15\x2\x2\x19D\x19F\a\t\x2\x2\x19E\x197\x3\x2\x2\x2\x19E"+
		"\x198\x3\x2\x2\x2\x19E\x199\x3\x2\x2\x2\x19E\x19A\x3\x2\x2\x2\x19E\x19B"+
		"\x3\x2\x2\x2\x19E\x19C\x3\x2\x2\x2\x19E\x19D\x3\x2\x2\x2\x19F\x43\x3\x2"+
		"\x2\x2\x1A0\x1A1\t\x4\x2\x2\x1A1\x45\x3\x2\x2\x2\x1A2\x1A5\x5<\x1F\x2"+
		"\x1A3\x1A5\a\x16\x2\x2\x1A4\x1A2\x3\x2\x2\x2\x1A4\x1A3\x3\x2\x2\x2\x1A5"+
		"G\x3\x2\x2\x2<KO\\`\x63qsw{\x82\x8A\x8C\x90\x92\x9B\x9E\xA6\xA8\xAC\xB0"+
		"\xB7\xBB\xBF\xC8\xD2\xDA\xE0\xE5\xEA\xF1\xF8\xFF\x102\x10B\x110\x112\x118"+
		"\x11A\x121\x123\x127\x12E\x135\x13C\x146\x153\x155\x15D\x165\x16B\x16F"+
		"\x176\x17F\x187\x18C\x191\x19E\x1A4";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace TxMark.Compiler
