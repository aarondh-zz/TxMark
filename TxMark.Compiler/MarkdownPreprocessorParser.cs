//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5-SNAPSHOT
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\v-adai\Documents\Visual Studio 2015\Projects\TxMark\TxMark.Antlr\MarkdownPreprocessor.g4 by ANTLR 4.5-SNAPSHOT

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace TxMark.Compiler {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5-SNAPSHOT")]
[System.CLSCompliant(false)]
public partial class MarkdownPreprocessorParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, DIGITS=7, PUNCTUATION=8, 
		TAB=9, SPACE=10, CARRIAGE_RETURN=11, NON_WHITESPACE=12;
	public const int
		RULE_document = 0, RULE_content = 1, RULE_line = 2, RULE_list = 3, RULE_listItem = 4, 
		RULE_indentedText = 5, RULE_listItemIndicator = 6, RULE_blockquote = 7, 
		RULE_blockquoteItem = 8, RULE_blockQuoteElement = 9, RULE_blockQuoteListItem = 10, 
		RULE_blockquoteIndicator = 11, RULE_heading = 12, RULE_headingIndicator = 13, 
		RULE_textLine = 14, RULE_paragraph_end = 15, RULE_text = 16, RULE_attributeContent = 17, 
		RULE_tag = 18, RULE_openTag = 19, RULE_closeTag = 20, RULE_nonWhitespace = 21, 
		RULE_whitespace = 22, RULE_space = 23, RULE_tab = 24, RULE_carriageReturn = 25, 
		RULE_softCarriageReturn = 26, RULE_hardCarriageReturn = 27;
	public static readonly string[] ruleNames = {
		"document", "content", "line", "list", "listItem", "indentedText", "listItemIndicator", 
		"blockquote", "blockquoteItem", "blockQuoteElement", "blockQuoteListItem", 
		"blockquoteIndicator", "heading", "headingIndicator", "textLine", "paragraph_end", 
		"text", "attributeContent", "tag", "openTag", "closeTag", "nonWhitespace", 
		"whitespace", "space", "tab", "carriageReturn", "softCarriageReturn", 
		"hardCarriageReturn"
	};

	private static readonly string[] _LiteralNames = {
		null, "'*'", "'.'", "'>'", "'#'", "'<'", "'/'", null, null, "'\t'", "' '"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, "DIGITS", "PUNCTUATION", "TAB", 
		"SPACE", "CARRIAGE_RETURN", "NON_WHITESPACE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MarkdownPreprocessor.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public MarkdownPreprocessorParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class DocumentContext : ParserRuleContext {
		public ContentContext content() {
			return GetRuleContext<ContentContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(MarkdownPreprocessorParser.Eof, 0); }
		public DocumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_document; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.EnterDocument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.ExitDocument(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownPreprocessorVisitor<TResult> typedVisitor = visitor as IMarkdownPreprocessorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDocument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DocumentContext document() {
		DocumentContext _localctx = new DocumentContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_document);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 56; content();
			State = 57; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContentContext : ParserRuleContext {
		public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public ContentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_content; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.EnterContent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.ExitContent(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownPreprocessorVisitor<TResult> typedVisitor = visitor as IMarkdownPreprocessorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContentContext content() {
		ContentContext _localctx = new ContentContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_content);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 62;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << DIGITS) | (1L << PUNCTUATION) | (1L << TAB) | (1L << SPACE) | (1L << CARRIAGE_RETURN) | (1L << NON_WHITESPACE))) != 0)) {
				{
				{
				State = 59; line();
				}
				}
				State = 64;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineContext : ParserRuleContext {
		public HeadingContext heading() {
			return GetRuleContext<HeadingContext>(0);
		}
		public CarriageReturnContext carriageReturn() {
			return GetRuleContext<CarriageReturnContext>(0);
		}
		public ListContext list() {
			return GetRuleContext<ListContext>(0);
		}
		public BlockquoteContext blockquote() {
			return GetRuleContext<BlockquoteContext>(0);
		}
		public TextLineContext textLine() {
			return GetRuleContext<TextLineContext>(0);
		}
		public Paragraph_endContext paragraph_end() {
			return GetRuleContext<Paragraph_endContext>(0);
		}
		public LineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_line; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.EnterLine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.ExitLine(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownPreprocessorVisitor<TResult> typedVisitor = visitor as IMarkdownPreprocessorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineContext line() {
		LineContext _localctx = new LineContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_line);
		try {
			State = 74;
			switch ( Interpreter.AdaptivePredict(_input,1,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 65; heading();
				State = 66; carriageReturn();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 68; list();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 69; blockquote();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 70; textLine();
				State = 71; carriageReturn();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 73; paragraph_end();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListContext : ParserRuleContext {
		public ListItemContext[] listItem() {
			return GetRuleContexts<ListItemContext>();
		}
		public ListItemContext listItem(int i) {
			return GetRuleContext<ListItemContext>(i);
		}
		public CarriageReturnContext[] carriageReturn() {
			return GetRuleContexts<CarriageReturnContext>();
		}
		public CarriageReturnContext carriageReturn(int i) {
			return GetRuleContext<CarriageReturnContext>(i);
		}
		public IndentedTextContext[] indentedText() {
			return GetRuleContexts<IndentedTextContext>();
		}
		public IndentedTextContext indentedText(int i) {
			return GetRuleContext<IndentedTextContext>(i);
		}
		public ListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.EnterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.ExitList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownPreprocessorVisitor<TResult> typedVisitor = visitor as IMarkdownPreprocessorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListContext list() {
		ListContext _localctx = new ListContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 82;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					State = 82;
					switch (_input.La(1)) {
					case T__0:
					case DIGITS:
						{
						State = 76; listItem();
						State = 77; carriageReturn();
						}
						break;
					case TAB:
					case SPACE:
						{
						State = 79; indentedText();
						State = 80; carriageReturn();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 84;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,3,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListItemContext : ParserRuleContext {
		public TextContext text() {
			return GetRuleContext<TextContext>(0);
		}
		public ListItemIndicatorContext[] listItemIndicator() {
			return GetRuleContexts<ListItemIndicatorContext>();
		}
		public ListItemIndicatorContext listItemIndicator(int i) {
			return GetRuleContext<ListItemIndicatorContext>(i);
		}
		public WhitespaceContext[] whitespace() {
			return GetRuleContexts<WhitespaceContext>();
		}
		public WhitespaceContext whitespace(int i) {
			return GetRuleContext<WhitespaceContext>(i);
		}
		public ListItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_listItem; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.EnterListItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.ExitListItem(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownPreprocessorVisitor<TResult> typedVisitor = visitor as IMarkdownPreprocessorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListItem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListItemContext listItem() {
		ListItemContext _localctx = new ListItemContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_listItem);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 90;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 86; listItemIndicator();
					State = 88;
					_la = _input.La(1);
					if (_la==TAB || _la==SPACE) {
						{
						State = 87; whitespace();
						}
					}

					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 92;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,5,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 94; text();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndentedTextContext : ParserRuleContext {
		public TextContext text() {
			return GetRuleContext<TextContext>(0);
		}
		public SpaceContext[] space() {
			return GetRuleContexts<SpaceContext>();
		}
		public SpaceContext space(int i) {
			return GetRuleContext<SpaceContext>(i);
		}
		public TabContext[] tab() {
			return GetRuleContexts<TabContext>();
		}
		public TabContext tab(int i) {
			return GetRuleContext<TabContext>(i);
		}
		public IndentedTextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indentedText; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.EnterIndentedText(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.ExitIndentedText(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownPreprocessorVisitor<TResult> typedVisitor = visitor as IMarkdownPreprocessorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndentedText(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndentedTextContext indentedText() {
		IndentedTextContext _localctx = new IndentedTextContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_indentedText);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 109;
			switch (_input.La(1)) {
			case TAB:
				{
				State = 97;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 96; tab();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 99;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,6,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;
			case SPACE:
				{
				State = 101; space();
				State = 102; space();
				State = 103; space();
				State = 105;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 104; space();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 107;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,7,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 115;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==TAB || _la==SPACE) {
				{
				State = 113;
				switch (_input.La(1)) {
				case TAB:
					{
					State = 111; tab();
					}
					break;
				case SPACE:
					{
					State = 112; space();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 117;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 118; text();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListItemIndicatorContext : ParserRuleContext {
		public ITerminalNode DIGITS() { return GetToken(MarkdownPreprocessorParser.DIGITS, 0); }
		public ListItemIndicatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_listItemIndicator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.EnterListItemIndicator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.ExitListItemIndicator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownPreprocessorVisitor<TResult> typedVisitor = visitor as IMarkdownPreprocessorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListItemIndicator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListItemIndicatorContext listItemIndicator() {
		ListItemIndicatorContext _localctx = new ListItemIndicatorContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_listItemIndicator);
		try {
			State = 123;
			switch (_input.La(1)) {
			case T__0:
				EnterOuterAlt(_localctx, 1);
				{
				State = 120; Match(T__0);
				}
				break;
			case DIGITS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 121; Match(DIGITS);
				State = 122; Match(T__1);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockquoteContext : ParserRuleContext {
		public BlockquoteItemContext[] blockquoteItem() {
			return GetRuleContexts<BlockquoteItemContext>();
		}
		public BlockquoteItemContext blockquoteItem(int i) {
			return GetRuleContext<BlockquoteItemContext>(i);
		}
		public CarriageReturnContext[] carriageReturn() {
			return GetRuleContexts<CarriageReturnContext>();
		}
		public CarriageReturnContext carriageReturn(int i) {
			return GetRuleContext<CarriageReturnContext>(i);
		}
		public IndentedTextContext[] indentedText() {
			return GetRuleContexts<IndentedTextContext>();
		}
		public IndentedTextContext indentedText(int i) {
			return GetRuleContext<IndentedTextContext>(i);
		}
		public BlockquoteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockquote; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.EnterBlockquote(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.ExitBlockquote(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownPreprocessorVisitor<TResult> typedVisitor = visitor as IMarkdownPreprocessorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockquote(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockquoteContext blockquote() {
		BlockquoteContext _localctx = new BlockquoteContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_blockquote);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 131;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					State = 131;
					switch (_input.La(1)) {
					case T__2:
						{
						State = 125; blockquoteItem();
						State = 126; carriageReturn();
						}
						break;
					case TAB:
					case SPACE:
						{
						State = 128; indentedText();
						State = 129; carriageReturn();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 133;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,13,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockquoteItemContext : ParserRuleContext {
		public BlockQuoteElementContext blockQuoteElement() {
			return GetRuleContext<BlockQuoteElementContext>(0);
		}
		public BlockquoteIndicatorContext[] blockquoteIndicator() {
			return GetRuleContexts<BlockquoteIndicatorContext>();
		}
		public BlockquoteIndicatorContext blockquoteIndicator(int i) {
			return GetRuleContext<BlockquoteIndicatorContext>(i);
		}
		public WhitespaceContext[] whitespace() {
			return GetRuleContexts<WhitespaceContext>();
		}
		public WhitespaceContext whitespace(int i) {
			return GetRuleContext<WhitespaceContext>(i);
		}
		public BlockquoteItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockquoteItem; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.EnterBlockquoteItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.ExitBlockquoteItem(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownPreprocessorVisitor<TResult> typedVisitor = visitor as IMarkdownPreprocessorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockquoteItem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockquoteItemContext blockquoteItem() {
		BlockquoteItemContext _localctx = new BlockquoteItemContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_blockquoteItem);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 139;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 135; blockquoteIndicator();
				State = 137;
				switch ( Interpreter.AdaptivePredict(_input,14,_ctx) ) {
				case 1:
					{
					State = 136; whitespace();
					}
					break;
				}
				}
				}
				State = 141;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==T__2 );
			State = 143; blockQuoteElement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockQuoteElementContext : ParserRuleContext {
		public HeadingContext heading() {
			return GetRuleContext<HeadingContext>(0);
		}
		public BlockQuoteListItemContext blockQuoteListItem() {
			return GetRuleContext<BlockQuoteListItemContext>(0);
		}
		public TextLineContext textLine() {
			return GetRuleContext<TextLineContext>(0);
		}
		public BlockQuoteElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockQuoteElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.EnterBlockQuoteElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.ExitBlockQuoteElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownPreprocessorVisitor<TResult> typedVisitor = visitor as IMarkdownPreprocessorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockQuoteElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockQuoteElementContext blockQuoteElement() {
		BlockQuoteElementContext _localctx = new BlockQuoteElementContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_blockQuoteElement);
		try {
			State = 148;
			switch ( Interpreter.AdaptivePredict(_input,16,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 145; heading();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 146; blockQuoteListItem();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 147; textLine();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockQuoteListItemContext : ParserRuleContext {
		public TextContext text() {
			return GetRuleContext<TextContext>(0);
		}
		public ListItemIndicatorContext[] listItemIndicator() {
			return GetRuleContexts<ListItemIndicatorContext>();
		}
		public ListItemIndicatorContext listItemIndicator(int i) {
			return GetRuleContext<ListItemIndicatorContext>(i);
		}
		public WhitespaceContext[] whitespace() {
			return GetRuleContexts<WhitespaceContext>();
		}
		public WhitespaceContext whitespace(int i) {
			return GetRuleContext<WhitespaceContext>(i);
		}
		public BlockQuoteListItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockQuoteListItem; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.EnterBlockQuoteListItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.ExitBlockQuoteListItem(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownPreprocessorVisitor<TResult> typedVisitor = visitor as IMarkdownPreprocessorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockQuoteListItem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockQuoteListItemContext blockQuoteListItem() {
		BlockQuoteListItemContext _localctx = new BlockQuoteListItemContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_blockQuoteListItem);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 154;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 150; listItemIndicator();
					State = 152;
					_la = _input.La(1);
					if (_la==TAB || _la==SPACE) {
						{
						State = 151; whitespace();
						}
					}

					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 156;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,18,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 158; text();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockquoteIndicatorContext : ParserRuleContext {
		public BlockquoteIndicatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockquoteIndicator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.EnterBlockquoteIndicator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.ExitBlockquoteIndicator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownPreprocessorVisitor<TResult> typedVisitor = visitor as IMarkdownPreprocessorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockquoteIndicator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockquoteIndicatorContext blockquoteIndicator() {
		BlockquoteIndicatorContext _localctx = new BlockquoteIndicatorContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_blockquoteIndicator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 160; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HeadingContext : ParserRuleContext {
		public WhitespaceContext whitespace() {
			return GetRuleContext<WhitespaceContext>(0);
		}
		public TextContext text() {
			return GetRuleContext<TextContext>(0);
		}
		public HeadingIndicatorContext[] headingIndicator() {
			return GetRuleContexts<HeadingIndicatorContext>();
		}
		public HeadingIndicatorContext headingIndicator(int i) {
			return GetRuleContext<HeadingIndicatorContext>(i);
		}
		public HeadingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_heading; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.EnterHeading(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.ExitHeading(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownPreprocessorVisitor<TResult> typedVisitor = visitor as IMarkdownPreprocessorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHeading(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HeadingContext heading() {
		HeadingContext _localctx = new HeadingContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_heading);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 163;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 162; headingIndicator();
				}
				}
				State = 165;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==T__3 );
			State = 167; whitespace();
			State = 168; text();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HeadingIndicatorContext : ParserRuleContext {
		public HeadingIndicatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_headingIndicator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.EnterHeadingIndicator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.ExitHeadingIndicator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownPreprocessorVisitor<TResult> typedVisitor = visitor as IMarkdownPreprocessorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHeadingIndicator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HeadingIndicatorContext headingIndicator() {
		HeadingIndicatorContext _localctx = new HeadingIndicatorContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_headingIndicator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 170; Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TextLineContext : ParserRuleContext {
		public TextContext text() {
			return GetRuleContext<TextContext>(0);
		}
		public WhitespaceContext[] whitespace() {
			return GetRuleContexts<WhitespaceContext>();
		}
		public WhitespaceContext whitespace(int i) {
			return GetRuleContext<WhitespaceContext>(i);
		}
		public TextLineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_textLine; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.EnterTextLine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.ExitTextLine(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownPreprocessorVisitor<TResult> typedVisitor = visitor as IMarkdownPreprocessorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTextLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TextLineContext textLine() {
		TextLineContext _localctx = new TextLineContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_textLine);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 175;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==TAB || _la==SPACE) {
				{
				{
				State = 172; whitespace();
				}
				}
				State = 177;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 178; text();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Paragraph_endContext : ParserRuleContext {
		public CarriageReturnContext[] carriageReturn() {
			return GetRuleContexts<CarriageReturnContext>();
		}
		public CarriageReturnContext carriageReturn(int i) {
			return GetRuleContext<CarriageReturnContext>(i);
		}
		public WhitespaceContext[] whitespace() {
			return GetRuleContexts<WhitespaceContext>();
		}
		public WhitespaceContext whitespace(int i) {
			return GetRuleContext<WhitespaceContext>(i);
		}
		public Paragraph_endContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_paragraph_end; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.EnterParagraph_end(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.ExitParagraph_end(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownPreprocessorVisitor<TResult> typedVisitor = visitor as IMarkdownPreprocessorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParagraph_end(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Paragraph_endContext paragraph_end() {
		Paragraph_endContext _localctx = new Paragraph_endContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_paragraph_end);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 187;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 183;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,21,_ctx);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
						if ( _alt==1 ) {
							{
							{
							State = 180; whitespace();
							}
							} 
						}
						State = 185;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,21,_ctx);
					}
					State = 186; carriageReturn();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 189;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,22,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TextContext : ParserRuleContext {
		public NonWhitespaceContext[] nonWhitespace() {
			return GetRuleContexts<NonWhitespaceContext>();
		}
		public NonWhitespaceContext nonWhitespace(int i) {
			return GetRuleContext<NonWhitespaceContext>(i);
		}
		public WhitespaceContext[] whitespace() {
			return GetRuleContexts<WhitespaceContext>();
		}
		public WhitespaceContext whitespace(int i) {
			return GetRuleContext<WhitespaceContext>(i);
		}
		public OpenTagContext openTag() {
			return GetRuleContext<OpenTagContext>(0);
		}
		public TextLineContext[] textLine() {
			return GetRuleContexts<TextLineContext>();
		}
		public TextLineContext textLine(int i) {
			return GetRuleContext<TextLineContext>(i);
		}
		public CloseTagContext closeTag() {
			return GetRuleContext<CloseTagContext>(0);
		}
		public TextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_text; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.EnterText(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.ExitText(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownPreprocessorVisitor<TResult> typedVisitor = visitor as IMarkdownPreprocessorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitText(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TextContext text() {
		TextContext _localctx = new TextContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_text);
		try {
			int _alt;
			State = 217;
			switch ( Interpreter.AdaptivePredict(_input,27,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 191; nonWhitespace();
				State = 200;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,24,_ctx);
				while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1+1 ) {
						{
						State = 198;
						switch (_input.La(1)) {
						case TAB:
						case SPACE:
							{
							State = 192; whitespace();
							}
							break;
						case DIGITS:
						case PUNCTUATION:
						case NON_WHITESPACE:
							{
							State = 193; nonWhitespace();
							}
							break;
						case T__3:
							{
							State = 194; Match(T__3);
							}
							break;
						case T__0:
							{
							State = 195; Match(T__0);
							}
							break;
						case T__2:
							{
							State = 196; Match(T__2);
							}
							break;
						case T__1:
							{
							State = 197; Match(T__1);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						} 
					}
					State = 202;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,24,_ctx);
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 203; openTag();
				State = 207;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,25,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 204; textLine();
						}
						} 
					}
					State = 209;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,25,_ctx);
				}
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 210; closeTag();
				State = 214;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,26,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 211; textLine();
						}
						} 
					}
					State = 216;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,26,_ctx);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeContentContext : ParserRuleContext {
		public WhitespaceContext[] whitespace() {
			return GetRuleContexts<WhitespaceContext>();
		}
		public WhitespaceContext whitespace(int i) {
			return GetRuleContext<WhitespaceContext>(i);
		}
		public NonWhitespaceContext[] nonWhitespace() {
			return GetRuleContexts<NonWhitespaceContext>();
		}
		public NonWhitespaceContext nonWhitespace(int i) {
			return GetRuleContext<NonWhitespaceContext>(i);
		}
		public ITerminalNode[] CARRIAGE_RETURN() { return GetTokens(MarkdownPreprocessorParser.CARRIAGE_RETURN); }
		public ITerminalNode CARRIAGE_RETURN(int i) {
			return GetToken(MarkdownPreprocessorParser.CARRIAGE_RETURN, i);
		}
		public AttributeContentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributeContent; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.EnterAttributeContent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.ExitAttributeContent(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownPreprocessorVisitor<TResult> typedVisitor = visitor as IMarkdownPreprocessorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttributeContent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeContentContext attributeContent() {
		AttributeContentContext _localctx = new AttributeContentContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_attributeContent);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 227;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__3) | (1L << DIGITS) | (1L << PUNCTUATION) | (1L << TAB) | (1L << SPACE) | (1L << CARRIAGE_RETURN) | (1L << NON_WHITESPACE))) != 0)) {
				{
				State = 225;
				switch (_input.La(1)) {
				case TAB:
				case SPACE:
					{
					State = 219; whitespace();
					}
					break;
				case DIGITS:
				case PUNCTUATION:
				case NON_WHITESPACE:
					{
					State = 220; nonWhitespace();
					}
					break;
				case T__3:
					{
					State = 221; Match(T__3);
					}
					break;
				case T__0:
					{
					State = 222; Match(T__0);
					}
					break;
				case T__1:
					{
					State = 223; Match(T__1);
					}
					break;
				case CARRIAGE_RETURN:
					{
					State = 224; Match(CARRIAGE_RETURN);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 229;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TagContext : ParserRuleContext {
		public NonWhitespaceContext[] nonWhitespace() {
			return GetRuleContexts<NonWhitespaceContext>();
		}
		public NonWhitespaceContext nonWhitespace(int i) {
			return GetRuleContext<NonWhitespaceContext>(i);
		}
		public TagContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tag; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.EnterTag(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.ExitTag(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownPreprocessorVisitor<TResult> typedVisitor = visitor as IMarkdownPreprocessorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTag(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TagContext tag() {
		TagContext _localctx = new TagContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_tag);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 231;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 230; nonWhitespace();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 233;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,30,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpenTagContext : ParserRuleContext {
		public TagContext tag() {
			return GetRuleContext<TagContext>(0);
		}
		public AttributeContentContext attributeContent() {
			return GetRuleContext<AttributeContentContext>(0);
		}
		public OpenTagContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_openTag; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.EnterOpenTag(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.ExitOpenTag(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownPreprocessorVisitor<TResult> typedVisitor = visitor as IMarkdownPreprocessorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpenTag(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpenTagContext openTag() {
		OpenTagContext _localctx = new OpenTagContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_openTag);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 235; Match(T__4);
			State = 236; tag();
			State = 237; attributeContent();
			State = 239;
			_la = _input.La(1);
			if (_la==T__5) {
				{
				State = 238; Match(T__5);
				}
			}

			State = 241; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CloseTagContext : ParserRuleContext {
		public TagContext tag() {
			return GetRuleContext<TagContext>(0);
		}
		public WhitespaceContext[] whitespace() {
			return GetRuleContexts<WhitespaceContext>();
		}
		public WhitespaceContext whitespace(int i) {
			return GetRuleContext<WhitespaceContext>(i);
		}
		public CloseTagContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_closeTag; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.EnterCloseTag(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.ExitCloseTag(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownPreprocessorVisitor<TResult> typedVisitor = visitor as IMarkdownPreprocessorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCloseTag(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CloseTagContext closeTag() {
		CloseTagContext _localctx = new CloseTagContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_closeTag);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 243; Match(T__4);
			State = 244; Match(T__5);
			State = 245; tag();
			State = 249;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==TAB || _la==SPACE) {
				{
				{
				State = 246; whitespace();
				}
				}
				State = 251;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 252; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NonWhitespaceContext : ParserRuleContext {
		public ITerminalNode NON_WHITESPACE() { return GetToken(MarkdownPreprocessorParser.NON_WHITESPACE, 0); }
		public ITerminalNode PUNCTUATION() { return GetToken(MarkdownPreprocessorParser.PUNCTUATION, 0); }
		public ITerminalNode DIGITS() { return GetToken(MarkdownPreprocessorParser.DIGITS, 0); }
		public NonWhitespaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nonWhitespace; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.EnterNonWhitespace(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.ExitNonWhitespace(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownPreprocessorVisitor<TResult> typedVisitor = visitor as IMarkdownPreprocessorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNonWhitespace(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NonWhitespaceContext nonWhitespace() {
		NonWhitespaceContext _localctx = new NonWhitespaceContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_nonWhitespace);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 254;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DIGITS) | (1L << PUNCTUATION) | (1L << NON_WHITESPACE))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhitespaceContext : ParserRuleContext {
		public SpaceContext space() {
			return GetRuleContext<SpaceContext>(0);
		}
		public TabContext tab() {
			return GetRuleContext<TabContext>(0);
		}
		public WhitespaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whitespace; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.EnterWhitespace(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.ExitWhitespace(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownPreprocessorVisitor<TResult> typedVisitor = visitor as IMarkdownPreprocessorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhitespace(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhitespaceContext whitespace() {
		WhitespaceContext _localctx = new WhitespaceContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_whitespace);
		try {
			State = 258;
			switch (_input.La(1)) {
			case SPACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 256; space();
				}
				break;
			case TAB:
				EnterOuterAlt(_localctx, 2);
				{
				State = 257; tab();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpaceContext : ParserRuleContext {
		public ITerminalNode SPACE() { return GetToken(MarkdownPreprocessorParser.SPACE, 0); }
		public SpaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_space; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.EnterSpace(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.ExitSpace(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownPreprocessorVisitor<TResult> typedVisitor = visitor as IMarkdownPreprocessorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpace(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpaceContext space() {
		SpaceContext _localctx = new SpaceContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_space);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 260; Match(SPACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TabContext : ParserRuleContext {
		public ITerminalNode TAB() { return GetToken(MarkdownPreprocessorParser.TAB, 0); }
		public TabContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tab; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.EnterTab(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.ExitTab(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownPreprocessorVisitor<TResult> typedVisitor = visitor as IMarkdownPreprocessorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTab(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TabContext tab() {
		TabContext _localctx = new TabContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_tab);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 262; Match(TAB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CarriageReturnContext : ParserRuleContext {
		public SoftCarriageReturnContext softCarriageReturn() {
			return GetRuleContext<SoftCarriageReturnContext>(0);
		}
		public HardCarriageReturnContext hardCarriageReturn() {
			return GetRuleContext<HardCarriageReturnContext>(0);
		}
		public CarriageReturnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_carriageReturn; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.EnterCarriageReturn(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.ExitCarriageReturn(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownPreprocessorVisitor<TResult> typedVisitor = visitor as IMarkdownPreprocessorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCarriageReturn(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CarriageReturnContext carriageReturn() {
		CarriageReturnContext _localctx = new CarriageReturnContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_carriageReturn);
		try {
			State = 266;
			switch (_input.La(1)) {
			case CARRIAGE_RETURN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 264; softCarriageReturn();
				}
				break;
			case SPACE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 265; hardCarriageReturn();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SoftCarriageReturnContext : ParserRuleContext {
		public ITerminalNode CARRIAGE_RETURN() { return GetToken(MarkdownPreprocessorParser.CARRIAGE_RETURN, 0); }
		public SoftCarriageReturnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_softCarriageReturn; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.EnterSoftCarriageReturn(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.ExitSoftCarriageReturn(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownPreprocessorVisitor<TResult> typedVisitor = visitor as IMarkdownPreprocessorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSoftCarriageReturn(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SoftCarriageReturnContext softCarriageReturn() {
		SoftCarriageReturnContext _localctx = new SoftCarriageReturnContext(_ctx, State);
		EnterRule(_localctx, 52, RULE_softCarriageReturn);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 268; Match(CARRIAGE_RETURN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HardCarriageReturnContext : ParserRuleContext {
		public SpaceContext[] space() {
			return GetRuleContexts<SpaceContext>();
		}
		public SpaceContext space(int i) {
			return GetRuleContext<SpaceContext>(i);
		}
		public ITerminalNode CARRIAGE_RETURN() { return GetToken(MarkdownPreprocessorParser.CARRIAGE_RETURN, 0); }
		public HardCarriageReturnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hardCarriageReturn; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.EnterHardCarriageReturn(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownPreprocessorListener typedListener = listener as IMarkdownPreprocessorListener;
			if (typedListener != null) typedListener.ExitHardCarriageReturn(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownPreprocessorVisitor<TResult> typedVisitor = visitor as IMarkdownPreprocessorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHardCarriageReturn(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HardCarriageReturnContext hardCarriageReturn() {
		HardCarriageReturnContext _localctx = new HardCarriageReturnContext(_ctx, State);
		EnterRule(_localctx, 54, RULE_hardCarriageReturn);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 270; space();
			State = 272;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 271; space();
				}
				}
				State = 274;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==SPACE );
			State = 276; Match(CARRIAGE_RETURN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\xE\x119\x4\x2\t"+
		"\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t"+
		"\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x3\x2\x3\x2\x3\x2\x3\x3\a\x3?\n\x3\f"+
		"\x3\xE\x3\x42\v\x3\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3"+
		"\x4\x5\x4M\n\x4\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x6\x5U\n\x5\r\x5\xE"+
		"\x5V\x3\x6\x3\x6\x5\x6[\n\x6\x6\x6]\n\x6\r\x6\xE\x6^\x3\x6\x3\x6\x3\a"+
		"\x6\a\x64\n\a\r\a\xE\a\x65\x3\a\x3\a\x3\a\x3\a\x6\al\n\a\r\a\xE\am\x5"+
		"\ap\n\a\x3\a\x3\a\a\at\n\a\f\a\xE\aw\v\a\x3\a\x3\a\x3\b\x3\b\x3\b\x5\b"+
		"~\n\b\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x6\t\x86\n\t\r\t\xE\t\x87\x3\n\x3"+
		"\n\x5\n\x8C\n\n\x6\n\x8E\n\n\r\n\xE\n\x8F\x3\n\x3\n\x3\v\x3\v\x3\v\x5"+
		"\v\x97\n\v\x3\f\x3\f\x5\f\x9B\n\f\x6\f\x9D\n\f\r\f\xE\f\x9E\x3\f\x3\f"+
		"\x3\r\x3\r\x3\xE\x6\xE\xA6\n\xE\r\xE\xE\xE\xA7\x3\xE\x3\xE\x3\xE\x3\xF"+
		"\x3\xF\x3\x10\a\x10\xB0\n\x10\f\x10\xE\x10\xB3\v\x10\x3\x10\x3\x10\x3"+
		"\x11\a\x11\xB8\n\x11\f\x11\xE\x11\xBB\v\x11\x3\x11\x6\x11\xBE\n\x11\r"+
		"\x11\xE\x11\xBF\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\a\x12"+
		"\xC9\n\x12\f\x12\xE\x12\xCC\v\x12\x3\x12\x3\x12\a\x12\xD0\n\x12\f\x12"+
		"\xE\x12\xD3\v\x12\x3\x12\x3\x12\a\x12\xD7\n\x12\f\x12\xE\x12\xDA\v\x12"+
		"\x5\x12\xDC\n\x12\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\a\x13\xE4"+
		"\n\x13\f\x13\xE\x13\xE7\v\x13\x3\x14\x6\x14\xEA\n\x14\r\x14\xE\x14\xEB"+
		"\x3\x15\x3\x15\x3\x15\x3\x15\x5\x15\xF2\n\x15\x3\x15\x3\x15\x3\x16\x3"+
		"\x16\x3\x16\x3\x16\a\x16\xFA\n\x16\f\x16\xE\x16\xFD\v\x16\x3\x16\x3\x16"+
		"\x3\x17\x3\x17\x3\x18\x3\x18\x5\x18\x105\n\x18\x3\x19\x3\x19\x3\x1A\x3"+
		"\x1A\x3\x1B\x3\x1B\x5\x1B\x10D\n\x1B\x3\x1C\x3\x1C\x3\x1D\x3\x1D\x6\x1D"+
		"\x113\n\x1D\r\x1D\xE\x1D\x114\x3\x1D\x3\x1D\x3\x1D\x3\xCA\x2\x2\x1E\x2"+
		"\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2"+
		"\x1A\x2\x1C\x2\x1E\x2 \x2\"\x2$\x2&\x2(\x2*\x2,\x2.\x2\x30\x2\x32\x2\x34"+
		"\x2\x36\x2\x38\x2\x2\x3\x4\x2\t\n\xE\xE\x12D\x2:\x3\x2\x2\x2\x4@\x3\x2"+
		"\x2\x2\x6L\x3\x2\x2\x2\bT\x3\x2\x2\x2\n\\\x3\x2\x2\x2\fo\x3\x2\x2\x2\xE"+
		"}\x3\x2\x2\x2\x10\x85\x3\x2\x2\x2\x12\x8D\x3\x2\x2\x2\x14\x96\x3\x2\x2"+
		"\x2\x16\x9C\x3\x2\x2\x2\x18\xA2\x3\x2\x2\x2\x1A\xA5\x3\x2\x2\x2\x1C\xAC"+
		"\x3\x2\x2\x2\x1E\xB1\x3\x2\x2\x2 \xBD\x3\x2\x2\x2\"\xDB\x3\x2\x2\x2$\xE5"+
		"\x3\x2\x2\x2&\xE9\x3\x2\x2\x2(\xED\x3\x2\x2\x2*\xF5\x3\x2\x2\x2,\x100"+
		"\x3\x2\x2\x2.\x104\x3\x2\x2\x2\x30\x106\x3\x2\x2\x2\x32\x108\x3\x2\x2"+
		"\x2\x34\x10C\x3\x2\x2\x2\x36\x10E\x3\x2\x2\x2\x38\x110\x3\x2\x2\x2:;\x5"+
		"\x4\x3\x2;<\a\x2\x2\x3<\x3\x3\x2\x2\x2=?\x5\x6\x4\x2>=\x3\x2\x2\x2?\x42"+
		"\x3\x2\x2\x2@>\x3\x2\x2\x2@\x41\x3\x2\x2\x2\x41\x5\x3\x2\x2\x2\x42@\x3"+
		"\x2\x2\x2\x43\x44\x5\x1A\xE\x2\x44\x45\x5\x34\x1B\x2\x45M\x3\x2\x2\x2"+
		"\x46M\x5\b\x5\x2GM\x5\x10\t\x2HI\x5\x1E\x10\x2IJ\x5\x34\x1B\x2JM\x3\x2"+
		"\x2\x2KM\x5 \x11\x2L\x43\x3\x2\x2\x2L\x46\x3\x2\x2\x2LG\x3\x2\x2\x2LH"+
		"\x3\x2\x2\x2LK\x3\x2\x2\x2M\a\x3\x2\x2\x2NO\x5\n\x6\x2OP\x5\x34\x1B\x2"+
		"PU\x3\x2\x2\x2QR\x5\f\a\x2RS\x5\x34\x1B\x2SU\x3\x2\x2\x2TN\x3\x2\x2\x2"+
		"TQ\x3\x2\x2\x2UV\x3\x2\x2\x2VT\x3\x2\x2\x2VW\x3\x2\x2\x2W\t\x3\x2\x2\x2"+
		"XZ\x5\xE\b\x2Y[\x5.\x18\x2ZY\x3\x2\x2\x2Z[\x3\x2\x2\x2[]\x3\x2\x2\x2\\"+
		"X\x3\x2\x2\x2]^\x3\x2\x2\x2^\\\x3\x2\x2\x2^_\x3\x2\x2\x2_`\x3\x2\x2\x2"+
		"`\x61\x5\"\x12\x2\x61\v\x3\x2\x2\x2\x62\x64\x5\x32\x1A\x2\x63\x62\x3\x2"+
		"\x2\x2\x64\x65\x3\x2\x2\x2\x65\x63\x3\x2\x2\x2\x65\x66\x3\x2\x2\x2\x66"+
		"p\x3\x2\x2\x2gh\x5\x30\x19\x2hi\x5\x30\x19\x2ik\x5\x30\x19\x2jl\x5\x30"+
		"\x19\x2kj\x3\x2\x2\x2lm\x3\x2\x2\x2mk\x3\x2\x2\x2mn\x3\x2\x2\x2np\x3\x2"+
		"\x2\x2o\x63\x3\x2\x2\x2og\x3\x2\x2\x2pu\x3\x2\x2\x2qt\x5\x32\x1A\x2rt"+
		"\x5\x30\x19\x2sq\x3\x2\x2\x2sr\x3\x2\x2\x2tw\x3\x2\x2\x2us\x3\x2\x2\x2"+
		"uv\x3\x2\x2\x2vx\x3\x2\x2\x2wu\x3\x2\x2\x2xy\x5\"\x12\x2y\r\x3\x2\x2\x2"+
		"z~\a\x3\x2\x2{|\a\t\x2\x2|~\a\x4\x2\x2}z\x3\x2\x2\x2}{\x3\x2\x2\x2~\xF"+
		"\x3\x2\x2\x2\x7F\x80\x5\x12\n\x2\x80\x81\x5\x34\x1B\x2\x81\x86\x3\x2\x2"+
		"\x2\x82\x83\x5\f\a\x2\x83\x84\x5\x34\x1B\x2\x84\x86\x3\x2\x2\x2\x85\x7F"+
		"\x3\x2\x2\x2\x85\x82\x3\x2\x2\x2\x86\x87\x3\x2\x2\x2\x87\x85\x3\x2\x2"+
		"\x2\x87\x88\x3\x2\x2\x2\x88\x11\x3\x2\x2\x2\x89\x8B\x5\x18\r\x2\x8A\x8C"+
		"\x5.\x18\x2\x8B\x8A\x3\x2\x2\x2\x8B\x8C\x3\x2\x2\x2\x8C\x8E\x3\x2\x2\x2"+
		"\x8D\x89\x3\x2\x2\x2\x8E\x8F\x3\x2\x2\x2\x8F\x8D\x3\x2\x2\x2\x8F\x90\x3"+
		"\x2\x2\x2\x90\x91\x3\x2\x2\x2\x91\x92\x5\x14\v\x2\x92\x13\x3\x2\x2\x2"+
		"\x93\x97\x5\x1A\xE\x2\x94\x97\x5\x16\f\x2\x95\x97\x5\x1E\x10\x2\x96\x93"+
		"\x3\x2\x2\x2\x96\x94\x3\x2\x2\x2\x96\x95\x3\x2\x2\x2\x97\x15\x3\x2\x2"+
		"\x2\x98\x9A\x5\xE\b\x2\x99\x9B\x5.\x18\x2\x9A\x99\x3\x2\x2\x2\x9A\x9B"+
		"\x3\x2\x2\x2\x9B\x9D\x3\x2\x2\x2\x9C\x98\x3\x2\x2\x2\x9D\x9E\x3\x2\x2"+
		"\x2\x9E\x9C\x3\x2\x2\x2\x9E\x9F\x3\x2\x2\x2\x9F\xA0\x3\x2\x2\x2\xA0\xA1"+
		"\x5\"\x12\x2\xA1\x17\x3\x2\x2\x2\xA2\xA3\a\x5\x2\x2\xA3\x19\x3\x2\x2\x2"+
		"\xA4\xA6\x5\x1C\xF\x2\xA5\xA4\x3\x2\x2\x2\xA6\xA7\x3\x2\x2\x2\xA7\xA5"+
		"\x3\x2\x2\x2\xA7\xA8\x3\x2\x2\x2\xA8\xA9\x3\x2\x2\x2\xA9\xAA\x5.\x18\x2"+
		"\xAA\xAB\x5\"\x12\x2\xAB\x1B\x3\x2\x2\x2\xAC\xAD\a\x6\x2\x2\xAD\x1D\x3"+
		"\x2\x2\x2\xAE\xB0\x5.\x18\x2\xAF\xAE\x3\x2\x2\x2\xB0\xB3\x3\x2\x2\x2\xB1"+
		"\xAF\x3\x2\x2\x2\xB1\xB2\x3\x2\x2\x2\xB2\xB4\x3\x2\x2\x2\xB3\xB1\x3\x2"+
		"\x2\x2\xB4\xB5\x5\"\x12\x2\xB5\x1F\x3\x2\x2\x2\xB6\xB8\x5.\x18\x2\xB7"+
		"\xB6\x3\x2\x2\x2\xB8\xBB\x3\x2\x2\x2\xB9\xB7\x3\x2\x2\x2\xB9\xBA\x3\x2"+
		"\x2\x2\xBA\xBC\x3\x2\x2\x2\xBB\xB9\x3\x2\x2\x2\xBC\xBE\x5\x34\x1B\x2\xBD"+
		"\xB9\x3\x2\x2\x2\xBE\xBF\x3\x2\x2\x2\xBF\xBD\x3\x2\x2\x2\xBF\xC0\x3\x2"+
		"\x2\x2\xC0!\x3\x2\x2\x2\xC1\xCA\x5,\x17\x2\xC2\xC9\x5.\x18\x2\xC3\xC9"+
		"\x5,\x17\x2\xC4\xC9\a\x6\x2\x2\xC5\xC9\a\x3\x2\x2\xC6\xC9\a\x5\x2\x2\xC7"+
		"\xC9\a\x4\x2\x2\xC8\xC2\x3\x2\x2\x2\xC8\xC3\x3\x2\x2\x2\xC8\xC4\x3\x2"+
		"\x2\x2\xC8\xC5\x3\x2\x2\x2\xC8\xC6\x3\x2\x2\x2\xC8\xC7\x3\x2\x2\x2\xC9"+
		"\xCC\x3\x2\x2\x2\xCA\xCB\x3\x2\x2\x2\xCA\xC8\x3\x2\x2\x2\xCB\xDC\x3\x2"+
		"\x2\x2\xCC\xCA\x3\x2\x2\x2\xCD\xD1\x5(\x15\x2\xCE\xD0\x5\x1E\x10\x2\xCF"+
		"\xCE\x3\x2\x2\x2\xD0\xD3\x3\x2\x2\x2\xD1\xCF\x3\x2\x2\x2\xD1\xD2\x3\x2"+
		"\x2\x2\xD2\xDC\x3\x2\x2\x2\xD3\xD1\x3\x2\x2\x2\xD4\xD8\x5*\x16\x2\xD5"+
		"\xD7\x5\x1E\x10\x2\xD6\xD5\x3\x2\x2\x2\xD7\xDA\x3\x2\x2\x2\xD8\xD6\x3"+
		"\x2\x2\x2\xD8\xD9\x3\x2\x2\x2\xD9\xDC\x3\x2\x2\x2\xDA\xD8\x3\x2\x2\x2"+
		"\xDB\xC1\x3\x2\x2\x2\xDB\xCD\x3\x2\x2\x2\xDB\xD4\x3\x2\x2\x2\xDC#\x3\x2"+
		"\x2\x2\xDD\xE4\x5.\x18\x2\xDE\xE4\x5,\x17\x2\xDF\xE4\a\x6\x2\x2\xE0\xE4"+
		"\a\x3\x2\x2\xE1\xE4\a\x4\x2\x2\xE2\xE4\a\r\x2\x2\xE3\xDD\x3\x2\x2\x2\xE3"+
		"\xDE\x3\x2\x2\x2\xE3\xDF\x3\x2\x2\x2\xE3\xE0\x3\x2\x2\x2\xE3\xE1\x3\x2"+
		"\x2\x2\xE3\xE2\x3\x2\x2\x2\xE4\xE7\x3\x2\x2\x2\xE5\xE3\x3\x2\x2\x2\xE5"+
		"\xE6\x3\x2\x2\x2\xE6%\x3\x2\x2\x2\xE7\xE5\x3\x2\x2\x2\xE8\xEA\x5,\x17"+
		"\x2\xE9\xE8\x3\x2\x2\x2\xEA\xEB\x3\x2\x2\x2\xEB\xE9\x3\x2\x2\x2\xEB\xEC"+
		"\x3\x2\x2\x2\xEC\'\x3\x2\x2\x2\xED\xEE\a\a\x2\x2\xEE\xEF\x5&\x14\x2\xEF"+
		"\xF1\x5$\x13\x2\xF0\xF2\a\b\x2\x2\xF1\xF0\x3\x2\x2\x2\xF1\xF2\x3\x2\x2"+
		"\x2\xF2\xF3\x3\x2\x2\x2\xF3\xF4\a\x5\x2\x2\xF4)\x3\x2\x2\x2\xF5\xF6\a"+
		"\a\x2\x2\xF6\xF7\a\b\x2\x2\xF7\xFB\x5&\x14\x2\xF8\xFA\x5.\x18\x2\xF9\xF8"+
		"\x3\x2\x2\x2\xFA\xFD\x3\x2\x2\x2\xFB\xF9\x3\x2\x2\x2\xFB\xFC\x3\x2\x2"+
		"\x2\xFC\xFE\x3\x2\x2\x2\xFD\xFB\x3\x2\x2\x2\xFE\xFF\a\x5\x2\x2\xFF+\x3"+
		"\x2\x2\x2\x100\x101\t\x2\x2\x2\x101-\x3\x2\x2\x2\x102\x105\x5\x30\x19"+
		"\x2\x103\x105\x5\x32\x1A\x2\x104\x102\x3\x2\x2\x2\x104\x103\x3\x2\x2\x2"+
		"\x105/\x3\x2\x2\x2\x106\x107\a\f\x2\x2\x107\x31\x3\x2\x2\x2\x108\x109"+
		"\a\v\x2\x2\x109\x33\x3\x2\x2\x2\x10A\x10D\x5\x36\x1C\x2\x10B\x10D\x5\x38"+
		"\x1D\x2\x10C\x10A\x3\x2\x2\x2\x10C\x10B\x3\x2\x2\x2\x10D\x35\x3\x2\x2"+
		"\x2\x10E\x10F\a\r\x2\x2\x10F\x37\x3\x2\x2\x2\x110\x112\x5\x30\x19\x2\x111"+
		"\x113\x5\x30\x19\x2\x112\x111\x3\x2\x2\x2\x113\x114\x3\x2\x2\x2\x114\x112"+
		"\x3\x2\x2\x2\x114\x115\x3\x2\x2\x2\x115\x116\x3\x2\x2\x2\x116\x117\a\r"+
		"\x2\x2\x117\x39\x3\x2\x2\x2&@LTVZ^\x65mosu}\x85\x87\x8B\x8F\x96\x9A\x9E"+
		"\xA7\xB1\xB9\xBF\xC8\xCA\xD1\xD8\xDB\xE3\xE5\xEB\xF1\xFB\x104\x10C\x114";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace TxMark.Compiler
